// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hand_tracking.proto
#ifndef GRPC_hand_5ftracking_2eproto__INCLUDED
#define GRPC_hand_5ftracking_2eproto__INCLUDED

#include "hand_tracking.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace generated {

class hand_tracking_com final {
 public:
  static constexpr char const* service_full_name() {
    return "generated.hand_tracking_com";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientWriterInterface< ::generated::hand_data>> transmit_hand_data(::grpc::ClientContext* context, ::google::protobuf::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::generated::hand_data>>(transmit_hand_dataRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::generated::hand_data>> Asynctransmit_hand_data(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::generated::hand_data>>(Asynctransmit_hand_dataRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::generated::hand_data>> PrepareAsynctransmit_hand_data(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::generated::hand_data>>(PrepareAsynctransmit_hand_dataRaw(context, response, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void transmit_hand_data(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::ClientWriteReactor< ::generated::hand_data>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientWriterInterface< ::generated::hand_data>* transmit_hand_dataRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::generated::hand_data>* Asynctransmit_hand_dataRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::generated::hand_data>* PrepareAsynctransmit_hand_dataRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientWriter< ::generated::hand_data>> transmit_hand_data(::grpc::ClientContext* context, ::google::protobuf::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::generated::hand_data>>(transmit_hand_dataRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::generated::hand_data>> Asynctransmit_hand_data(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::generated::hand_data>>(Asynctransmit_hand_dataRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::generated::hand_data>> PrepareAsynctransmit_hand_data(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::generated::hand_data>>(PrepareAsynctransmit_hand_dataRaw(context, response, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void transmit_hand_data(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::ClientWriteReactor< ::generated::hand_data>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientWriter< ::generated::hand_data>* transmit_hand_dataRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response) override;
    ::grpc::ClientAsyncWriter< ::generated::hand_data>* Asynctransmit_hand_dataRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::generated::hand_data>* PrepareAsynctransmit_hand_dataRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_transmit_hand_data_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status transmit_hand_data(::grpc::ServerContext* context, ::grpc::ServerReader< ::generated::hand_data>* reader, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_transmit_hand_data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_transmit_hand_data() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_transmit_hand_data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transmit_hand_data(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::generated::hand_data>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttransmit_hand_data(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::google::protobuf::Empty, ::generated::hand_data>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_transmit_hand_data<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_transmit_hand_data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_transmit_hand_data() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::generated::hand_data, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, ::google::protobuf::Empty* response) { return this->transmit_hand_data(context, response); }));
    }
    ~WithCallbackMethod_transmit_hand_data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transmit_hand_data(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::generated::hand_data>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::generated::hand_data>* transmit_hand_data(
      ::grpc::CallbackServerContext* /*context*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_transmit_hand_data<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_transmit_hand_data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_transmit_hand_data() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_transmit_hand_data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transmit_hand_data(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::generated::hand_data>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_transmit_hand_data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_transmit_hand_data() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_transmit_hand_data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transmit_hand_data(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::generated::hand_data>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttransmit_hand_data(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_transmit_hand_data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_transmit_hand_data() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->transmit_hand_data(context, response); }));
    }
    ~WithRawCallbackMethod_transmit_hand_data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transmit_hand_data(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::generated::hand_data>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* transmit_hand_data(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

}  // namespace generated


#endif  // GRPC_hand_5ftracking_2eproto__INCLUDED
