// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vertex.proto

#include "vertex.pb.h"
#include "vertex.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace generated {

static const char* mesh_com_method_names[] = {
  "/generated.mesh_com/transmit_mesh_data",
};

std::unique_ptr< mesh_com::Stub> mesh_com::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< mesh_com::Stub> stub(new mesh_com::Stub(channel, options));
  return stub;
}

mesh_com::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_transmit_mesh_data_(mesh_com_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::generated::named_request, ::generated::Mesh_Data_TF_Meta>* mesh_com::Stub::transmit_mesh_dataRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::generated::named_request, ::generated::Mesh_Data_TF_Meta>::Create(channel_.get(), rpcmethod_transmit_mesh_data_, context);
}

void mesh_com::Stub::async::transmit_mesh_data(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::generated::named_request,::generated::Mesh_Data_TF_Meta>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::generated::named_request,::generated::Mesh_Data_TF_Meta>::Create(stub_->channel_.get(), stub_->rpcmethod_transmit_mesh_data_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::generated::named_request, ::generated::Mesh_Data_TF_Meta>* mesh_com::Stub::Asynctransmit_mesh_dataRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::generated::named_request, ::generated::Mesh_Data_TF_Meta>::Create(channel_.get(), cq, rpcmethod_transmit_mesh_data_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::generated::named_request, ::generated::Mesh_Data_TF_Meta>* mesh_com::Stub::PrepareAsynctransmit_mesh_dataRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::generated::named_request, ::generated::Mesh_Data_TF_Meta>::Create(channel_.get(), cq, rpcmethod_transmit_mesh_data_, context, false, nullptr);
}

mesh_com::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      mesh_com_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< mesh_com::Service, ::generated::named_request, ::generated::Mesh_Data_TF_Meta>(
          [](mesh_com::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::generated::Mesh_Data_TF_Meta,
             ::generated::named_request>* stream) {
               return service->transmit_mesh_data(ctx, stream);
             }, this)));
}

mesh_com::Service::~Service() {
}

::grpc::Status mesh_com::Service::transmit_mesh_data(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::generated::Mesh_Data_TF_Meta, ::generated::named_request>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace generated

