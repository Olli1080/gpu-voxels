// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_object_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_object_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/empty.pb.h>
#include "vertex.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_object_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_object_2eproto {
  static const uint32_t offsets[];
};
namespace generated {
class colored_box;
struct colored_boxDefaultTypeInternal;
extern colored_boxDefaultTypeInternal _colored_box_default_instance_;
class delete_request;
struct delete_requestDefaultTypeInternal;
extern delete_requestDefaultTypeInternal _delete_request_default_instance_;
class object_data;
struct object_dataDefaultTypeInternal;
extern object_dataDefaultTypeInternal _object_data_default_instance_;
class object_instance;
struct object_instanceDefaultTypeInternal;
extern object_instanceDefaultTypeInternal _object_instance_default_instance_;
}  // namespace generated
PROTOBUF_NAMESPACE_OPEN
template<> ::generated::colored_box* Arena::CreateMaybeMessage<::generated::colored_box>(Arena*);
template<> ::generated::delete_request* Arena::CreateMaybeMessage<::generated::delete_request>(Arena*);
template<> ::generated::object_data* Arena::CreateMaybeMessage<::generated::object_data>(Arena*);
template<> ::generated::object_instance* Arena::CreateMaybeMessage<::generated::object_instance>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace generated {

// ===================================================================

class colored_box final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:generated.colored_box) */ {
 public:
  inline colored_box() : colored_box(nullptr) {}
  ~colored_box() override;
  explicit PROTOBUF_CONSTEXPR colored_box(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  colored_box(const colored_box& from);
  colored_box(colored_box&& from) noexcept
    : colored_box() {
    *this = ::std::move(from);
  }

  inline colored_box& operator=(const colored_box& from) {
    CopyFrom(from);
    return *this;
  }
  inline colored_box& operator=(colored_box&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const colored_box& default_instance() {
    return *internal_default_instance();
  }
  static inline const colored_box* internal_default_instance() {
    return reinterpret_cast<const colored_box*>(
               &_colored_box_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(colored_box& a, colored_box& b) {
    a.Swap(&b);
  }
  inline void Swap(colored_box* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(colored_box* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  colored_box* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<colored_box>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const colored_box& from);
  void MergeFrom(const colored_box& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(colored_box* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "generated.colored_box";
  }
  protected:
  explicit colored_box(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObboxFieldNumber = 1,
    kBoxColorFieldNumber = 2,
  };
  // .generated.obb obbox = 1;
  bool has_obbox() const;
  private:
  bool _internal_has_obbox() const;
  public:
  void clear_obbox();
  const ::generated::obb& obbox() const;
  PROTOBUF_NODISCARD ::generated::obb* release_obbox();
  ::generated::obb* mutable_obbox();
  void set_allocated_obbox(::generated::obb* obbox);
  private:
  const ::generated::obb& _internal_obbox() const;
  ::generated::obb* _internal_mutable_obbox();
  public:
  void unsafe_arena_set_allocated_obbox(
      ::generated::obb* obbox);
  ::generated::obb* unsafe_arena_release_obbox();

  // .generated.color box_color = 2;
  bool has_box_color() const;
  private:
  bool _internal_has_box_color() const;
  public:
  void clear_box_color();
  const ::generated::color& box_color() const;
  PROTOBUF_NODISCARD ::generated::color* release_box_color();
  ::generated::color* mutable_box_color();
  void set_allocated_box_color(::generated::color* box_color);
  private:
  const ::generated::color& _internal_box_color() const;
  ::generated::color* _internal_mutable_box_color();
  public:
  void unsafe_arena_set_allocated_box_color(
      ::generated::color* box_color);
  ::generated::color* unsafe_arena_release_box_color();

  // @@protoc_insertion_point(class_scope:generated.colored_box)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::generated::obb* obbox_;
    ::generated::color* box_color_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_object_2eproto;
};
// -------------------------------------------------------------------

class object_data final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:generated.object_data) */ {
 public:
  inline object_data() : object_data(nullptr) {}
  ~object_data() override;
  explicit PROTOBUF_CONSTEXPR object_data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  object_data(const object_data& from);
  object_data(object_data&& from) noexcept
    : object_data() {
    *this = ::std::move(from);
  }

  inline object_data& operator=(const object_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline object_data& operator=(object_data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const object_data& default_instance() {
    return *internal_default_instance();
  }
  static inline const object_data* internal_default_instance() {
    return reinterpret_cast<const object_data*>(
               &_object_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(object_data& a, object_data& b) {
    a.Swap(&b);
  }
  inline void Swap(object_data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(object_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  object_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<object_data>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const object_data& from);
  void MergeFrom(const object_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(object_data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "generated.object_data";
  }
  protected:
  explicit object_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrototypeNameFieldNumber = 1,
    kTransformFieldNumber = 2,
  };
  // string prototype_name = 1;
  void clear_prototype_name();
  const std::string& prototype_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prototype_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prototype_name();
  PROTOBUF_NODISCARD std::string* release_prototype_name();
  void set_allocated_prototype_name(std::string* prototype_name);
  private:
  const std::string& _internal_prototype_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prototype_name(const std::string& value);
  std::string* _internal_mutable_prototype_name();
  public:

  // .generated.matrix transform = 2;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::generated::matrix& transform() const;
  PROTOBUF_NODISCARD ::generated::matrix* release_transform();
  ::generated::matrix* mutable_transform();
  void set_allocated_transform(::generated::matrix* transform);
  private:
  const ::generated::matrix& _internal_transform() const;
  ::generated::matrix* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::generated::matrix* transform);
  ::generated::matrix* unsafe_arena_release_transform();

  // @@protoc_insertion_point(class_scope:generated.object_data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prototype_name_;
    ::generated::matrix* transform_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_object_2eproto;
};
// -------------------------------------------------------------------

class object_instance final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:generated.object_instance) */ {
 public:
  inline object_instance() : object_instance(nullptr) {}
  ~object_instance() override;
  explicit PROTOBUF_CONSTEXPR object_instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  object_instance(const object_instance& from);
  object_instance(object_instance&& from) noexcept
    : object_instance() {
    *this = ::std::move(from);
  }

  inline object_instance& operator=(const object_instance& from) {
    CopyFrom(from);
    return *this;
  }
  inline object_instance& operator=(object_instance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const object_instance& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kObj = 2,
    kBox = 3,
    DATA_NOT_SET = 0,
  };

  static inline const object_instance* internal_default_instance() {
    return reinterpret_cast<const object_instance*>(
               &_object_instance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(object_instance& a, object_instance& b) {
    a.Swap(&b);
  }
  inline void Swap(object_instance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(object_instance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  object_instance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<object_instance>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const object_instance& from);
  void MergeFrom(const object_instance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(object_instance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "generated.object_instance";
  }
  protected:
  explicit object_instance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kObjFieldNumber = 2,
    kBoxFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .generated.object_data obj = 2;
  bool has_obj() const;
  private:
  bool _internal_has_obj() const;
  public:
  void clear_obj();
  const ::generated::object_data& obj() const;
  PROTOBUF_NODISCARD ::generated::object_data* release_obj();
  ::generated::object_data* mutable_obj();
  void set_allocated_obj(::generated::object_data* obj);
  private:
  const ::generated::object_data& _internal_obj() const;
  ::generated::object_data* _internal_mutable_obj();
  public:
  void unsafe_arena_set_allocated_obj(
      ::generated::object_data* obj);
  ::generated::object_data* unsafe_arena_release_obj();

  // .generated.colored_box box = 3;
  bool has_box() const;
  private:
  bool _internal_has_box() const;
  public:
  void clear_box();
  const ::generated::colored_box& box() const;
  PROTOBUF_NODISCARD ::generated::colored_box* release_box();
  ::generated::colored_box* mutable_box();
  void set_allocated_box(::generated::colored_box* box);
  private:
  const ::generated::colored_box& _internal_box() const;
  ::generated::colored_box* _internal_mutable_box();
  public:
  void unsafe_arena_set_allocated_box(
      ::generated::colored_box* box);
  ::generated::colored_box* unsafe_arena_release_box();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:generated.object_instance)
 private:
  class _Internal;
  void set_has_obj();
  void set_has_box();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::generated::object_data* obj_;
      ::generated::colored_box* box_;
    } data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_object_2eproto;
};
// -------------------------------------------------------------------

class delete_request final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:generated.delete_request) */ {
 public:
  inline delete_request() : delete_request(nullptr) {}
  ~delete_request() override;
  explicit PROTOBUF_CONSTEXPR delete_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  delete_request(const delete_request& from);
  delete_request(delete_request&& from) noexcept
    : delete_request() {
    *this = ::std::move(from);
  }

  inline delete_request& operator=(const delete_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline delete_request& operator=(delete_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const delete_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const delete_request* internal_default_instance() {
    return reinterpret_cast<const delete_request*>(
               &_delete_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(delete_request& a, delete_request& b) {
    a.Swap(&b);
  }
  inline void Swap(delete_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(delete_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  delete_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<delete_request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const delete_request& from);
  void MergeFrom(const delete_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(delete_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "generated.delete_request";
  }
  protected:
  explicit delete_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:generated.delete_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_object_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// colored_box

// .generated.obb obbox = 1;
inline bool colored_box::_internal_has_obbox() const {
  return this != internal_default_instance() && _impl_.obbox_ != nullptr;
}
inline bool colored_box::has_obbox() const {
  return _internal_has_obbox();
}
inline const ::generated::obb& colored_box::_internal_obbox() const {
  const ::generated::obb* p = _impl_.obbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::generated::obb&>(
      ::generated::_obb_default_instance_);
}
inline const ::generated::obb& colored_box::obbox() const {
  // @@protoc_insertion_point(field_get:generated.colored_box.obbox)
  return _internal_obbox();
}
inline void colored_box::unsafe_arena_set_allocated_obbox(
    ::generated::obb* obbox) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.obbox_);
  }
  _impl_.obbox_ = obbox;
  if (obbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:generated.colored_box.obbox)
}
inline ::generated::obb* colored_box::release_obbox() {
  
  ::generated::obb* temp = _impl_.obbox_;
  _impl_.obbox_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::generated::obb* colored_box::unsafe_arena_release_obbox() {
  // @@protoc_insertion_point(field_release:generated.colored_box.obbox)
  
  ::generated::obb* temp = _impl_.obbox_;
  _impl_.obbox_ = nullptr;
  return temp;
}
inline ::generated::obb* colored_box::_internal_mutable_obbox() {
  
  if (_impl_.obbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::generated::obb>(GetArenaForAllocation());
    _impl_.obbox_ = p;
  }
  return _impl_.obbox_;
}
inline ::generated::obb* colored_box::mutable_obbox() {
  ::generated::obb* _msg = _internal_mutable_obbox();
  // @@protoc_insertion_point(field_mutable:generated.colored_box.obbox)
  return _msg;
}
inline void colored_box::set_allocated_obbox(::generated::obb* obbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.obbox_);
  }
  if (obbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obbox));
    if (message_arena != submessage_arena) {
      obbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obbox, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.obbox_ = obbox;
  // @@protoc_insertion_point(field_set_allocated:generated.colored_box.obbox)
}

// .generated.color box_color = 2;
inline bool colored_box::_internal_has_box_color() const {
  return this != internal_default_instance() && _impl_.box_color_ != nullptr;
}
inline bool colored_box::has_box_color() const {
  return _internal_has_box_color();
}
inline const ::generated::color& colored_box::_internal_box_color() const {
  const ::generated::color* p = _impl_.box_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::generated::color&>(
      ::generated::_color_default_instance_);
}
inline const ::generated::color& colored_box::box_color() const {
  // @@protoc_insertion_point(field_get:generated.colored_box.box_color)
  return _internal_box_color();
}
inline void colored_box::unsafe_arena_set_allocated_box_color(
    ::generated::color* box_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.box_color_);
  }
  _impl_.box_color_ = box_color;
  if (box_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:generated.colored_box.box_color)
}
inline ::generated::color* colored_box::release_box_color() {
  
  ::generated::color* temp = _impl_.box_color_;
  _impl_.box_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::generated::color* colored_box::unsafe_arena_release_box_color() {
  // @@protoc_insertion_point(field_release:generated.colored_box.box_color)
  
  ::generated::color* temp = _impl_.box_color_;
  _impl_.box_color_ = nullptr;
  return temp;
}
inline ::generated::color* colored_box::_internal_mutable_box_color() {
  
  if (_impl_.box_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::generated::color>(GetArenaForAllocation());
    _impl_.box_color_ = p;
  }
  return _impl_.box_color_;
}
inline ::generated::color* colored_box::mutable_box_color() {
  ::generated::color* _msg = _internal_mutable_box_color();
  // @@protoc_insertion_point(field_mutable:generated.colored_box.box_color)
  return _msg;
}
inline void colored_box::set_allocated_box_color(::generated::color* box_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.box_color_);
  }
  if (box_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(box_color));
    if (message_arena != submessage_arena) {
      box_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box_color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.box_color_ = box_color;
  // @@protoc_insertion_point(field_set_allocated:generated.colored_box.box_color)
}

// -------------------------------------------------------------------

// object_data

// string prototype_name = 1;
inline void object_data::clear_prototype_name() {
  _impl_.prototype_name_.ClearToEmpty();
}
inline const std::string& object_data::prototype_name() const {
  // @@protoc_insertion_point(field_get:generated.object_data.prototype_name)
  return _internal_prototype_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void object_data::set_prototype_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prototype_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:generated.object_data.prototype_name)
}
inline std::string* object_data::mutable_prototype_name() {
  std::string* _s = _internal_mutable_prototype_name();
  // @@protoc_insertion_point(field_mutable:generated.object_data.prototype_name)
  return _s;
}
inline const std::string& object_data::_internal_prototype_name() const {
  return _impl_.prototype_name_.Get();
}
inline void object_data::_internal_set_prototype_name(const std::string& value) {
  
  _impl_.prototype_name_.Set(value, GetArenaForAllocation());
}
inline std::string* object_data::_internal_mutable_prototype_name() {
  
  return _impl_.prototype_name_.Mutable(GetArenaForAllocation());
}
inline std::string* object_data::release_prototype_name() {
  // @@protoc_insertion_point(field_release:generated.object_data.prototype_name)
  return _impl_.prototype_name_.Release();
}
inline void object_data::set_allocated_prototype_name(std::string* prototype_name) {
  if (prototype_name != nullptr) {
    
  } else {
    
  }
  _impl_.prototype_name_.SetAllocated(prototype_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prototype_name_.IsDefault()) {
    _impl_.prototype_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:generated.object_data.prototype_name)
}

// .generated.matrix transform = 2;
inline bool object_data::_internal_has_transform() const {
  return this != internal_default_instance() && _impl_.transform_ != nullptr;
}
inline bool object_data::has_transform() const {
  return _internal_has_transform();
}
inline const ::generated::matrix& object_data::_internal_transform() const {
  const ::generated::matrix* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::generated::matrix&>(
      ::generated::_matrix_default_instance_);
}
inline const ::generated::matrix& object_data::transform() const {
  // @@protoc_insertion_point(field_get:generated.object_data.transform)
  return _internal_transform();
}
inline void object_data::unsafe_arena_set_allocated_transform(
    ::generated::matrix* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:generated.object_data.transform)
}
inline ::generated::matrix* object_data::release_transform() {
  
  ::generated::matrix* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::generated::matrix* object_data::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:generated.object_data.transform)
  
  ::generated::matrix* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::generated::matrix* object_data::_internal_mutable_transform() {
  
  if (_impl_.transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::generated::matrix>(GetArenaForAllocation());
    _impl_.transform_ = p;
  }
  return _impl_.transform_;
}
inline ::generated::matrix* object_data::mutable_transform() {
  ::generated::matrix* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:generated.object_data.transform)
  return _msg;
}
inline void object_data::set_allocated_transform(::generated::matrix* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform));
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:generated.object_data.transform)
}

// -------------------------------------------------------------------

// object_instance

// string id = 1;
inline void object_instance::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& object_instance::id() const {
  // @@protoc_insertion_point(field_get:generated.object_instance.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void object_instance::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:generated.object_instance.id)
}
inline std::string* object_instance::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:generated.object_instance.id)
  return _s;
}
inline const std::string& object_instance::_internal_id() const {
  return _impl_.id_.Get();
}
inline void object_instance::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* object_instance::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* object_instance::release_id() {
  // @@protoc_insertion_point(field_release:generated.object_instance.id)
  return _impl_.id_.Release();
}
inline void object_instance::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:generated.object_instance.id)
}

// .generated.object_data obj = 2;
inline bool object_instance::_internal_has_obj() const {
  return data_case() == kObj;
}
inline bool object_instance::has_obj() const {
  return _internal_has_obj();
}
inline void object_instance::set_has_obj() {
  _impl_._oneof_case_[0] = kObj;
}
inline void object_instance::clear_obj() {
  if (_internal_has_obj()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.obj_;
    }
    clear_has_data();
  }
}
inline ::generated::object_data* object_instance::release_obj() {
  // @@protoc_insertion_point(field_release:generated.object_instance.obj)
  if (_internal_has_obj()) {
    clear_has_data();
    ::generated::object_data* temp = _impl_.data_.obj_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.obj_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::generated::object_data& object_instance::_internal_obj() const {
  return _internal_has_obj()
      ? *_impl_.data_.obj_
      : reinterpret_cast< ::generated::object_data&>(::generated::_object_data_default_instance_);
}
inline const ::generated::object_data& object_instance::obj() const {
  // @@protoc_insertion_point(field_get:generated.object_instance.obj)
  return _internal_obj();
}
inline ::generated::object_data* object_instance::unsafe_arena_release_obj() {
  // @@protoc_insertion_point(field_unsafe_arena_release:generated.object_instance.obj)
  if (_internal_has_obj()) {
    clear_has_data();
    ::generated::object_data* temp = _impl_.data_.obj_;
    _impl_.data_.obj_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void object_instance::unsafe_arena_set_allocated_obj(::generated::object_data* obj) {
  clear_data();
  if (obj) {
    set_has_obj();
    _impl_.data_.obj_ = obj;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:generated.object_instance.obj)
}
inline ::generated::object_data* object_instance::_internal_mutable_obj() {
  if (!_internal_has_obj()) {
    clear_data();
    set_has_obj();
    _impl_.data_.obj_ = CreateMaybeMessage< ::generated::object_data >(GetArenaForAllocation());
  }
  return _impl_.data_.obj_;
}
inline ::generated::object_data* object_instance::mutable_obj() {
  ::generated::object_data* _msg = _internal_mutable_obj();
  // @@protoc_insertion_point(field_mutable:generated.object_instance.obj)
  return _msg;
}

// .generated.colored_box box = 3;
inline bool object_instance::_internal_has_box() const {
  return data_case() == kBox;
}
inline bool object_instance::has_box() const {
  return _internal_has_box();
}
inline void object_instance::set_has_box() {
  _impl_._oneof_case_[0] = kBox;
}
inline void object_instance::clear_box() {
  if (_internal_has_box()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.box_;
    }
    clear_has_data();
  }
}
inline ::generated::colored_box* object_instance::release_box() {
  // @@protoc_insertion_point(field_release:generated.object_instance.box)
  if (_internal_has_box()) {
    clear_has_data();
    ::generated::colored_box* temp = _impl_.data_.box_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.box_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::generated::colored_box& object_instance::_internal_box() const {
  return _internal_has_box()
      ? *_impl_.data_.box_
      : reinterpret_cast< ::generated::colored_box&>(::generated::_colored_box_default_instance_);
}
inline const ::generated::colored_box& object_instance::box() const {
  // @@protoc_insertion_point(field_get:generated.object_instance.box)
  return _internal_box();
}
inline ::generated::colored_box* object_instance::unsafe_arena_release_box() {
  // @@protoc_insertion_point(field_unsafe_arena_release:generated.object_instance.box)
  if (_internal_has_box()) {
    clear_has_data();
    ::generated::colored_box* temp = _impl_.data_.box_;
    _impl_.data_.box_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void object_instance::unsafe_arena_set_allocated_box(::generated::colored_box* box) {
  clear_data();
  if (box) {
    set_has_box();
    _impl_.data_.box_ = box;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:generated.object_instance.box)
}
inline ::generated::colored_box* object_instance::_internal_mutable_box() {
  if (!_internal_has_box()) {
    clear_data();
    set_has_box();
    _impl_.data_.box_ = CreateMaybeMessage< ::generated::colored_box >(GetArenaForAllocation());
  }
  return _impl_.data_.box_;
}
inline ::generated::colored_box* object_instance::mutable_box() {
  ::generated::colored_box* _msg = _internal_mutable_box();
  // @@protoc_insertion_point(field_mutable:generated.object_instance.box)
  return _msg;
}

inline bool object_instance::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void object_instance::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline object_instance::DataCase object_instance::data_case() const {
  return object_instance::DataCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// delete_request

// string id = 1;
inline void delete_request::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& delete_request::id() const {
  // @@protoc_insertion_point(field_get:generated.delete_request.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void delete_request::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:generated.delete_request.id)
}
inline std::string* delete_request::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:generated.delete_request.id)
  return _s;
}
inline const std::string& delete_request::_internal_id() const {
  return _impl_.id_.Get();
}
inline void delete_request::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* delete_request::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* delete_request::release_id() {
  // @@protoc_insertion_point(field_release:generated.delete_request.id)
  return _impl_.id_.Release();
}
inline void delete_request::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:generated.delete_request.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace generated

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_object_2eproto
