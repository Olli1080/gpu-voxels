// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_object_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_object_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/empty.pb.h>
#include "vertex.pb.h"
#include "meta_data.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_object_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_object_2eproto {
  static const uint32_t offsets[];
};
namespace generated {
class Colored_Box;
struct Colored_BoxDefaultTypeInternal;
extern Colored_BoxDefaultTypeInternal _Colored_Box_default_instance_;
class Delete_Request;
struct Delete_RequestDefaultTypeInternal;
extern Delete_RequestDefaultTypeInternal _Delete_Request_default_instance_;
class Object_Data;
struct Object_DataDefaultTypeInternal;
extern Object_DataDefaultTypeInternal _Object_Data_default_instance_;
class Object_Instance;
struct Object_InstanceDefaultTypeInternal;
extern Object_InstanceDefaultTypeInternal _Object_Instance_default_instance_;
class Object_Instance_TF_Meta;
struct Object_Instance_TF_MetaDefaultTypeInternal;
extern Object_Instance_TF_MetaDefaultTypeInternal _Object_Instance_TF_Meta_default_instance_;
}  // namespace generated
PROTOBUF_NAMESPACE_OPEN
template<> ::generated::Colored_Box* Arena::CreateMaybeMessage<::generated::Colored_Box>(Arena*);
template<> ::generated::Delete_Request* Arena::CreateMaybeMessage<::generated::Delete_Request>(Arena*);
template<> ::generated::Object_Data* Arena::CreateMaybeMessage<::generated::Object_Data>(Arena*);
template<> ::generated::Object_Instance* Arena::CreateMaybeMessage<::generated::Object_Instance>(Arena*);
template<> ::generated::Object_Instance_TF_Meta* Arena::CreateMaybeMessage<::generated::Object_Instance_TF_Meta>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace generated {

// ===================================================================

class Colored_Box final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:generated.Colored_Box) */ {
 public:
  inline Colored_Box() : Colored_Box(nullptr) {}
  ~Colored_Box() override;
  explicit PROTOBUF_CONSTEXPR Colored_Box(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Colored_Box(const Colored_Box& from);
  Colored_Box(Colored_Box&& from) noexcept
    : Colored_Box() {
    *this = ::std::move(from);
  }

  inline Colored_Box& operator=(const Colored_Box& from) {
    CopyFrom(from);
    return *this;
  }
  inline Colored_Box& operator=(Colored_Box&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Colored_Box& default_instance() {
    return *internal_default_instance();
  }
  static inline const Colored_Box* internal_default_instance() {
    return reinterpret_cast<const Colored_Box*>(
               &_Colored_Box_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Colored_Box& a, Colored_Box& b) {
    a.Swap(&b);
  }
  inline void Swap(Colored_Box* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Colored_Box* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Colored_Box* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Colored_Box>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Colored_Box& from);
  void MergeFrom(const Colored_Box& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Colored_Box* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "generated.Colored_Box";
  }
  protected:
  explicit Colored_Box(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObboxFieldNumber = 1,
    kBoxColorFieldNumber = 2,
  };
  // .generated.obb obbox = 1;
  bool has_obbox() const;
  private:
  bool _internal_has_obbox() const;
  public:
  void clear_obbox();
  const ::generated::obb& obbox() const;
  PROTOBUF_NODISCARD ::generated::obb* release_obbox();
  ::generated::obb* mutable_obbox();
  void set_allocated_obbox(::generated::obb* obbox);
  private:
  const ::generated::obb& _internal_obbox() const;
  ::generated::obb* _internal_mutable_obbox();
  public:
  void unsafe_arena_set_allocated_obbox(
      ::generated::obb* obbox);
  ::generated::obb* unsafe_arena_release_obbox();

  // .generated.color box_color = 2;
  bool has_box_color() const;
  private:
  bool _internal_has_box_color() const;
  public:
  void clear_box_color();
  const ::generated::color& box_color() const;
  PROTOBUF_NODISCARD ::generated::color* release_box_color();
  ::generated::color* mutable_box_color();
  void set_allocated_box_color(::generated::color* box_color);
  private:
  const ::generated::color& _internal_box_color() const;
  ::generated::color* _internal_mutable_box_color();
  public:
  void unsafe_arena_set_allocated_box_color(
      ::generated::color* box_color);
  ::generated::color* unsafe_arena_release_box_color();

  // @@protoc_insertion_point(class_scope:generated.Colored_Box)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::generated::obb* obbox_;
    ::generated::color* box_color_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_object_2eproto;
};
// -------------------------------------------------------------------

class Object_Data final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:generated.Object_Data) */ {
 public:
  inline Object_Data() : Object_Data(nullptr) {}
  ~Object_Data() override;
  explicit PROTOBUF_CONSTEXPR Object_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Object_Data(const Object_Data& from);
  Object_Data(Object_Data&& from) noexcept
    : Object_Data() {
    *this = ::std::move(from);
  }

  inline Object_Data& operator=(const Object_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object_Data& operator=(Object_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Object_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const Object_Data* internal_default_instance() {
    return reinterpret_cast<const Object_Data*>(
               &_Object_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Object_Data& a, Object_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Object_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Object_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Object_Data>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Object_Data& from);
  void MergeFrom(const Object_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Object_Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "generated.Object_Data";
  }
  protected:
  explicit Object_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrototypeNameFieldNumber = 1,
    kTransformFieldNumber = 2,
  };
  // string prototype_name = 1;
  void clear_prototype_name();
  const std::string& prototype_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prototype_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prototype_name();
  PROTOBUF_NODISCARD std::string* release_prototype_name();
  void set_allocated_prototype_name(std::string* prototype_name);
  private:
  const std::string& _internal_prototype_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prototype_name(const std::string& value);
  std::string* _internal_mutable_prototype_name();
  public:

  // .generated.Matrix transform = 2;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::generated::Matrix& transform() const;
  PROTOBUF_NODISCARD ::generated::Matrix* release_transform();
  ::generated::Matrix* mutable_transform();
  void set_allocated_transform(::generated::Matrix* transform);
  private:
  const ::generated::Matrix& _internal_transform() const;
  ::generated::Matrix* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::generated::Matrix* transform);
  ::generated::Matrix* unsafe_arena_release_transform();

  // @@protoc_insertion_point(class_scope:generated.Object_Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prototype_name_;
    ::generated::Matrix* transform_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_object_2eproto;
};
// -------------------------------------------------------------------

class Object_Instance final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:generated.Object_Instance) */ {
 public:
  inline Object_Instance() : Object_Instance(nullptr) {}
  ~Object_Instance() override;
  explicit PROTOBUF_CONSTEXPR Object_Instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Object_Instance(const Object_Instance& from);
  Object_Instance(Object_Instance&& from) noexcept
    : Object_Instance() {
    *this = ::std::move(from);
  }

  inline Object_Instance& operator=(const Object_Instance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object_Instance& operator=(Object_Instance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Object_Instance& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kObj = 2,
    kBox = 3,
    DATA_NOT_SET = 0,
  };

  static inline const Object_Instance* internal_default_instance() {
    return reinterpret_cast<const Object_Instance*>(
               &_Object_Instance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Object_Instance& a, Object_Instance& b) {
    a.Swap(&b);
  }
  inline void Swap(Object_Instance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object_Instance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Object_Instance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Object_Instance>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Object_Instance& from);
  void MergeFrom(const Object_Instance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Object_Instance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "generated.Object_Instance";
  }
  protected:
  explicit Object_Instance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kObjFieldNumber = 2,
    kBoxFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .generated.Object_Data obj = 2;
  bool has_obj() const;
  private:
  bool _internal_has_obj() const;
  public:
  void clear_obj();
  const ::generated::Object_Data& obj() const;
  PROTOBUF_NODISCARD ::generated::Object_Data* release_obj();
  ::generated::Object_Data* mutable_obj();
  void set_allocated_obj(::generated::Object_Data* obj);
  private:
  const ::generated::Object_Data& _internal_obj() const;
  ::generated::Object_Data* _internal_mutable_obj();
  public:
  void unsafe_arena_set_allocated_obj(
      ::generated::Object_Data* obj);
  ::generated::Object_Data* unsafe_arena_release_obj();

  // .generated.Colored_Box box = 3;
  bool has_box() const;
  private:
  bool _internal_has_box() const;
  public:
  void clear_box();
  const ::generated::Colored_Box& box() const;
  PROTOBUF_NODISCARD ::generated::Colored_Box* release_box();
  ::generated::Colored_Box* mutable_box();
  void set_allocated_box(::generated::Colored_Box* box);
  private:
  const ::generated::Colored_Box& _internal_box() const;
  ::generated::Colored_Box* _internal_mutable_box();
  public:
  void unsafe_arena_set_allocated_box(
      ::generated::Colored_Box* box);
  ::generated::Colored_Box* unsafe_arena_release_box();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:generated.Object_Instance)
 private:
  class _Internal;
  void set_has_obj();
  void set_has_box();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::generated::Object_Data* obj_;
      ::generated::Colored_Box* box_;
    } data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_object_2eproto;
};
// -------------------------------------------------------------------

class Delete_Request final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:generated.Delete_Request) */ {
 public:
  inline Delete_Request() : Delete_Request(nullptr) {}
  ~Delete_Request() override;
  explicit PROTOBUF_CONSTEXPR Delete_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Delete_Request(const Delete_Request& from);
  Delete_Request(Delete_Request&& from) noexcept
    : Delete_Request() {
    *this = ::std::move(from);
  }

  inline Delete_Request& operator=(const Delete_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Delete_Request& operator=(Delete_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Delete_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Delete_Request* internal_default_instance() {
    return reinterpret_cast<const Delete_Request*>(
               &_Delete_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Delete_Request& a, Delete_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Delete_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Delete_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Delete_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Delete_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Delete_Request& from);
  void MergeFrom(const Delete_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Delete_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "generated.Delete_Request";
  }
  protected:
  explicit Delete_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:generated.Delete_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_object_2eproto;
};
// -------------------------------------------------------------------

class Object_Instance_TF_Meta final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:generated.Object_Instance_TF_Meta) */ {
 public:
  inline Object_Instance_TF_Meta() : Object_Instance_TF_Meta(nullptr) {}
  ~Object_Instance_TF_Meta() override;
  explicit PROTOBUF_CONSTEXPR Object_Instance_TF_Meta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Object_Instance_TF_Meta(const Object_Instance_TF_Meta& from);
  Object_Instance_TF_Meta(Object_Instance_TF_Meta&& from) noexcept
    : Object_Instance_TF_Meta() {
    *this = ::std::move(from);
  }

  inline Object_Instance_TF_Meta& operator=(const Object_Instance_TF_Meta& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object_Instance_TF_Meta& operator=(Object_Instance_TF_Meta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Object_Instance_TF_Meta& default_instance() {
    return *internal_default_instance();
  }
  static inline const Object_Instance_TF_Meta* internal_default_instance() {
    return reinterpret_cast<const Object_Instance_TF_Meta*>(
               &_Object_Instance_TF_Meta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Object_Instance_TF_Meta& a, Object_Instance_TF_Meta& b) {
    a.Swap(&b);
  }
  inline void Swap(Object_Instance_TF_Meta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object_Instance_TF_Meta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Object_Instance_TF_Meta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Object_Instance_TF_Meta>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Object_Instance_TF_Meta& from);
  void MergeFrom(const Object_Instance_TF_Meta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Object_Instance_TF_Meta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "generated.Object_Instance_TF_Meta";
  }
  protected:
  explicit Object_Instance_TF_Meta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectInstanceFieldNumber = 1,
    kTransformationMetaFieldNumber = 2,
  };
  // .generated.Object_Instance object_instance = 1;
  bool has_object_instance() const;
  private:
  bool _internal_has_object_instance() const;
  public:
  void clear_object_instance();
  const ::generated::Object_Instance& object_instance() const;
  PROTOBUF_NODISCARD ::generated::Object_Instance* release_object_instance();
  ::generated::Object_Instance* mutable_object_instance();
  void set_allocated_object_instance(::generated::Object_Instance* object_instance);
  private:
  const ::generated::Object_Instance& _internal_object_instance() const;
  ::generated::Object_Instance* _internal_mutable_object_instance();
  public:
  void unsafe_arena_set_allocated_object_instance(
      ::generated::Object_Instance* object_instance);
  ::generated::Object_Instance* unsafe_arena_release_object_instance();

  // optional .generated.Transformation_Meta transformation_meta = 2;
  bool has_transformation_meta() const;
  private:
  bool _internal_has_transformation_meta() const;
  public:
  void clear_transformation_meta();
  const ::generated::Transformation_Meta& transformation_meta() const;
  PROTOBUF_NODISCARD ::generated::Transformation_Meta* release_transformation_meta();
  ::generated::Transformation_Meta* mutable_transformation_meta();
  void set_allocated_transformation_meta(::generated::Transformation_Meta* transformation_meta);
  private:
  const ::generated::Transformation_Meta& _internal_transformation_meta() const;
  ::generated::Transformation_Meta* _internal_mutable_transformation_meta();
  public:
  void unsafe_arena_set_allocated_transformation_meta(
      ::generated::Transformation_Meta* transformation_meta);
  ::generated::Transformation_Meta* unsafe_arena_release_transformation_meta();

  // @@protoc_insertion_point(class_scope:generated.Object_Instance_TF_Meta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::generated::Object_Instance* object_instance_;
    ::generated::Transformation_Meta* transformation_meta_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_object_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Colored_Box

// .generated.obb obbox = 1;
inline bool Colored_Box::_internal_has_obbox() const {
  return this != internal_default_instance() && _impl_.obbox_ != nullptr;
}
inline bool Colored_Box::has_obbox() const {
  return _internal_has_obbox();
}
inline const ::generated::obb& Colored_Box::_internal_obbox() const {
  const ::generated::obb* p = _impl_.obbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::generated::obb&>(
      ::generated::_obb_default_instance_);
}
inline const ::generated::obb& Colored_Box::obbox() const {
  // @@protoc_insertion_point(field_get:generated.Colored_Box.obbox)
  return _internal_obbox();
}
inline void Colored_Box::unsafe_arena_set_allocated_obbox(
    ::generated::obb* obbox) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.obbox_);
  }
  _impl_.obbox_ = obbox;
  if (obbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:generated.Colored_Box.obbox)
}
inline ::generated::obb* Colored_Box::release_obbox() {
  
  ::generated::obb* temp = _impl_.obbox_;
  _impl_.obbox_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::generated::obb* Colored_Box::unsafe_arena_release_obbox() {
  // @@protoc_insertion_point(field_release:generated.Colored_Box.obbox)
  
  ::generated::obb* temp = _impl_.obbox_;
  _impl_.obbox_ = nullptr;
  return temp;
}
inline ::generated::obb* Colored_Box::_internal_mutable_obbox() {
  
  if (_impl_.obbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::generated::obb>(GetArenaForAllocation());
    _impl_.obbox_ = p;
  }
  return _impl_.obbox_;
}
inline ::generated::obb* Colored_Box::mutable_obbox() {
  ::generated::obb* _msg = _internal_mutable_obbox();
  // @@protoc_insertion_point(field_mutable:generated.Colored_Box.obbox)
  return _msg;
}
inline void Colored_Box::set_allocated_obbox(::generated::obb* obbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.obbox_);
  }
  if (obbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obbox));
    if (message_arena != submessage_arena) {
      obbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obbox, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.obbox_ = obbox;
  // @@protoc_insertion_point(field_set_allocated:generated.Colored_Box.obbox)
}

// .generated.color box_color = 2;
inline bool Colored_Box::_internal_has_box_color() const {
  return this != internal_default_instance() && _impl_.box_color_ != nullptr;
}
inline bool Colored_Box::has_box_color() const {
  return _internal_has_box_color();
}
inline const ::generated::color& Colored_Box::_internal_box_color() const {
  const ::generated::color* p = _impl_.box_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::generated::color&>(
      ::generated::_color_default_instance_);
}
inline const ::generated::color& Colored_Box::box_color() const {
  // @@protoc_insertion_point(field_get:generated.Colored_Box.box_color)
  return _internal_box_color();
}
inline void Colored_Box::unsafe_arena_set_allocated_box_color(
    ::generated::color* box_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.box_color_);
  }
  _impl_.box_color_ = box_color;
  if (box_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:generated.Colored_Box.box_color)
}
inline ::generated::color* Colored_Box::release_box_color() {
  
  ::generated::color* temp = _impl_.box_color_;
  _impl_.box_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::generated::color* Colored_Box::unsafe_arena_release_box_color() {
  // @@protoc_insertion_point(field_release:generated.Colored_Box.box_color)
  
  ::generated::color* temp = _impl_.box_color_;
  _impl_.box_color_ = nullptr;
  return temp;
}
inline ::generated::color* Colored_Box::_internal_mutable_box_color() {
  
  if (_impl_.box_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::generated::color>(GetArenaForAllocation());
    _impl_.box_color_ = p;
  }
  return _impl_.box_color_;
}
inline ::generated::color* Colored_Box::mutable_box_color() {
  ::generated::color* _msg = _internal_mutable_box_color();
  // @@protoc_insertion_point(field_mutable:generated.Colored_Box.box_color)
  return _msg;
}
inline void Colored_Box::set_allocated_box_color(::generated::color* box_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.box_color_);
  }
  if (box_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(box_color));
    if (message_arena != submessage_arena) {
      box_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box_color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.box_color_ = box_color;
  // @@protoc_insertion_point(field_set_allocated:generated.Colored_Box.box_color)
}

// -------------------------------------------------------------------

// Object_Data

// string prototype_name = 1;
inline void Object_Data::clear_prototype_name() {
  _impl_.prototype_name_.ClearToEmpty();
}
inline const std::string& Object_Data::prototype_name() const {
  // @@protoc_insertion_point(field_get:generated.Object_Data.prototype_name)
  return _internal_prototype_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Object_Data::set_prototype_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prototype_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:generated.Object_Data.prototype_name)
}
inline std::string* Object_Data::mutable_prototype_name() {
  std::string* _s = _internal_mutable_prototype_name();
  // @@protoc_insertion_point(field_mutable:generated.Object_Data.prototype_name)
  return _s;
}
inline const std::string& Object_Data::_internal_prototype_name() const {
  return _impl_.prototype_name_.Get();
}
inline void Object_Data::_internal_set_prototype_name(const std::string& value) {
  
  _impl_.prototype_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Object_Data::_internal_mutable_prototype_name() {
  
  return _impl_.prototype_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Object_Data::release_prototype_name() {
  // @@protoc_insertion_point(field_release:generated.Object_Data.prototype_name)
  return _impl_.prototype_name_.Release();
}
inline void Object_Data::set_allocated_prototype_name(std::string* prototype_name) {
  if (prototype_name != nullptr) {
    
  } else {
    
  }
  _impl_.prototype_name_.SetAllocated(prototype_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prototype_name_.IsDefault()) {
    _impl_.prototype_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:generated.Object_Data.prototype_name)
}

// .generated.Matrix transform = 2;
inline bool Object_Data::_internal_has_transform() const {
  return this != internal_default_instance() && _impl_.transform_ != nullptr;
}
inline bool Object_Data::has_transform() const {
  return _internal_has_transform();
}
inline const ::generated::Matrix& Object_Data::_internal_transform() const {
  const ::generated::Matrix* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::generated::Matrix&>(
      ::generated::_Matrix_default_instance_);
}
inline const ::generated::Matrix& Object_Data::transform() const {
  // @@protoc_insertion_point(field_get:generated.Object_Data.transform)
  return _internal_transform();
}
inline void Object_Data::unsafe_arena_set_allocated_transform(
    ::generated::Matrix* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:generated.Object_Data.transform)
}
inline ::generated::Matrix* Object_Data::release_transform() {
  
  ::generated::Matrix* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::generated::Matrix* Object_Data::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:generated.Object_Data.transform)
  
  ::generated::Matrix* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::generated::Matrix* Object_Data::_internal_mutable_transform() {
  
  if (_impl_.transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::generated::Matrix>(GetArenaForAllocation());
    _impl_.transform_ = p;
  }
  return _impl_.transform_;
}
inline ::generated::Matrix* Object_Data::mutable_transform() {
  ::generated::Matrix* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:generated.Object_Data.transform)
  return _msg;
}
inline void Object_Data::set_allocated_transform(::generated::Matrix* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform));
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:generated.Object_Data.transform)
}

// -------------------------------------------------------------------

// Object_Instance

// string id = 1;
inline void Object_Instance::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Object_Instance::id() const {
  // @@protoc_insertion_point(field_get:generated.Object_Instance.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Object_Instance::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:generated.Object_Instance.id)
}
inline std::string* Object_Instance::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:generated.Object_Instance.id)
  return _s;
}
inline const std::string& Object_Instance::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Object_Instance::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Object_Instance::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Object_Instance::release_id() {
  // @@protoc_insertion_point(field_release:generated.Object_Instance.id)
  return _impl_.id_.Release();
}
inline void Object_Instance::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:generated.Object_Instance.id)
}

// .generated.Object_Data obj = 2;
inline bool Object_Instance::_internal_has_obj() const {
  return data_case() == kObj;
}
inline bool Object_Instance::has_obj() const {
  return _internal_has_obj();
}
inline void Object_Instance::set_has_obj() {
  _impl_._oneof_case_[0] = kObj;
}
inline void Object_Instance::clear_obj() {
  if (_internal_has_obj()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.obj_;
    }
    clear_has_data();
  }
}
inline ::generated::Object_Data* Object_Instance::release_obj() {
  // @@protoc_insertion_point(field_release:generated.Object_Instance.obj)
  if (_internal_has_obj()) {
    clear_has_data();
    ::generated::Object_Data* temp = _impl_.data_.obj_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.obj_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::generated::Object_Data& Object_Instance::_internal_obj() const {
  return _internal_has_obj()
      ? *_impl_.data_.obj_
      : reinterpret_cast< ::generated::Object_Data&>(::generated::_Object_Data_default_instance_);
}
inline const ::generated::Object_Data& Object_Instance::obj() const {
  // @@protoc_insertion_point(field_get:generated.Object_Instance.obj)
  return _internal_obj();
}
inline ::generated::Object_Data* Object_Instance::unsafe_arena_release_obj() {
  // @@protoc_insertion_point(field_unsafe_arena_release:generated.Object_Instance.obj)
  if (_internal_has_obj()) {
    clear_has_data();
    ::generated::Object_Data* temp = _impl_.data_.obj_;
    _impl_.data_.obj_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Object_Instance::unsafe_arena_set_allocated_obj(::generated::Object_Data* obj) {
  clear_data();
  if (obj) {
    set_has_obj();
    _impl_.data_.obj_ = obj;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:generated.Object_Instance.obj)
}
inline ::generated::Object_Data* Object_Instance::_internal_mutable_obj() {
  if (!_internal_has_obj()) {
    clear_data();
    set_has_obj();
    _impl_.data_.obj_ = CreateMaybeMessage< ::generated::Object_Data >(GetArenaForAllocation());
  }
  return _impl_.data_.obj_;
}
inline ::generated::Object_Data* Object_Instance::mutable_obj() {
  ::generated::Object_Data* _msg = _internal_mutable_obj();
  // @@protoc_insertion_point(field_mutable:generated.Object_Instance.obj)
  return _msg;
}

// .generated.Colored_Box box = 3;
inline bool Object_Instance::_internal_has_box() const {
  return data_case() == kBox;
}
inline bool Object_Instance::has_box() const {
  return _internal_has_box();
}
inline void Object_Instance::set_has_box() {
  _impl_._oneof_case_[0] = kBox;
}
inline void Object_Instance::clear_box() {
  if (_internal_has_box()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.box_;
    }
    clear_has_data();
  }
}
inline ::generated::Colored_Box* Object_Instance::release_box() {
  // @@protoc_insertion_point(field_release:generated.Object_Instance.box)
  if (_internal_has_box()) {
    clear_has_data();
    ::generated::Colored_Box* temp = _impl_.data_.box_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.box_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::generated::Colored_Box& Object_Instance::_internal_box() const {
  return _internal_has_box()
      ? *_impl_.data_.box_
      : reinterpret_cast< ::generated::Colored_Box&>(::generated::_Colored_Box_default_instance_);
}
inline const ::generated::Colored_Box& Object_Instance::box() const {
  // @@protoc_insertion_point(field_get:generated.Object_Instance.box)
  return _internal_box();
}
inline ::generated::Colored_Box* Object_Instance::unsafe_arena_release_box() {
  // @@protoc_insertion_point(field_unsafe_arena_release:generated.Object_Instance.box)
  if (_internal_has_box()) {
    clear_has_data();
    ::generated::Colored_Box* temp = _impl_.data_.box_;
    _impl_.data_.box_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Object_Instance::unsafe_arena_set_allocated_box(::generated::Colored_Box* box) {
  clear_data();
  if (box) {
    set_has_box();
    _impl_.data_.box_ = box;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:generated.Object_Instance.box)
}
inline ::generated::Colored_Box* Object_Instance::_internal_mutable_box() {
  if (!_internal_has_box()) {
    clear_data();
    set_has_box();
    _impl_.data_.box_ = CreateMaybeMessage< ::generated::Colored_Box >(GetArenaForAllocation());
  }
  return _impl_.data_.box_;
}
inline ::generated::Colored_Box* Object_Instance::mutable_box() {
  ::generated::Colored_Box* _msg = _internal_mutable_box();
  // @@protoc_insertion_point(field_mutable:generated.Object_Instance.box)
  return _msg;
}

inline bool Object_Instance::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Object_Instance::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline Object_Instance::DataCase Object_Instance::data_case() const {
  return Object_Instance::DataCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Delete_Request

// string id = 1;
inline void Delete_Request::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Delete_Request::id() const {
  // @@protoc_insertion_point(field_get:generated.Delete_Request.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Delete_Request::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:generated.Delete_Request.id)
}
inline std::string* Delete_Request::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:generated.Delete_Request.id)
  return _s;
}
inline const std::string& Delete_Request::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Delete_Request::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Delete_Request::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Delete_Request::release_id() {
  // @@protoc_insertion_point(field_release:generated.Delete_Request.id)
  return _impl_.id_.Release();
}
inline void Delete_Request::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:generated.Delete_Request.id)
}

// -------------------------------------------------------------------

// Object_Instance_TF_Meta

// .generated.Object_Instance object_instance = 1;
inline bool Object_Instance_TF_Meta::_internal_has_object_instance() const {
  return this != internal_default_instance() && _impl_.object_instance_ != nullptr;
}
inline bool Object_Instance_TF_Meta::has_object_instance() const {
  return _internal_has_object_instance();
}
inline void Object_Instance_TF_Meta::clear_object_instance() {
  if (GetArenaForAllocation() == nullptr && _impl_.object_instance_ != nullptr) {
    delete _impl_.object_instance_;
  }
  _impl_.object_instance_ = nullptr;
}
inline const ::generated::Object_Instance& Object_Instance_TF_Meta::_internal_object_instance() const {
  const ::generated::Object_Instance* p = _impl_.object_instance_;
  return p != nullptr ? *p : reinterpret_cast<const ::generated::Object_Instance&>(
      ::generated::_Object_Instance_default_instance_);
}
inline const ::generated::Object_Instance& Object_Instance_TF_Meta::object_instance() const {
  // @@protoc_insertion_point(field_get:generated.Object_Instance_TF_Meta.object_instance)
  return _internal_object_instance();
}
inline void Object_Instance_TF_Meta::unsafe_arena_set_allocated_object_instance(
    ::generated::Object_Instance* object_instance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_instance_);
  }
  _impl_.object_instance_ = object_instance;
  if (object_instance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:generated.Object_Instance_TF_Meta.object_instance)
}
inline ::generated::Object_Instance* Object_Instance_TF_Meta::release_object_instance() {
  
  ::generated::Object_Instance* temp = _impl_.object_instance_;
  _impl_.object_instance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::generated::Object_Instance* Object_Instance_TF_Meta::unsafe_arena_release_object_instance() {
  // @@protoc_insertion_point(field_release:generated.Object_Instance_TF_Meta.object_instance)
  
  ::generated::Object_Instance* temp = _impl_.object_instance_;
  _impl_.object_instance_ = nullptr;
  return temp;
}
inline ::generated::Object_Instance* Object_Instance_TF_Meta::_internal_mutable_object_instance() {
  
  if (_impl_.object_instance_ == nullptr) {
    auto* p = CreateMaybeMessage<::generated::Object_Instance>(GetArenaForAllocation());
    _impl_.object_instance_ = p;
  }
  return _impl_.object_instance_;
}
inline ::generated::Object_Instance* Object_Instance_TF_Meta::mutable_object_instance() {
  ::generated::Object_Instance* _msg = _internal_mutable_object_instance();
  // @@protoc_insertion_point(field_mutable:generated.Object_Instance_TF_Meta.object_instance)
  return _msg;
}
inline void Object_Instance_TF_Meta::set_allocated_object_instance(::generated::Object_Instance* object_instance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.object_instance_;
  }
  if (object_instance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(object_instance);
    if (message_arena != submessage_arena) {
      object_instance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_instance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.object_instance_ = object_instance;
  // @@protoc_insertion_point(field_set_allocated:generated.Object_Instance_TF_Meta.object_instance)
}

// optional .generated.Transformation_Meta transformation_meta = 2;
inline bool Object_Instance_TF_Meta::_internal_has_transformation_meta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transformation_meta_ != nullptr);
  return value;
}
inline bool Object_Instance_TF_Meta::has_transformation_meta() const {
  return _internal_has_transformation_meta();
}
inline const ::generated::Transformation_Meta& Object_Instance_TF_Meta::_internal_transformation_meta() const {
  const ::generated::Transformation_Meta* p = _impl_.transformation_meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::generated::Transformation_Meta&>(
      ::generated::_Transformation_Meta_default_instance_);
}
inline const ::generated::Transformation_Meta& Object_Instance_TF_Meta::transformation_meta() const {
  // @@protoc_insertion_point(field_get:generated.Object_Instance_TF_Meta.transformation_meta)
  return _internal_transformation_meta();
}
inline void Object_Instance_TF_Meta::unsafe_arena_set_allocated_transformation_meta(
    ::generated::Transformation_Meta* transformation_meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transformation_meta_);
  }
  _impl_.transformation_meta_ = transformation_meta;
  if (transformation_meta) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:generated.Object_Instance_TF_Meta.transformation_meta)
}
inline ::generated::Transformation_Meta* Object_Instance_TF_Meta::release_transformation_meta() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::generated::Transformation_Meta* temp = _impl_.transformation_meta_;
  _impl_.transformation_meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::generated::Transformation_Meta* Object_Instance_TF_Meta::unsafe_arena_release_transformation_meta() {
  // @@protoc_insertion_point(field_release:generated.Object_Instance_TF_Meta.transformation_meta)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::generated::Transformation_Meta* temp = _impl_.transformation_meta_;
  _impl_.transformation_meta_ = nullptr;
  return temp;
}
inline ::generated::Transformation_Meta* Object_Instance_TF_Meta::_internal_mutable_transformation_meta() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.transformation_meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::generated::Transformation_Meta>(GetArenaForAllocation());
    _impl_.transformation_meta_ = p;
  }
  return _impl_.transformation_meta_;
}
inline ::generated::Transformation_Meta* Object_Instance_TF_Meta::mutable_transformation_meta() {
  ::generated::Transformation_Meta* _msg = _internal_mutable_transformation_meta();
  // @@protoc_insertion_point(field_mutable:generated.Object_Instance_TF_Meta.transformation_meta)
  return _msg;
}
inline void Object_Instance_TF_Meta::set_allocated_transformation_meta(::generated::Transformation_Meta* transformation_meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transformation_meta_);
  }
  if (transformation_meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transformation_meta));
    if (message_arena != submessage_arena) {
      transformation_meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transformation_meta, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.transformation_meta_ = transformation_meta;
  // @@protoc_insertion_point(field_set_allocated:generated.Object_Instance_TF_Meta.transformation_meta)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace generated

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_object_2eproto
