// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: depth_image.proto

#include "depth_image.pb.h"
#include "depth_image.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace generated {

static const char* pcl_com_method_names[] = {
  "/generated.pcl_com/transmit_pcl_data",
  "/generated.pcl_com/transmit_draco_data",
  "/generated.pcl_com/transmit_obb",
};

std::unique_ptr< pcl_com::Stub> pcl_com::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< pcl_com::Stub> stub(new pcl_com::Stub(channel, options));
  return stub;
}

pcl_com::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_transmit_pcl_data_(pcl_com_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_transmit_draco_data_(pcl_com_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_transmit_obb_(pcl_com_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientWriter< ::generated::pcl_data>* pcl_com::Stub::transmit_pcl_dataRaw(::grpc::ClientContext* context, ::generated::maybe_matrix* response) {
  return ::grpc::internal::ClientWriterFactory< ::generated::pcl_data>::Create(channel_.get(), rpcmethod_transmit_pcl_data_, context, response);
}

void pcl_com::Stub::async::transmit_pcl_data(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::ClientWriteReactor< ::generated::pcl_data>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::generated::pcl_data>::Create(stub_->channel_.get(), stub_->rpcmethod_transmit_pcl_data_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::generated::pcl_data>* pcl_com::Stub::Asynctransmit_pcl_dataRaw(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::generated::pcl_data>::Create(channel_.get(), cq, rpcmethod_transmit_pcl_data_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::generated::pcl_data>* pcl_com::Stub::PrepareAsynctransmit_pcl_dataRaw(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::generated::pcl_data>::Create(channel_.get(), cq, rpcmethod_transmit_pcl_data_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::generated::draco_data>* pcl_com::Stub::transmit_draco_dataRaw(::grpc::ClientContext* context, ::generated::maybe_matrix* response) {
  return ::grpc::internal::ClientWriterFactory< ::generated::draco_data>::Create(channel_.get(), rpcmethod_transmit_draco_data_, context, response);
}

void pcl_com::Stub::async::transmit_draco_data(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::ClientWriteReactor< ::generated::draco_data>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::generated::draco_data>::Create(stub_->channel_.get(), stub_->rpcmethod_transmit_draco_data_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::generated::draco_data>* pcl_com::Stub::Asynctransmit_draco_dataRaw(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::generated::draco_data>::Create(channel_.get(), cq, rpcmethod_transmit_draco_data_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::generated::draco_data>* pcl_com::Stub::PrepareAsynctransmit_draco_dataRaw(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::generated::draco_data>::Create(channel_.get(), cq, rpcmethod_transmit_draco_data_, context, response, false, nullptr);
}

::grpc::Status pcl_com::Stub::transmit_obb(::grpc::ClientContext* context, const ::generated::obb& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::generated::obb, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_transmit_obb_, context, request, response);
}

void pcl_com::Stub::async::transmit_obb(::grpc::ClientContext* context, const ::generated::obb* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::generated::obb, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_transmit_obb_, context, request, response, std::move(f));
}

void pcl_com::Stub::async::transmit_obb(::grpc::ClientContext* context, const ::generated::obb* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_transmit_obb_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* pcl_com::Stub::PrepareAsynctransmit_obbRaw(::grpc::ClientContext* context, const ::generated::obb& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::generated::obb, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_transmit_obb_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* pcl_com::Stub::Asynctransmit_obbRaw(::grpc::ClientContext* context, const ::generated::obb& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynctransmit_obbRaw(context, request, cq);
  result->StartCall();
  return result;
}

pcl_com::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      pcl_com_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< pcl_com::Service, ::generated::pcl_data, ::generated::maybe_matrix>(
          [](pcl_com::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::generated::pcl_data>* reader,
             ::generated::maybe_matrix* resp) {
               return service->transmit_pcl_data(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      pcl_com_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< pcl_com::Service, ::generated::draco_data, ::generated::maybe_matrix>(
          [](pcl_com::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::generated::draco_data>* reader,
             ::generated::maybe_matrix* resp) {
               return service->transmit_draco_data(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      pcl_com_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< pcl_com::Service, ::generated::obb, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](pcl_com::Service* service,
             ::grpc::ServerContext* ctx,
             const ::generated::obb* req,
             ::google::protobuf::Empty* resp) {
               return service->transmit_obb(ctx, req, resp);
             }, this)));
}

pcl_com::Service::~Service() {
}

::grpc::Status pcl_com::Service::transmit_pcl_data(::grpc::ServerContext* context, ::grpc::ServerReader< ::generated::pcl_data>* reader, ::generated::maybe_matrix* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status pcl_com::Service::transmit_draco_data(::grpc::ServerContext* context, ::grpc::ServerReader< ::generated::draco_data>* reader, ::generated::maybe_matrix* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status pcl_com::Service::transmit_obb(::grpc::ServerContext* context, const ::generated::obb* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace generated

