// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_prototype.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_object_5fprototype_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_object_5fprototype_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "vertex.pb.h"
#include "meta_data.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_object_5fprototype_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_object_5fprototype_2eproto {
  static const uint32_t offsets[];
};
namespace generated {
class object_prototype;
struct object_prototypeDefaultTypeInternal;
extern object_prototypeDefaultTypeInternal _object_prototype_default_instance_;
}  // namespace generated
PROTOBUF_NAMESPACE_OPEN
template<> ::generated::object_prototype* Arena::CreateMaybeMessage<::generated::object_prototype>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace generated {

// ===================================================================

class object_prototype final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:generated.object_prototype) */ {
 public:
  inline object_prototype() : object_prototype(nullptr) {}
  ~object_prototype() override;
  explicit PROTOBUF_CONSTEXPR object_prototype(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  object_prototype(const object_prototype& from);
  object_prototype(object_prototype&& from) noexcept
    : object_prototype() {
    *this = ::std::move(from);
  }

  inline object_prototype& operator=(const object_prototype& from) {
    CopyFrom(from);
    return *this;
  }
  inline object_prototype& operator=(object_prototype&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const object_prototype& default_instance() {
    return *internal_default_instance();
  }
  static inline const object_prototype* internal_default_instance() {
    return reinterpret_cast<const object_prototype*>(
               &_object_prototype_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(object_prototype& a, object_prototype& b) {
    a.Swap(&b);
  }
  inline void Swap(object_prototype* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(object_prototype* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  object_prototype* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<object_prototype>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const object_prototype& from);
  void MergeFrom(const object_prototype& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(object_prototype* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "generated.object_prototype";
  }
  protected:
  explicit object_prototype(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeshNameFieldNumber = 3,
    kNameFieldNumber = 4,
    kTypeFieldNumber = 5,
    kBoundingBoxFieldNumber = 1,
    kMeanColorFieldNumber = 2,
  };
  // string mesh_name = 3;
  void clear_mesh_name();
  const std::string& mesh_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mesh_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mesh_name();
  PROTOBUF_NODISCARD std::string* release_mesh_name();
  void set_allocated_mesh_name(std::string* mesh_name);
  private:
  const std::string& _internal_mesh_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mesh_name(const std::string& value);
  std::string* _internal_mutable_mesh_name();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 5;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .generated.aabb bounding_box = 1;
  bool has_bounding_box() const;
  private:
  bool _internal_has_bounding_box() const;
  public:
  void clear_bounding_box();
  const ::generated::aabb& bounding_box() const;
  PROTOBUF_NODISCARD ::generated::aabb* release_bounding_box();
  ::generated::aabb* mutable_bounding_box();
  void set_allocated_bounding_box(::generated::aabb* bounding_box);
  private:
  const ::generated::aabb& _internal_bounding_box() const;
  ::generated::aabb* _internal_mutable_bounding_box();
  public:
  void unsafe_arena_set_allocated_bounding_box(
      ::generated::aabb* bounding_box);
  ::generated::aabb* unsafe_arena_release_bounding_box();

  // .generated.color mean_color = 2;
  bool has_mean_color() const;
  private:
  bool _internal_has_mean_color() const;
  public:
  void clear_mean_color();
  const ::generated::color& mean_color() const;
  PROTOBUF_NODISCARD ::generated::color* release_mean_color();
  ::generated::color* mutable_mean_color();
  void set_allocated_mean_color(::generated::color* mean_color);
  private:
  const ::generated::color& _internal_mean_color() const;
  ::generated::color* _internal_mutable_mean_color();
  public:
  void unsafe_arena_set_allocated_mean_color(
      ::generated::color* mean_color);
  ::generated::color* unsafe_arena_release_mean_color();

  // @@protoc_insertion_point(class_scope:generated.object_prototype)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mesh_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::generated::aabb* bounding_box_;
    ::generated::color* mean_color_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_object_5fprototype_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// object_prototype

// .generated.aabb bounding_box = 1;
inline bool object_prototype::_internal_has_bounding_box() const {
  return this != internal_default_instance() && _impl_.bounding_box_ != nullptr;
}
inline bool object_prototype::has_bounding_box() const {
  return _internal_has_bounding_box();
}
inline const ::generated::aabb& object_prototype::_internal_bounding_box() const {
  const ::generated::aabb* p = _impl_.bounding_box_;
  return p != nullptr ? *p : reinterpret_cast<const ::generated::aabb&>(
      ::generated::_aabb_default_instance_);
}
inline const ::generated::aabb& object_prototype::bounding_box() const {
  // @@protoc_insertion_point(field_get:generated.object_prototype.bounding_box)
  return _internal_bounding_box();
}
inline void object_prototype::unsafe_arena_set_allocated_bounding_box(
    ::generated::aabb* bounding_box) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bounding_box_);
  }
  _impl_.bounding_box_ = bounding_box;
  if (bounding_box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:generated.object_prototype.bounding_box)
}
inline ::generated::aabb* object_prototype::release_bounding_box() {
  
  ::generated::aabb* temp = _impl_.bounding_box_;
  _impl_.bounding_box_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::generated::aabb* object_prototype::unsafe_arena_release_bounding_box() {
  // @@protoc_insertion_point(field_release:generated.object_prototype.bounding_box)
  
  ::generated::aabb* temp = _impl_.bounding_box_;
  _impl_.bounding_box_ = nullptr;
  return temp;
}
inline ::generated::aabb* object_prototype::_internal_mutable_bounding_box() {
  
  if (_impl_.bounding_box_ == nullptr) {
    auto* p = CreateMaybeMessage<::generated::aabb>(GetArenaForAllocation());
    _impl_.bounding_box_ = p;
  }
  return _impl_.bounding_box_;
}
inline ::generated::aabb* object_prototype::mutable_bounding_box() {
  ::generated::aabb* _msg = _internal_mutable_bounding_box();
  // @@protoc_insertion_point(field_mutable:generated.object_prototype.bounding_box)
  return _msg;
}
inline void object_prototype::set_allocated_bounding_box(::generated::aabb* bounding_box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bounding_box_);
  }
  if (bounding_box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounding_box));
    if (message_arena != submessage_arena) {
      bounding_box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounding_box, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bounding_box_ = bounding_box;
  // @@protoc_insertion_point(field_set_allocated:generated.object_prototype.bounding_box)
}

// .generated.color mean_color = 2;
inline bool object_prototype::_internal_has_mean_color() const {
  return this != internal_default_instance() && _impl_.mean_color_ != nullptr;
}
inline bool object_prototype::has_mean_color() const {
  return _internal_has_mean_color();
}
inline const ::generated::color& object_prototype::_internal_mean_color() const {
  const ::generated::color* p = _impl_.mean_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::generated::color&>(
      ::generated::_color_default_instance_);
}
inline const ::generated::color& object_prototype::mean_color() const {
  // @@protoc_insertion_point(field_get:generated.object_prototype.mean_color)
  return _internal_mean_color();
}
inline void object_prototype::unsafe_arena_set_allocated_mean_color(
    ::generated::color* mean_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mean_color_);
  }
  _impl_.mean_color_ = mean_color;
  if (mean_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:generated.object_prototype.mean_color)
}
inline ::generated::color* object_prototype::release_mean_color() {
  
  ::generated::color* temp = _impl_.mean_color_;
  _impl_.mean_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::generated::color* object_prototype::unsafe_arena_release_mean_color() {
  // @@protoc_insertion_point(field_release:generated.object_prototype.mean_color)
  
  ::generated::color* temp = _impl_.mean_color_;
  _impl_.mean_color_ = nullptr;
  return temp;
}
inline ::generated::color* object_prototype::_internal_mutable_mean_color() {
  
  if (_impl_.mean_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::generated::color>(GetArenaForAllocation());
    _impl_.mean_color_ = p;
  }
  return _impl_.mean_color_;
}
inline ::generated::color* object_prototype::mutable_mean_color() {
  ::generated::color* _msg = _internal_mutable_mean_color();
  // @@protoc_insertion_point(field_mutable:generated.object_prototype.mean_color)
  return _msg;
}
inline void object_prototype::set_allocated_mean_color(::generated::color* mean_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mean_color_);
  }
  if (mean_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mean_color));
    if (message_arena != submessage_arena) {
      mean_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mean_color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mean_color_ = mean_color;
  // @@protoc_insertion_point(field_set_allocated:generated.object_prototype.mean_color)
}

// string mesh_name = 3;
inline void object_prototype::clear_mesh_name() {
  _impl_.mesh_name_.ClearToEmpty();
}
inline const std::string& object_prototype::mesh_name() const {
  // @@protoc_insertion_point(field_get:generated.object_prototype.mesh_name)
  return _internal_mesh_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void object_prototype::set_mesh_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mesh_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:generated.object_prototype.mesh_name)
}
inline std::string* object_prototype::mutable_mesh_name() {
  std::string* _s = _internal_mutable_mesh_name();
  // @@protoc_insertion_point(field_mutable:generated.object_prototype.mesh_name)
  return _s;
}
inline const std::string& object_prototype::_internal_mesh_name() const {
  return _impl_.mesh_name_.Get();
}
inline void object_prototype::_internal_set_mesh_name(const std::string& value) {
  
  _impl_.mesh_name_.Set(value, GetArenaForAllocation());
}
inline std::string* object_prototype::_internal_mutable_mesh_name() {
  
  return _impl_.mesh_name_.Mutable(GetArenaForAllocation());
}
inline std::string* object_prototype::release_mesh_name() {
  // @@protoc_insertion_point(field_release:generated.object_prototype.mesh_name)
  return _impl_.mesh_name_.Release();
}
inline void object_prototype::set_allocated_mesh_name(std::string* mesh_name) {
  if (mesh_name != nullptr) {
    
  } else {
    
  }
  _impl_.mesh_name_.SetAllocated(mesh_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mesh_name_.IsDefault()) {
    _impl_.mesh_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:generated.object_prototype.mesh_name)
}

// string name = 4;
inline void object_prototype::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& object_prototype::name() const {
  // @@protoc_insertion_point(field_get:generated.object_prototype.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void object_prototype::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:generated.object_prototype.name)
}
inline std::string* object_prototype::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:generated.object_prototype.name)
  return _s;
}
inline const std::string& object_prototype::_internal_name() const {
  return _impl_.name_.Get();
}
inline void object_prototype::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* object_prototype::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* object_prototype::release_name() {
  // @@protoc_insertion_point(field_release:generated.object_prototype.name)
  return _impl_.name_.Release();
}
inline void object_prototype::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:generated.object_prototype.name)
}

// string type = 5;
inline void object_prototype::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& object_prototype::type() const {
  // @@protoc_insertion_point(field_get:generated.object_prototype.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void object_prototype::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:generated.object_prototype.type)
}
inline std::string* object_prototype::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:generated.object_prototype.type)
  return _s;
}
inline const std::string& object_prototype::_internal_type() const {
  return _impl_.type_.Get();
}
inline void object_prototype::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* object_prototype::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* object_prototype::release_type() {
  // @@protoc_insertion_point(field_release:generated.object_prototype.type)
  return _impl_.type_.Release();
}
inline void object_prototype::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:generated.object_prototype.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace generated

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_object_5fprototype_2eproto
