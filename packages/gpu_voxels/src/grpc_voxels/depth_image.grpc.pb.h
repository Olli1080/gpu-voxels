// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: depth_image.proto
#ifndef GRPC_depth_5fimage_2eproto__INCLUDED
#define GRPC_depth_5fimage_2eproto__INCLUDED

#include "depth_image.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace generated {

class pcl_com final {
 public:
  static constexpr char const* service_full_name() {
    return "generated.pcl_com";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // sends point clouds and receives possible correspondence
    std::unique_ptr< ::grpc::ClientWriterInterface< ::generated::pcl_data>> transmit_pcl_data(::grpc::ClientContext* context, ::generated::maybe_matrix* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::generated::pcl_data>>(transmit_pcl_dataRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::generated::pcl_data>> Asynctransmit_pcl_data(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::generated::pcl_data>>(Asynctransmit_pcl_dataRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::generated::pcl_data>> PrepareAsynctransmit_pcl_data(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::generated::pcl_data>>(PrepareAsynctransmit_pcl_dataRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::generated::draco_data>> transmit_draco_data(::grpc::ClientContext* context, ::generated::maybe_matrix* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::generated::draco_data>>(transmit_draco_dataRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::generated::draco_data>> Asynctransmit_draco_data(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::generated::draco_data>>(Asynctransmit_draco_dataRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::generated::draco_data>> PrepareAsynctransmit_draco_data(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::generated::draco_data>>(PrepareAsynctransmit_draco_dataRaw(context, response, cq));
    }
    virtual ::grpc::Status transmit_obb(::grpc::ClientContext* context, const ::generated::obb& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asynctransmit_obb(::grpc::ClientContext* context, const ::generated::obb& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(Asynctransmit_obbRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsynctransmit_obb(::grpc::ClientContext* context, const ::generated::obb& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsynctransmit_obbRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // sends point clouds and receives possible correspondence
      virtual void transmit_pcl_data(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::ClientWriteReactor< ::generated::pcl_data>* reactor) = 0;
      virtual void transmit_draco_data(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::ClientWriteReactor< ::generated::draco_data>* reactor) = 0;
      virtual void transmit_obb(::grpc::ClientContext* context, const ::generated::obb* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void transmit_obb(::grpc::ClientContext* context, const ::generated::obb* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientWriterInterface< ::generated::pcl_data>* transmit_pcl_dataRaw(::grpc::ClientContext* context, ::generated::maybe_matrix* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::generated::pcl_data>* Asynctransmit_pcl_dataRaw(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::generated::pcl_data>* PrepareAsynctransmit_pcl_dataRaw(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::generated::draco_data>* transmit_draco_dataRaw(::grpc::ClientContext* context, ::generated::maybe_matrix* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::generated::draco_data>* Asynctransmit_draco_dataRaw(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::generated::draco_data>* PrepareAsynctransmit_draco_dataRaw(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* Asynctransmit_obbRaw(::grpc::ClientContext* context, const ::generated::obb& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsynctransmit_obbRaw(::grpc::ClientContext* context, const ::generated::obb& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientWriter< ::generated::pcl_data>> transmit_pcl_data(::grpc::ClientContext* context, ::generated::maybe_matrix* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::generated::pcl_data>>(transmit_pcl_dataRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::generated::pcl_data>> Asynctransmit_pcl_data(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::generated::pcl_data>>(Asynctransmit_pcl_dataRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::generated::pcl_data>> PrepareAsynctransmit_pcl_data(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::generated::pcl_data>>(PrepareAsynctransmit_pcl_dataRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::generated::draco_data>> transmit_draco_data(::grpc::ClientContext* context, ::generated::maybe_matrix* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::generated::draco_data>>(transmit_draco_dataRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::generated::draco_data>> Asynctransmit_draco_data(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::generated::draco_data>>(Asynctransmit_draco_dataRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::generated::draco_data>> PrepareAsynctransmit_draco_data(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::generated::draco_data>>(PrepareAsynctransmit_draco_dataRaw(context, response, cq));
    }
    ::grpc::Status transmit_obb(::grpc::ClientContext* context, const ::generated::obb& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asynctransmit_obb(::grpc::ClientContext* context, const ::generated::obb& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(Asynctransmit_obbRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsynctransmit_obb(::grpc::ClientContext* context, const ::generated::obb& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsynctransmit_obbRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void transmit_pcl_data(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::ClientWriteReactor< ::generated::pcl_data>* reactor) override;
      void transmit_draco_data(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::ClientWriteReactor< ::generated::draco_data>* reactor) override;
      void transmit_obb(::grpc::ClientContext* context, const ::generated::obb* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void transmit_obb(::grpc::ClientContext* context, const ::generated::obb* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientWriter< ::generated::pcl_data>* transmit_pcl_dataRaw(::grpc::ClientContext* context, ::generated::maybe_matrix* response) override;
    ::grpc::ClientAsyncWriter< ::generated::pcl_data>* Asynctransmit_pcl_dataRaw(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::generated::pcl_data>* PrepareAsynctransmit_pcl_dataRaw(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::generated::draco_data>* transmit_draco_dataRaw(::grpc::ClientContext* context, ::generated::maybe_matrix* response) override;
    ::grpc::ClientAsyncWriter< ::generated::draco_data>* Asynctransmit_draco_dataRaw(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::generated::draco_data>* PrepareAsynctransmit_draco_dataRaw(::grpc::ClientContext* context, ::generated::maybe_matrix* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Asynctransmit_obbRaw(::grpc::ClientContext* context, const ::generated::obb& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsynctransmit_obbRaw(::grpc::ClientContext* context, const ::generated::obb& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_transmit_pcl_data_;
    const ::grpc::internal::RpcMethod rpcmethod_transmit_draco_data_;
    const ::grpc::internal::RpcMethod rpcmethod_transmit_obb_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // sends point clouds and receives possible correspondence
    virtual ::grpc::Status transmit_pcl_data(::grpc::ServerContext* context, ::grpc::ServerReader< ::generated::pcl_data>* reader, ::generated::maybe_matrix* response);
    virtual ::grpc::Status transmit_draco_data(::grpc::ServerContext* context, ::grpc::ServerReader< ::generated::draco_data>* reader, ::generated::maybe_matrix* response);
    virtual ::grpc::Status transmit_obb(::grpc::ServerContext* context, const ::generated::obb* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_transmit_pcl_data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_transmit_pcl_data() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_transmit_pcl_data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transmit_pcl_data(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::generated::pcl_data>* /*reader*/, ::generated::maybe_matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttransmit_pcl_data(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::generated::maybe_matrix, ::generated::pcl_data>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_transmit_draco_data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_transmit_draco_data() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_transmit_draco_data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transmit_draco_data(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::generated::draco_data>* /*reader*/, ::generated::maybe_matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttransmit_draco_data(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::generated::maybe_matrix, ::generated::draco_data>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_transmit_obb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_transmit_obb() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_transmit_obb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transmit_obb(::grpc::ServerContext* /*context*/, const ::generated::obb* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttransmit_obb(::grpc::ServerContext* context, ::generated::obb* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_transmit_pcl_data<WithAsyncMethod_transmit_draco_data<WithAsyncMethod_transmit_obb<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_transmit_pcl_data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_transmit_pcl_data() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::generated::pcl_data, ::generated::maybe_matrix>(
            [this](
                   ::grpc::CallbackServerContext* context, ::generated::maybe_matrix* response) { return this->transmit_pcl_data(context, response); }));
    }
    ~WithCallbackMethod_transmit_pcl_data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transmit_pcl_data(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::generated::pcl_data>* /*reader*/, ::generated::maybe_matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::generated::pcl_data>* transmit_pcl_data(
      ::grpc::CallbackServerContext* /*context*/, ::generated::maybe_matrix* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_transmit_draco_data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_transmit_draco_data() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::generated::draco_data, ::generated::maybe_matrix>(
            [this](
                   ::grpc::CallbackServerContext* context, ::generated::maybe_matrix* response) { return this->transmit_draco_data(context, response); }));
    }
    ~WithCallbackMethod_transmit_draco_data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transmit_draco_data(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::generated::draco_data>* /*reader*/, ::generated::maybe_matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::generated::draco_data>* transmit_draco_data(
      ::grpc::CallbackServerContext* /*context*/, ::generated::maybe_matrix* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_transmit_obb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_transmit_obb() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::generated::obb, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::generated::obb* request, ::google::protobuf::Empty* response) { return this->transmit_obb(context, request, response); }));}
    void SetMessageAllocatorFor_transmit_obb(
        ::grpc::MessageAllocator< ::generated::obb, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::generated::obb, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_transmit_obb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transmit_obb(::grpc::ServerContext* /*context*/, const ::generated::obb* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* transmit_obb(
      ::grpc::CallbackServerContext* /*context*/, const ::generated::obb* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_transmit_pcl_data<WithCallbackMethod_transmit_draco_data<WithCallbackMethod_transmit_obb<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_transmit_pcl_data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_transmit_pcl_data() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_transmit_pcl_data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transmit_pcl_data(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::generated::pcl_data>* /*reader*/, ::generated::maybe_matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_transmit_draco_data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_transmit_draco_data() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_transmit_draco_data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transmit_draco_data(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::generated::draco_data>* /*reader*/, ::generated::maybe_matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_transmit_obb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_transmit_obb() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_transmit_obb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transmit_obb(::grpc::ServerContext* /*context*/, const ::generated::obb* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_transmit_pcl_data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_transmit_pcl_data() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_transmit_pcl_data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transmit_pcl_data(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::generated::pcl_data>* /*reader*/, ::generated::maybe_matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttransmit_pcl_data(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_transmit_draco_data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_transmit_draco_data() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_transmit_draco_data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transmit_draco_data(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::generated::draco_data>* /*reader*/, ::generated::maybe_matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttransmit_draco_data(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_transmit_obb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_transmit_obb() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_transmit_obb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transmit_obb(::grpc::ServerContext* /*context*/, const ::generated::obb* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttransmit_obb(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_transmit_pcl_data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_transmit_pcl_data() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->transmit_pcl_data(context, response); }));
    }
    ~WithRawCallbackMethod_transmit_pcl_data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transmit_pcl_data(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::generated::pcl_data>* /*reader*/, ::generated::maybe_matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* transmit_pcl_data(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_transmit_draco_data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_transmit_draco_data() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->transmit_draco_data(context, response); }));
    }
    ~WithRawCallbackMethod_transmit_draco_data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transmit_draco_data(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::generated::draco_data>* /*reader*/, ::generated::maybe_matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* transmit_draco_data(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_transmit_obb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_transmit_obb() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->transmit_obb(context, request, response); }));
    }
    ~WithRawCallbackMethod_transmit_obb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transmit_obb(::grpc::ServerContext* /*context*/, const ::generated::obb* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* transmit_obb(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_transmit_obb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_transmit_obb() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::generated::obb, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::generated::obb, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedtransmit_obb(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_transmit_obb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status transmit_obb(::grpc::ServerContext* /*context*/, const ::generated::obb* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedtransmit_obb(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::generated::obb,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_transmit_obb<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_transmit_obb<Service > StreamedService;
};

}  // namespace generated


#endif  // GRPC_depth_5fimage_2eproto__INCLUDED
