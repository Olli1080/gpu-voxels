// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta_data.proto

#include "meta_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace generated {
PROTOBUF_CONSTEXPR Axis_Alignment::Axis_Alignment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.axis_)*/0
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Axis_AlignmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Axis_AlignmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Axis_AlignmentDefaultTypeInternal() {}
  union {
    Axis_Alignment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Axis_AlignmentDefaultTypeInternal _Axis_Alignment_default_instance_;
PROTOBUF_CONSTEXPR Transformation_Meta::Transformation_Meta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.right_)*/nullptr
  , /*decltype(_impl_.forward_)*/nullptr
  , /*decltype(_impl_.up_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Transformation_MetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Transformation_MetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Transformation_MetaDefaultTypeInternal() {}
  union {
    Transformation_Meta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Transformation_MetaDefaultTypeInternal _Transformation_Meta_default_instance_;
}  // namespace generated
namespace generated {
bool Axis_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Axis_strings[3] = {};

static const char Axis_names[] =
  "X"
  "Y"
  "Z";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Axis_entries[] = {
  { {Axis_names + 0, 1}, 0 },
  { {Axis_names + 1, 1}, 1 },
  { {Axis_names + 2, 1}, 2 },
};

static const int Axis_entries_by_number[] = {
  0, // 0 -> X
  1, // 1 -> Y
  2, // 2 -> Z
};

const std::string& Axis_Name(
    Axis value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Axis_entries,
          Axis_entries_by_number,
          3, Axis_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Axis_entries,
      Axis_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Axis_strings[idx].get();
}
bool Axis_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Axis* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Axis_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<Axis>(int_value);
  }
  return success;
}
bool Axis_Direction_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Axis_Direction_strings[3] = {};

static const char Axis_Direction_names[] =
  "INVALID"
  "NEGATIVE"
  "POSITIVE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Axis_Direction_entries[] = {
  { {Axis_Direction_names + 0, 7}, 0 },
  { {Axis_Direction_names + 7, 8}, -1 },
  { {Axis_Direction_names + 15, 8}, 1 },
};

static const int Axis_Direction_entries_by_number[] = {
  1, // -1 -> NEGATIVE
  0, // 0 -> INVALID
  2, // 1 -> POSITIVE
};

const std::string& Axis_Direction_Name(
    Axis_Direction value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Axis_Direction_entries,
          Axis_Direction_entries_by_number,
          3, Axis_Direction_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Axis_Direction_entries,
      Axis_Direction_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Axis_Direction_strings[idx].get();
}
bool Axis_Direction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Axis_Direction* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Axis_Direction_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<Axis_Direction>(int_value);
  }
  return success;
}

// ===================================================================

class Axis_Alignment::_Internal {
 public:
};

Axis_Alignment::Axis_Alignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:generated.Axis_Alignment)
}
Axis_Alignment::Axis_Alignment(const Axis_Alignment& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Axis_Alignment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.axis_){}
    , decltype(_impl_.direction_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.axis_, &from._impl_.axis_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.direction_) -
    reinterpret_cast<char*>(&_impl_.axis_)) + sizeof(_impl_.direction_));
  // @@protoc_insertion_point(copy_constructor:generated.Axis_Alignment)
}

inline void Axis_Alignment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.axis_){0}
    , decltype(_impl_.direction_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Axis_Alignment::~Axis_Alignment() {
  // @@protoc_insertion_point(destructor:generated.Axis_Alignment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Axis_Alignment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Axis_Alignment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Axis_Alignment::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.Axis_Alignment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.axis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.direction_) -
      reinterpret_cast<char*>(&_impl_.axis_)) + sizeof(_impl_.direction_));
  _internal_metadata_.Clear<std::string>();
}

const char* Axis_Alignment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .generated.Axis axis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_axis(static_cast<::generated::Axis>(val));
        } else
          goto handle_unusual;
        continue;
      // .generated.Axis_Direction direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::generated::Axis_Direction>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Axis_Alignment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.Axis_Alignment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .generated.Axis axis = 1;
  if (this->_internal_axis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_axis(), target);
  }

  // .generated.Axis_Direction direction = 2;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.Axis_Alignment)
  return target;
}

size_t Axis_Alignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.Axis_Alignment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .generated.Axis axis = 1;
  if (this->_internal_axis() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_axis());
  }

  // .generated.Axis_Direction direction = 2;
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Axis_Alignment::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Axis_Alignment*>(
      &from));
}

void Axis_Alignment::MergeFrom(const Axis_Alignment& from) {
  Axis_Alignment* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.Axis_Alignment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_axis() != 0) {
    _this->_internal_set_axis(from._internal_axis());
  }
  if (from._internal_direction() != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Axis_Alignment::CopyFrom(const Axis_Alignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.Axis_Alignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Axis_Alignment::IsInitialized() const {
  return true;
}

void Axis_Alignment::InternalSwap(Axis_Alignment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Axis_Alignment, _impl_.direction_)
      + sizeof(Axis_Alignment::_impl_.direction_)
      - PROTOBUF_FIELD_OFFSET(Axis_Alignment, _impl_.axis_)>(
          reinterpret_cast<char*>(&_impl_.axis_),
          reinterpret_cast<char*>(&other->_impl_.axis_));
}

std::string Axis_Alignment::GetTypeName() const {
  return "generated.Axis_Alignment";
}


// ===================================================================

class Transformation_Meta::_Internal {
 public:
  static const ::generated::Axis_Alignment& right(const Transformation_Meta* msg);
  static const ::generated::Axis_Alignment& forward(const Transformation_Meta* msg);
  static const ::generated::Axis_Alignment& up(const Transformation_Meta* msg);
};

const ::generated::Axis_Alignment&
Transformation_Meta::_Internal::right(const Transformation_Meta* msg) {
  return *msg->_impl_.right_;
}
const ::generated::Axis_Alignment&
Transformation_Meta::_Internal::forward(const Transformation_Meta* msg) {
  return *msg->_impl_.forward_;
}
const ::generated::Axis_Alignment&
Transformation_Meta::_Internal::up(const Transformation_Meta* msg) {
  return *msg->_impl_.up_;
}
Transformation_Meta::Transformation_Meta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:generated.Transformation_Meta)
}
Transformation_Meta::Transformation_Meta(const Transformation_Meta& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Transformation_Meta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.right_){nullptr}
    , decltype(_impl_.forward_){nullptr}
    , decltype(_impl_.up_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_right()) {
    _this->_impl_.right_ = new ::generated::Axis_Alignment(*from._impl_.right_);
  }
  if (from._internal_has_forward()) {
    _this->_impl_.forward_ = new ::generated::Axis_Alignment(*from._impl_.forward_);
  }
  if (from._internal_has_up()) {
    _this->_impl_.up_ = new ::generated::Axis_Alignment(*from._impl_.up_);
  }
  // @@protoc_insertion_point(copy_constructor:generated.Transformation_Meta)
}

inline void Transformation_Meta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.right_){nullptr}
    , decltype(_impl_.forward_){nullptr}
    , decltype(_impl_.up_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Transformation_Meta::~Transformation_Meta() {
  // @@protoc_insertion_point(destructor:generated.Transformation_Meta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Transformation_Meta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.right_;
  if (this != internal_default_instance()) delete _impl_.forward_;
  if (this != internal_default_instance()) delete _impl_.up_;
}

void Transformation_Meta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Transformation_Meta::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.Transformation_Meta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.right_ != nullptr) {
    delete _impl_.right_;
  }
  _impl_.right_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.forward_ != nullptr) {
    delete _impl_.forward_;
  }
  _impl_.forward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.up_ != nullptr) {
    delete _impl_.up_;
  }
  _impl_.up_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* Transformation_Meta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .generated.Axis_Alignment right = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .generated.Axis_Alignment forward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .generated.Axis_Alignment up = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_up(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transformation_Meta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.Transformation_Meta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .generated.Axis_Alignment right = 1;
  if (this->_internal_has_right()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::right(this),
        _Internal::right(this).GetCachedSize(), target, stream);
  }

  // .generated.Axis_Alignment forward = 2;
  if (this->_internal_has_forward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::forward(this),
        _Internal::forward(this).GetCachedSize(), target, stream);
  }

  // .generated.Axis_Alignment up = 3;
  if (this->_internal_has_up()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::up(this),
        _Internal::up(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.Transformation_Meta)
  return target;
}

size_t Transformation_Meta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.Transformation_Meta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .generated.Axis_Alignment right = 1;
  if (this->_internal_has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.right_);
  }

  // .generated.Axis_Alignment forward = 2;
  if (this->_internal_has_forward()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.forward_);
  }

  // .generated.Axis_Alignment up = 3;
  if (this->_internal_has_up()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.up_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transformation_Meta::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Transformation_Meta*>(
      &from));
}

void Transformation_Meta::MergeFrom(const Transformation_Meta& from) {
  Transformation_Meta* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.Transformation_Meta)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_right()) {
    _this->_internal_mutable_right()->::generated::Axis_Alignment::MergeFrom(
        from._internal_right());
  }
  if (from._internal_has_forward()) {
    _this->_internal_mutable_forward()->::generated::Axis_Alignment::MergeFrom(
        from._internal_forward());
  }
  if (from._internal_has_up()) {
    _this->_internal_mutable_up()->::generated::Axis_Alignment::MergeFrom(
        from._internal_up());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Transformation_Meta::CopyFrom(const Transformation_Meta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.Transformation_Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transformation_Meta::IsInitialized() const {
  return true;
}

void Transformation_Meta::InternalSwap(Transformation_Meta* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transformation_Meta, _impl_.up_)
      + sizeof(Transformation_Meta::_impl_.up_)
      - PROTOBUF_FIELD_OFFSET(Transformation_Meta, _impl_.right_)>(
          reinterpret_cast<char*>(&_impl_.right_),
          reinterpret_cast<char*>(&other->_impl_.right_));
}

std::string Transformation_Meta::GetTypeName() const {
  return "generated.Transformation_Meta";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace generated
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::generated::Axis_Alignment*
Arena::CreateMaybeMessage< ::generated::Axis_Alignment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::Axis_Alignment >(arena);
}
template<> PROTOBUF_NOINLINE ::generated::Transformation_Meta*
Arena::CreateMaybeMessage< ::generated::Transformation_Meta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::Transformation_Meta >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
