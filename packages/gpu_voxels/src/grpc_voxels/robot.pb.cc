// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot.proto

#include "robot.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace generated {
PROTOBUF_CONSTEXPR joints::joints(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.theta_1_)*/0
  , /*decltype(_impl_.theta_2_)*/0
  , /*decltype(_impl_.theta_3_)*/0
  , /*decltype(_impl_.theta_4_)*/0
  , /*decltype(_impl_.theta_5_)*/0
  , /*decltype(_impl_.theta_6_)*/0
  , /*decltype(_impl_.theta_7_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct jointsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR jointsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~jointsDefaultTypeInternal() {}
  union {
    joints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 jointsDefaultTypeInternal _joints_default_instance_;
PROTOBUF_CONSTEXPR voxels::voxels(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.voxel_coords_)*/{}
  , /*decltype(_impl_.robot_origin_)*/nullptr
  , /*decltype(_impl_.voxel_side_length_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct voxelsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR voxelsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~voxelsDefaultTypeInternal() {}
  union {
    voxels _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 voxelsDefaultTypeInternal _voxels_default_instance_;
PROTOBUF_CONSTEXPR tcps::tcps(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct tcpsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR tcpsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~tcpsDefaultTypeInternal() {}
  union {
    tcps _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 tcpsDefaultTypeInternal _tcps_default_instance_;
}  // namespace generated
namespace generated {

// ===================================================================

class joints::_Internal {
 public:
};

joints::joints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:generated.joints)
}
joints::joints(const joints& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  joints* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.theta_1_){}
    , decltype(_impl_.theta_2_){}
    , decltype(_impl_.theta_3_){}
    , decltype(_impl_.theta_4_){}
    , decltype(_impl_.theta_5_){}
    , decltype(_impl_.theta_6_){}
    , decltype(_impl_.theta_7_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.theta_1_, &from._impl_.theta_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.theta_7_) -
    reinterpret_cast<char*>(&_impl_.theta_1_)) + sizeof(_impl_.theta_7_));
  // @@protoc_insertion_point(copy_constructor:generated.joints)
}

inline void joints::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.theta_1_){0}
    , decltype(_impl_.theta_2_){0}
    , decltype(_impl_.theta_3_){0}
    , decltype(_impl_.theta_4_){0}
    , decltype(_impl_.theta_5_){0}
    , decltype(_impl_.theta_6_){0}
    , decltype(_impl_.theta_7_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

joints::~joints() {
  // @@protoc_insertion_point(destructor:generated.joints)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void joints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void joints::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void joints::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.joints)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.theta_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.theta_7_) -
      reinterpret_cast<char*>(&_impl_.theta_1_)) + sizeof(_impl_.theta_7_));
  _internal_metadata_.Clear<std::string>();
}

const char* joints::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float theta_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.theta_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float theta_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.theta_2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float theta_3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.theta_3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float theta_4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.theta_4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float theta_5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.theta_5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float theta_6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.theta_6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float theta_7 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.theta_7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* joints::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.joints)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float theta_1 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_1 = this->_internal_theta_1();
  uint32_t raw_theta_1;
  memcpy(&raw_theta_1, &tmp_theta_1, sizeof(tmp_theta_1));
  if (raw_theta_1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_theta_1(), target);
  }

  // float theta_2 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_2 = this->_internal_theta_2();
  uint32_t raw_theta_2;
  memcpy(&raw_theta_2, &tmp_theta_2, sizeof(tmp_theta_2));
  if (raw_theta_2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_theta_2(), target);
  }

  // float theta_3 = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_3 = this->_internal_theta_3();
  uint32_t raw_theta_3;
  memcpy(&raw_theta_3, &tmp_theta_3, sizeof(tmp_theta_3));
  if (raw_theta_3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_theta_3(), target);
  }

  // float theta_4 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_4 = this->_internal_theta_4();
  uint32_t raw_theta_4;
  memcpy(&raw_theta_4, &tmp_theta_4, sizeof(tmp_theta_4));
  if (raw_theta_4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_theta_4(), target);
  }

  // float theta_5 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_5 = this->_internal_theta_5();
  uint32_t raw_theta_5;
  memcpy(&raw_theta_5, &tmp_theta_5, sizeof(tmp_theta_5));
  if (raw_theta_5 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_theta_5(), target);
  }

  // float theta_6 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_6 = this->_internal_theta_6();
  uint32_t raw_theta_6;
  memcpy(&raw_theta_6, &tmp_theta_6, sizeof(tmp_theta_6));
  if (raw_theta_6 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_theta_6(), target);
  }

  // float theta_7 = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_7 = this->_internal_theta_7();
  uint32_t raw_theta_7;
  memcpy(&raw_theta_7, &tmp_theta_7, sizeof(tmp_theta_7));
  if (raw_theta_7 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_theta_7(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.joints)
  return target;
}

size_t joints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.joints)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float theta_1 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_1 = this->_internal_theta_1();
  uint32_t raw_theta_1;
  memcpy(&raw_theta_1, &tmp_theta_1, sizeof(tmp_theta_1));
  if (raw_theta_1 != 0) {
    total_size += 1 + 4;
  }

  // float theta_2 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_2 = this->_internal_theta_2();
  uint32_t raw_theta_2;
  memcpy(&raw_theta_2, &tmp_theta_2, sizeof(tmp_theta_2));
  if (raw_theta_2 != 0) {
    total_size += 1 + 4;
  }

  // float theta_3 = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_3 = this->_internal_theta_3();
  uint32_t raw_theta_3;
  memcpy(&raw_theta_3, &tmp_theta_3, sizeof(tmp_theta_3));
  if (raw_theta_3 != 0) {
    total_size += 1 + 4;
  }

  // float theta_4 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_4 = this->_internal_theta_4();
  uint32_t raw_theta_4;
  memcpy(&raw_theta_4, &tmp_theta_4, sizeof(tmp_theta_4));
  if (raw_theta_4 != 0) {
    total_size += 1 + 4;
  }

  // float theta_5 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_5 = this->_internal_theta_5();
  uint32_t raw_theta_5;
  memcpy(&raw_theta_5, &tmp_theta_5, sizeof(tmp_theta_5));
  if (raw_theta_5 != 0) {
    total_size += 1 + 4;
  }

  // float theta_6 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_6 = this->_internal_theta_6();
  uint32_t raw_theta_6;
  memcpy(&raw_theta_6, &tmp_theta_6, sizeof(tmp_theta_6));
  if (raw_theta_6 != 0) {
    total_size += 1 + 4;
  }

  // float theta_7 = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_7 = this->_internal_theta_7();
  uint32_t raw_theta_7;
  memcpy(&raw_theta_7, &tmp_theta_7, sizeof(tmp_theta_7));
  if (raw_theta_7 != 0) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void joints::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const joints*>(
      &from));
}

void joints::MergeFrom(const joints& from) {
  joints* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.joints)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_1 = from._internal_theta_1();
  uint32_t raw_theta_1;
  memcpy(&raw_theta_1, &tmp_theta_1, sizeof(tmp_theta_1));
  if (raw_theta_1 != 0) {
    _this->_internal_set_theta_1(from._internal_theta_1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_2 = from._internal_theta_2();
  uint32_t raw_theta_2;
  memcpy(&raw_theta_2, &tmp_theta_2, sizeof(tmp_theta_2));
  if (raw_theta_2 != 0) {
    _this->_internal_set_theta_2(from._internal_theta_2());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_3 = from._internal_theta_3();
  uint32_t raw_theta_3;
  memcpy(&raw_theta_3, &tmp_theta_3, sizeof(tmp_theta_3));
  if (raw_theta_3 != 0) {
    _this->_internal_set_theta_3(from._internal_theta_3());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_4 = from._internal_theta_4();
  uint32_t raw_theta_4;
  memcpy(&raw_theta_4, &tmp_theta_4, sizeof(tmp_theta_4));
  if (raw_theta_4 != 0) {
    _this->_internal_set_theta_4(from._internal_theta_4());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_5 = from._internal_theta_5();
  uint32_t raw_theta_5;
  memcpy(&raw_theta_5, &tmp_theta_5, sizeof(tmp_theta_5));
  if (raw_theta_5 != 0) {
    _this->_internal_set_theta_5(from._internal_theta_5());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_6 = from._internal_theta_6();
  uint32_t raw_theta_6;
  memcpy(&raw_theta_6, &tmp_theta_6, sizeof(tmp_theta_6));
  if (raw_theta_6 != 0) {
    _this->_internal_set_theta_6(from._internal_theta_6());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_7 = from._internal_theta_7();
  uint32_t raw_theta_7;
  memcpy(&raw_theta_7, &tmp_theta_7, sizeof(tmp_theta_7));
  if (raw_theta_7 != 0) {
    _this->_internal_set_theta_7(from._internal_theta_7());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void joints::CopyFrom(const joints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.joints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool joints::IsInitialized() const {
  return true;
}

void joints::InternalSwap(joints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(joints, _impl_.theta_7_)
      + sizeof(joints::_impl_.theta_7_)
      - PROTOBUF_FIELD_OFFSET(joints, _impl_.theta_1_)>(
          reinterpret_cast<char*>(&_impl_.theta_1_),
          reinterpret_cast<char*>(&other->_impl_.theta_1_));
}

std::string joints::GetTypeName() const {
  return "generated.joints";
}


// ===================================================================

class voxels::_Internal {
 public:
  static const ::generated::matrix& robot_origin(const voxels* msg);
};

const ::generated::matrix&
voxels::_Internal::robot_origin(const voxels* msg) {
  return *msg->_impl_.robot_origin_;
}
void voxels::clear_robot_origin() {
  if (GetArenaForAllocation() == nullptr && _impl_.robot_origin_ != nullptr) {
    delete _impl_.robot_origin_;
  }
  _impl_.robot_origin_ = nullptr;
}
void voxels::clear_voxel_coords() {
  _impl_.voxel_coords_.Clear();
}
voxels::voxels(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:generated.voxels)
}
voxels::voxels(const voxels& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  voxels* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.voxel_coords_){from._impl_.voxel_coords_}
    , decltype(_impl_.robot_origin_){nullptr}
    , decltype(_impl_.voxel_side_length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_robot_origin()) {
    _this->_impl_.robot_origin_ = new ::generated::matrix(*from._impl_.robot_origin_);
  }
  _this->_impl_.voxel_side_length_ = from._impl_.voxel_side_length_;
  // @@protoc_insertion_point(copy_constructor:generated.voxels)
}

inline void voxels::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.voxel_coords_){arena}
    , decltype(_impl_.robot_origin_){nullptr}
    , decltype(_impl_.voxel_side_length_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

voxels::~voxels() {
  // @@protoc_insertion_point(destructor:generated.voxels)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void voxels::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.voxel_coords_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.robot_origin_;
}

void voxels::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void voxels::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.voxels)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.voxel_coords_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.robot_origin_ != nullptr) {
    delete _impl_.robot_origin_;
  }
  _impl_.robot_origin_ = nullptr;
  _impl_.voxel_side_length_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* voxels::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .generated.matrix robot_origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_robot_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float voxel_side_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.voxel_side_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .generated.vertex_3d_ui voxel_coords = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_voxel_coords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* voxels::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.voxels)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .generated.matrix robot_origin = 1;
  if (this->_internal_has_robot_origin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::robot_origin(this),
        _Internal::robot_origin(this).GetCachedSize(), target, stream);
  }

  // float voxel_side_length = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_voxel_side_length = this->_internal_voxel_side_length();
  uint32_t raw_voxel_side_length;
  memcpy(&raw_voxel_side_length, &tmp_voxel_side_length, sizeof(tmp_voxel_side_length));
  if (raw_voxel_side_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_voxel_side_length(), target);
  }

  // repeated .generated.vertex_3d_ui voxel_coords = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_voxel_coords_size()); i < n; i++) {
    const auto& repfield = this->_internal_voxel_coords(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.voxels)
  return target;
}

size_t voxels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.voxels)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .generated.vertex_3d_ui voxel_coords = 3;
  total_size += 1UL * this->_internal_voxel_coords_size();
  for (const auto& msg : this->_impl_.voxel_coords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .generated.matrix robot_origin = 1;
  if (this->_internal_has_robot_origin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.robot_origin_);
  }

  // float voxel_side_length = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_voxel_side_length = this->_internal_voxel_side_length();
  uint32_t raw_voxel_side_length;
  memcpy(&raw_voxel_side_length, &tmp_voxel_side_length, sizeof(tmp_voxel_side_length));
  if (raw_voxel_side_length != 0) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void voxels::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const voxels*>(
      &from));
}

void voxels::MergeFrom(const voxels& from) {
  voxels* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.voxels)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.voxel_coords_.MergeFrom(from._impl_.voxel_coords_);
  if (from._internal_has_robot_origin()) {
    _this->_internal_mutable_robot_origin()->::generated::matrix::MergeFrom(
        from._internal_robot_origin());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_voxel_side_length = from._internal_voxel_side_length();
  uint32_t raw_voxel_side_length;
  memcpy(&raw_voxel_side_length, &tmp_voxel_side_length, sizeof(tmp_voxel_side_length));
  if (raw_voxel_side_length != 0) {
    _this->_internal_set_voxel_side_length(from._internal_voxel_side_length());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void voxels::CopyFrom(const voxels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.voxels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool voxels::IsInitialized() const {
  return true;
}

void voxels::InternalSwap(voxels* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.voxel_coords_.InternalSwap(&other->_impl_.voxel_coords_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(voxels, _impl_.voxel_side_length_)
      + sizeof(voxels::_impl_.voxel_side_length_)
      - PROTOBUF_FIELD_OFFSET(voxels, _impl_.robot_origin_)>(
          reinterpret_cast<char*>(&_impl_.robot_origin_),
          reinterpret_cast<char*>(&other->_impl_.robot_origin_));
}

std::string voxels::GetTypeName() const {
  return "generated.voxels";
}


// ===================================================================

class tcps::_Internal {
 public:
};

void tcps::clear_points() {
  _impl_.points_.Clear();
}
tcps::tcps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:generated.tcps)
}
tcps::tcps(const tcps& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  tcps* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){from._impl_.points_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:generated.tcps)
}

inline void tcps::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

tcps::~tcps() {
  // @@protoc_insertion_point(destructor:generated.tcps)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void tcps::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedPtrField();
}

void tcps::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void tcps::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.tcps)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* tcps::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .generated.vertex_3d points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* tcps::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.tcps)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .generated.vertex_3d points = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.tcps)
  return target;
}

size_t tcps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.tcps)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .generated.vertex_3d points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_impl_.points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tcps::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const tcps*>(
      &from));
}

void tcps::MergeFrom(const tcps& from) {
  tcps* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.tcps)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void tcps::CopyFrom(const tcps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.tcps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tcps::IsInitialized() const {
  return true;
}

void tcps::InternalSwap(tcps* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
}

std::string tcps::GetTypeName() const {
  return "generated.tcps";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace generated
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::generated::joints*
Arena::CreateMaybeMessage< ::generated::joints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::joints >(arena);
}
template<> PROTOBUF_NOINLINE ::generated::voxels*
Arena::CreateMaybeMessage< ::generated::voxels >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::voxels >(arena);
}
template<> PROTOBUF_NOINLINE ::generated::tcps*
Arena::CreateMaybeMessage< ::generated::tcps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::tcps >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>