// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot.proto

#include "robot.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace generated {
PROTOBUF_CONSTEXPR Joints::Joints(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.theta_1_)*/0
  , /*decltype(_impl_.theta_2_)*/0
  , /*decltype(_impl_.theta_3_)*/0
  , /*decltype(_impl_.theta_4_)*/0
  , /*decltype(_impl_.theta_5_)*/0
  , /*decltype(_impl_.theta_6_)*/0
  , /*decltype(_impl_.theta_7_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JointsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JointsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JointsDefaultTypeInternal() {}
  union {
    Joints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JointsDefaultTypeInternal _Joints_default_instance_;
PROTOBUF_CONSTEXPR Voxels::Voxels(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.voxel_indices_)*/{}
  , /*decltype(_impl_.robot_origin_)*/nullptr
  , /*decltype(_impl_.voxel_side_length_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VoxelsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoxelsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoxelsDefaultTypeInternal() {}
  union {
    Voxels _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoxelsDefaultTypeInternal _Voxels_default_instance_;
PROTOBUF_CONSTEXPR Tcps::Tcps(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TcpsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TcpsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TcpsDefaultTypeInternal() {}
  union {
    Tcps _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TcpsDefaultTypeInternal _Tcps_default_instance_;
PROTOBUF_CONSTEXPR Voxel_TF_Meta::Voxel_TF_Meta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.voxels_)*/nullptr
  , /*decltype(_impl_.transformation_meta_)*/nullptr} {}
struct Voxel_TF_MetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Voxel_TF_MetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Voxel_TF_MetaDefaultTypeInternal() {}
  union {
    Voxel_TF_Meta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Voxel_TF_MetaDefaultTypeInternal _Voxel_TF_Meta_default_instance_;
PROTOBUF_CONSTEXPR Tcps_TF_Meta::Tcps_TF_Meta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tcps_)*/nullptr
  , /*decltype(_impl_.transformation_meta_)*/nullptr} {}
struct Tcps_TF_MetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Tcps_TF_MetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Tcps_TF_MetaDefaultTypeInternal() {}
  union {
    Tcps_TF_Meta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Tcps_TF_MetaDefaultTypeInternal _Tcps_TF_Meta_default_instance_;
}  // namespace generated
namespace generated {

// ===================================================================

class Joints::_Internal {
 public:
};

Joints::Joints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:generated.Joints)
}
Joints::Joints(const Joints& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Joints* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.theta_1_){}
    , decltype(_impl_.theta_2_){}
    , decltype(_impl_.theta_3_){}
    , decltype(_impl_.theta_4_){}
    , decltype(_impl_.theta_5_){}
    , decltype(_impl_.theta_6_){}
    , decltype(_impl_.theta_7_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.theta_1_, &from._impl_.theta_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.theta_7_) -
    reinterpret_cast<char*>(&_impl_.theta_1_)) + sizeof(_impl_.theta_7_));
  // @@protoc_insertion_point(copy_constructor:generated.Joints)
}

inline void Joints::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.theta_1_){0}
    , decltype(_impl_.theta_2_){0}
    , decltype(_impl_.theta_3_){0}
    , decltype(_impl_.theta_4_){0}
    , decltype(_impl_.theta_5_){0}
    , decltype(_impl_.theta_6_){0}
    , decltype(_impl_.theta_7_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Joints::~Joints() {
  // @@protoc_insertion_point(destructor:generated.Joints)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Joints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Joints::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Joints::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.Joints)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.theta_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.theta_7_) -
      reinterpret_cast<char*>(&_impl_.theta_1_)) + sizeof(_impl_.theta_7_));
  _internal_metadata_.Clear<std::string>();
}

const char* Joints::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float theta_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.theta_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float theta_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.theta_2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float theta_3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.theta_3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float theta_4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.theta_4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float theta_5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.theta_5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float theta_6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.theta_6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float theta_7 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.theta_7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Joints::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.Joints)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float theta_1 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_1 = this->_internal_theta_1();
  uint32_t raw_theta_1;
  memcpy(&raw_theta_1, &tmp_theta_1, sizeof(tmp_theta_1));
  if (raw_theta_1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_theta_1(), target);
  }

  // float theta_2 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_2 = this->_internal_theta_2();
  uint32_t raw_theta_2;
  memcpy(&raw_theta_2, &tmp_theta_2, sizeof(tmp_theta_2));
  if (raw_theta_2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_theta_2(), target);
  }

  // float theta_3 = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_3 = this->_internal_theta_3();
  uint32_t raw_theta_3;
  memcpy(&raw_theta_3, &tmp_theta_3, sizeof(tmp_theta_3));
  if (raw_theta_3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_theta_3(), target);
  }

  // float theta_4 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_4 = this->_internal_theta_4();
  uint32_t raw_theta_4;
  memcpy(&raw_theta_4, &tmp_theta_4, sizeof(tmp_theta_4));
  if (raw_theta_4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_theta_4(), target);
  }

  // float theta_5 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_5 = this->_internal_theta_5();
  uint32_t raw_theta_5;
  memcpy(&raw_theta_5, &tmp_theta_5, sizeof(tmp_theta_5));
  if (raw_theta_5 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_theta_5(), target);
  }

  // float theta_6 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_6 = this->_internal_theta_6();
  uint32_t raw_theta_6;
  memcpy(&raw_theta_6, &tmp_theta_6, sizeof(tmp_theta_6));
  if (raw_theta_6 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_theta_6(), target);
  }

  // float theta_7 = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_7 = this->_internal_theta_7();
  uint32_t raw_theta_7;
  memcpy(&raw_theta_7, &tmp_theta_7, sizeof(tmp_theta_7));
  if (raw_theta_7 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_theta_7(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.Joints)
  return target;
}

size_t Joints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.Joints)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float theta_1 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_1 = this->_internal_theta_1();
  uint32_t raw_theta_1;
  memcpy(&raw_theta_1, &tmp_theta_1, sizeof(tmp_theta_1));
  if (raw_theta_1 != 0) {
    total_size += 1 + 4;
  }

  // float theta_2 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_2 = this->_internal_theta_2();
  uint32_t raw_theta_2;
  memcpy(&raw_theta_2, &tmp_theta_2, sizeof(tmp_theta_2));
  if (raw_theta_2 != 0) {
    total_size += 1 + 4;
  }

  // float theta_3 = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_3 = this->_internal_theta_3();
  uint32_t raw_theta_3;
  memcpy(&raw_theta_3, &tmp_theta_3, sizeof(tmp_theta_3));
  if (raw_theta_3 != 0) {
    total_size += 1 + 4;
  }

  // float theta_4 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_4 = this->_internal_theta_4();
  uint32_t raw_theta_4;
  memcpy(&raw_theta_4, &tmp_theta_4, sizeof(tmp_theta_4));
  if (raw_theta_4 != 0) {
    total_size += 1 + 4;
  }

  // float theta_5 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_5 = this->_internal_theta_5();
  uint32_t raw_theta_5;
  memcpy(&raw_theta_5, &tmp_theta_5, sizeof(tmp_theta_5));
  if (raw_theta_5 != 0) {
    total_size += 1 + 4;
  }

  // float theta_6 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_6 = this->_internal_theta_6();
  uint32_t raw_theta_6;
  memcpy(&raw_theta_6, &tmp_theta_6, sizeof(tmp_theta_6));
  if (raw_theta_6 != 0) {
    total_size += 1 + 4;
  }

  // float theta_7 = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_7 = this->_internal_theta_7();
  uint32_t raw_theta_7;
  memcpy(&raw_theta_7, &tmp_theta_7, sizeof(tmp_theta_7));
  if (raw_theta_7 != 0) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Joints::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Joints*>(
      &from));
}

void Joints::MergeFrom(const Joints& from) {
  Joints* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.Joints)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_1 = from._internal_theta_1();
  uint32_t raw_theta_1;
  memcpy(&raw_theta_1, &tmp_theta_1, sizeof(tmp_theta_1));
  if (raw_theta_1 != 0) {
    _this->_internal_set_theta_1(from._internal_theta_1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_2 = from._internal_theta_2();
  uint32_t raw_theta_2;
  memcpy(&raw_theta_2, &tmp_theta_2, sizeof(tmp_theta_2));
  if (raw_theta_2 != 0) {
    _this->_internal_set_theta_2(from._internal_theta_2());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_3 = from._internal_theta_3();
  uint32_t raw_theta_3;
  memcpy(&raw_theta_3, &tmp_theta_3, sizeof(tmp_theta_3));
  if (raw_theta_3 != 0) {
    _this->_internal_set_theta_3(from._internal_theta_3());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_4 = from._internal_theta_4();
  uint32_t raw_theta_4;
  memcpy(&raw_theta_4, &tmp_theta_4, sizeof(tmp_theta_4));
  if (raw_theta_4 != 0) {
    _this->_internal_set_theta_4(from._internal_theta_4());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_5 = from._internal_theta_5();
  uint32_t raw_theta_5;
  memcpy(&raw_theta_5, &tmp_theta_5, sizeof(tmp_theta_5));
  if (raw_theta_5 != 0) {
    _this->_internal_set_theta_5(from._internal_theta_5());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_6 = from._internal_theta_6();
  uint32_t raw_theta_6;
  memcpy(&raw_theta_6, &tmp_theta_6, sizeof(tmp_theta_6));
  if (raw_theta_6 != 0) {
    _this->_internal_set_theta_6(from._internal_theta_6());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta_7 = from._internal_theta_7();
  uint32_t raw_theta_7;
  memcpy(&raw_theta_7, &tmp_theta_7, sizeof(tmp_theta_7));
  if (raw_theta_7 != 0) {
    _this->_internal_set_theta_7(from._internal_theta_7());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Joints::CopyFrom(const Joints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.Joints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Joints::IsInitialized() const {
  return true;
}

void Joints::InternalSwap(Joints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Joints, _impl_.theta_7_)
      + sizeof(Joints::_impl_.theta_7_)
      - PROTOBUF_FIELD_OFFSET(Joints, _impl_.theta_1_)>(
          reinterpret_cast<char*>(&_impl_.theta_1_),
          reinterpret_cast<char*>(&other->_impl_.theta_1_));
}

std::string Joints::GetTypeName() const {
  return "generated.Joints";
}


// ===================================================================

class Voxels::_Internal {
 public:
  static const ::generated::Matrix& robot_origin(const Voxels* msg);
};

const ::generated::Matrix&
Voxels::_Internal::robot_origin(const Voxels* msg) {
  return *msg->_impl_.robot_origin_;
}
void Voxels::clear_robot_origin() {
  if (GetArenaForAllocation() == nullptr && _impl_.robot_origin_ != nullptr) {
    delete _impl_.robot_origin_;
  }
  _impl_.robot_origin_ = nullptr;
}
void Voxels::clear_voxel_indices() {
  _impl_.voxel_indices_.Clear();
}
Voxels::Voxels(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:generated.Voxels)
}
Voxels::Voxels(const Voxels& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Voxels* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.voxel_indices_){from._impl_.voxel_indices_}
    , decltype(_impl_.robot_origin_){nullptr}
    , decltype(_impl_.voxel_side_length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_robot_origin()) {
    _this->_impl_.robot_origin_ = new ::generated::Matrix(*from._impl_.robot_origin_);
  }
  _this->_impl_.voxel_side_length_ = from._impl_.voxel_side_length_;
  // @@protoc_insertion_point(copy_constructor:generated.Voxels)
}

inline void Voxels::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.voxel_indices_){arena}
    , decltype(_impl_.robot_origin_){nullptr}
    , decltype(_impl_.voxel_side_length_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Voxels::~Voxels() {
  // @@protoc_insertion_point(destructor:generated.Voxels)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Voxels::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.voxel_indices_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.robot_origin_;
}

void Voxels::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Voxels::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.Voxels)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.voxel_indices_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.robot_origin_ != nullptr) {
    delete _impl_.robot_origin_;
  }
  _impl_.robot_origin_ = nullptr;
  _impl_.voxel_side_length_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* Voxels::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .generated.Matrix robot_origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_robot_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float voxel_side_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.voxel_side_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .generated.index_3d voxel_indices = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_voxel_indices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Voxels::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.Voxels)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .generated.Matrix robot_origin = 1;
  if (this->_internal_has_robot_origin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::robot_origin(this),
        _Internal::robot_origin(this).GetCachedSize(), target, stream);
  }

  // float voxel_side_length = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_voxel_side_length = this->_internal_voxel_side_length();
  uint32_t raw_voxel_side_length;
  memcpy(&raw_voxel_side_length, &tmp_voxel_side_length, sizeof(tmp_voxel_side_length));
  if (raw_voxel_side_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_voxel_side_length(), target);
  }

  // repeated .generated.index_3d voxel_indices = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_voxel_indices_size()); i < n; i++) {
    const auto& repfield = this->_internal_voxel_indices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.Voxels)
  return target;
}

size_t Voxels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.Voxels)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .generated.index_3d voxel_indices = 3;
  total_size += 1UL * this->_internal_voxel_indices_size();
  for (const auto& msg : this->_impl_.voxel_indices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .generated.Matrix robot_origin = 1;
  if (this->_internal_has_robot_origin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.robot_origin_);
  }

  // float voxel_side_length = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_voxel_side_length = this->_internal_voxel_side_length();
  uint32_t raw_voxel_side_length;
  memcpy(&raw_voxel_side_length, &tmp_voxel_side_length, sizeof(tmp_voxel_side_length));
  if (raw_voxel_side_length != 0) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Voxels::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Voxels*>(
      &from));
}

void Voxels::MergeFrom(const Voxels& from) {
  Voxels* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.Voxels)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.voxel_indices_.MergeFrom(from._impl_.voxel_indices_);
  if (from._internal_has_robot_origin()) {
    _this->_internal_mutable_robot_origin()->::generated::Matrix::MergeFrom(
        from._internal_robot_origin());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_voxel_side_length = from._internal_voxel_side_length();
  uint32_t raw_voxel_side_length;
  memcpy(&raw_voxel_side_length, &tmp_voxel_side_length, sizeof(tmp_voxel_side_length));
  if (raw_voxel_side_length != 0) {
    _this->_internal_set_voxel_side_length(from._internal_voxel_side_length());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Voxels::CopyFrom(const Voxels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.Voxels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Voxels::IsInitialized() const {
  return true;
}

void Voxels::InternalSwap(Voxels* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.voxel_indices_.InternalSwap(&other->_impl_.voxel_indices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Voxels, _impl_.voxel_side_length_)
      + sizeof(Voxels::_impl_.voxel_side_length_)
      - PROTOBUF_FIELD_OFFSET(Voxels, _impl_.robot_origin_)>(
          reinterpret_cast<char*>(&_impl_.robot_origin_),
          reinterpret_cast<char*>(&other->_impl_.robot_origin_));
}

std::string Voxels::GetTypeName() const {
  return "generated.Voxels";
}


// ===================================================================

class Tcps::_Internal {
 public:
};

void Tcps::clear_points() {
  _impl_.points_.Clear();
}
Tcps::Tcps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:generated.Tcps)
}
Tcps::Tcps(const Tcps& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Tcps* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){from._impl_.points_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:generated.Tcps)
}

inline void Tcps::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Tcps::~Tcps() {
  // @@protoc_insertion_point(destructor:generated.Tcps)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tcps::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedPtrField();
}

void Tcps::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tcps::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.Tcps)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Tcps::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .generated.vertex_3d points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tcps::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.Tcps)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .generated.vertex_3d points = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.Tcps)
  return target;
}

size_t Tcps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.Tcps)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .generated.vertex_3d points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_impl_.points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tcps::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Tcps*>(
      &from));
}

void Tcps::MergeFrom(const Tcps& from) {
  Tcps* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.Tcps)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Tcps::CopyFrom(const Tcps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.Tcps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tcps::IsInitialized() const {
  return true;
}

void Tcps::InternalSwap(Tcps* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
}

std::string Tcps::GetTypeName() const {
  return "generated.Tcps";
}


// ===================================================================

class Voxel_TF_Meta::_Internal {
 public:
  using HasBits = decltype(std::declval<Voxel_TF_Meta>()._impl_._has_bits_);
  static const ::generated::Voxels& voxels(const Voxel_TF_Meta* msg);
  static const ::generated::Transformation_Meta& transformation_meta(const Voxel_TF_Meta* msg);
  static void set_has_transformation_meta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::generated::Voxels&
Voxel_TF_Meta::_Internal::voxels(const Voxel_TF_Meta* msg) {
  return *msg->_impl_.voxels_;
}
const ::generated::Transformation_Meta&
Voxel_TF_Meta::_Internal::transformation_meta(const Voxel_TF_Meta* msg) {
  return *msg->_impl_.transformation_meta_;
}
void Voxel_TF_Meta::clear_transformation_meta() {
  if (_impl_.transformation_meta_ != nullptr) _impl_.transformation_meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Voxel_TF_Meta::Voxel_TF_Meta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:generated.Voxel_TF_Meta)
}
Voxel_TF_Meta::Voxel_TF_Meta(const Voxel_TF_Meta& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Voxel_TF_Meta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.voxels_){nullptr}
    , decltype(_impl_.transformation_meta_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_voxels()) {
    _this->_impl_.voxels_ = new ::generated::Voxels(*from._impl_.voxels_);
  }
  if (from._internal_has_transformation_meta()) {
    _this->_impl_.transformation_meta_ = new ::generated::Transformation_Meta(*from._impl_.transformation_meta_);
  }
  // @@protoc_insertion_point(copy_constructor:generated.Voxel_TF_Meta)
}

inline void Voxel_TF_Meta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.voxels_){nullptr}
    , decltype(_impl_.transformation_meta_){nullptr}
  };
}

Voxel_TF_Meta::~Voxel_TF_Meta() {
  // @@protoc_insertion_point(destructor:generated.Voxel_TF_Meta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Voxel_TF_Meta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.voxels_;
  if (this != internal_default_instance()) delete _impl_.transformation_meta_;
}

void Voxel_TF_Meta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Voxel_TF_Meta::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.Voxel_TF_Meta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.voxels_ != nullptr) {
    delete _impl_.voxels_;
  }
  _impl_.voxels_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.transformation_meta_ != nullptr);
    _impl_.transformation_meta_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Voxel_TF_Meta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .generated.Voxels voxels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_voxels(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .generated.Transformation_Meta transformation_meta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transformation_meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Voxel_TF_Meta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.Voxel_TF_Meta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .generated.Voxels voxels = 1;
  if (this->_internal_has_voxels()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::voxels(this),
        _Internal::voxels(this).GetCachedSize(), target, stream);
  }

  // optional .generated.Transformation_Meta transformation_meta = 2;
  if (_internal_has_transformation_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::transformation_meta(this),
        _Internal::transformation_meta(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.Voxel_TF_Meta)
  return target;
}

size_t Voxel_TF_Meta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.Voxel_TF_Meta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .generated.Voxels voxels = 1;
  if (this->_internal_has_voxels()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.voxels_);
  }

  // optional .generated.Transformation_Meta transformation_meta = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transformation_meta_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Voxel_TF_Meta::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Voxel_TF_Meta*>(
      &from));
}

void Voxel_TF_Meta::MergeFrom(const Voxel_TF_Meta& from) {
  Voxel_TF_Meta* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.Voxel_TF_Meta)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_voxels()) {
    _this->_internal_mutable_voxels()->::generated::Voxels::MergeFrom(
        from._internal_voxels());
  }
  if (from._internal_has_transformation_meta()) {
    _this->_internal_mutable_transformation_meta()->::generated::Transformation_Meta::MergeFrom(
        from._internal_transformation_meta());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Voxel_TF_Meta::CopyFrom(const Voxel_TF_Meta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.Voxel_TF_Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Voxel_TF_Meta::IsInitialized() const {
  return true;
}

void Voxel_TF_Meta::InternalSwap(Voxel_TF_Meta* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Voxel_TF_Meta, _impl_.transformation_meta_)
      + sizeof(Voxel_TF_Meta::_impl_.transformation_meta_)
      - PROTOBUF_FIELD_OFFSET(Voxel_TF_Meta, _impl_.voxels_)>(
          reinterpret_cast<char*>(&_impl_.voxels_),
          reinterpret_cast<char*>(&other->_impl_.voxels_));
}

std::string Voxel_TF_Meta::GetTypeName() const {
  return "generated.Voxel_TF_Meta";
}


// ===================================================================

class Tcps_TF_Meta::_Internal {
 public:
  using HasBits = decltype(std::declval<Tcps_TF_Meta>()._impl_._has_bits_);
  static const ::generated::Tcps& tcps(const Tcps_TF_Meta* msg);
  static const ::generated::Transformation_Meta& transformation_meta(const Tcps_TF_Meta* msg);
  static void set_has_transformation_meta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::generated::Tcps&
Tcps_TF_Meta::_Internal::tcps(const Tcps_TF_Meta* msg) {
  return *msg->_impl_.tcps_;
}
const ::generated::Transformation_Meta&
Tcps_TF_Meta::_Internal::transformation_meta(const Tcps_TF_Meta* msg) {
  return *msg->_impl_.transformation_meta_;
}
void Tcps_TF_Meta::clear_transformation_meta() {
  if (_impl_.transformation_meta_ != nullptr) _impl_.transformation_meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Tcps_TF_Meta::Tcps_TF_Meta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:generated.Tcps_TF_Meta)
}
Tcps_TF_Meta::Tcps_TF_Meta(const Tcps_TF_Meta& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Tcps_TF_Meta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tcps_){nullptr}
    , decltype(_impl_.transformation_meta_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_tcps()) {
    _this->_impl_.tcps_ = new ::generated::Tcps(*from._impl_.tcps_);
  }
  if (from._internal_has_transformation_meta()) {
    _this->_impl_.transformation_meta_ = new ::generated::Transformation_Meta(*from._impl_.transformation_meta_);
  }
  // @@protoc_insertion_point(copy_constructor:generated.Tcps_TF_Meta)
}

inline void Tcps_TF_Meta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tcps_){nullptr}
    , decltype(_impl_.transformation_meta_){nullptr}
  };
}

Tcps_TF_Meta::~Tcps_TF_Meta() {
  // @@protoc_insertion_point(destructor:generated.Tcps_TF_Meta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tcps_TF_Meta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tcps_;
  if (this != internal_default_instance()) delete _impl_.transformation_meta_;
}

void Tcps_TF_Meta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tcps_TF_Meta::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.Tcps_TF_Meta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.tcps_ != nullptr) {
    delete _impl_.tcps_;
  }
  _impl_.tcps_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.transformation_meta_ != nullptr);
    _impl_.transformation_meta_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Tcps_TF_Meta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .generated.Tcps tcps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tcps(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .generated.Transformation_Meta transformation_meta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transformation_meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tcps_TF_Meta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.Tcps_TF_Meta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .generated.Tcps tcps = 1;
  if (this->_internal_has_tcps()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tcps(this),
        _Internal::tcps(this).GetCachedSize(), target, stream);
  }

  // optional .generated.Transformation_Meta transformation_meta = 2;
  if (_internal_has_transformation_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::transformation_meta(this),
        _Internal::transformation_meta(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.Tcps_TF_Meta)
  return target;
}

size_t Tcps_TF_Meta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.Tcps_TF_Meta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .generated.Tcps tcps = 1;
  if (this->_internal_has_tcps()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tcps_);
  }

  // optional .generated.Transformation_Meta transformation_meta = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transformation_meta_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tcps_TF_Meta::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Tcps_TF_Meta*>(
      &from));
}

void Tcps_TF_Meta::MergeFrom(const Tcps_TF_Meta& from) {
  Tcps_TF_Meta* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.Tcps_TF_Meta)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tcps()) {
    _this->_internal_mutable_tcps()->::generated::Tcps::MergeFrom(
        from._internal_tcps());
  }
  if (from._internal_has_transformation_meta()) {
    _this->_internal_mutable_transformation_meta()->::generated::Transformation_Meta::MergeFrom(
        from._internal_transformation_meta());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Tcps_TF_Meta::CopyFrom(const Tcps_TF_Meta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.Tcps_TF_Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tcps_TF_Meta::IsInitialized() const {
  return true;
}

void Tcps_TF_Meta::InternalSwap(Tcps_TF_Meta* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tcps_TF_Meta, _impl_.transformation_meta_)
      + sizeof(Tcps_TF_Meta::_impl_.transformation_meta_)
      - PROTOBUF_FIELD_OFFSET(Tcps_TF_Meta, _impl_.tcps_)>(
          reinterpret_cast<char*>(&_impl_.tcps_),
          reinterpret_cast<char*>(&other->_impl_.tcps_));
}

std::string Tcps_TF_Meta::GetTypeName() const {
  return "generated.Tcps_TF_Meta";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace generated
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::generated::Joints*
Arena::CreateMaybeMessage< ::generated::Joints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::Joints >(arena);
}
template<> PROTOBUF_NOINLINE ::generated::Voxels*
Arena::CreateMaybeMessage< ::generated::Voxels >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::Voxels >(arena);
}
template<> PROTOBUF_NOINLINE ::generated::Tcps*
Arena::CreateMaybeMessage< ::generated::Tcps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::Tcps >(arena);
}
template<> PROTOBUF_NOINLINE ::generated::Voxel_TF_Meta*
Arena::CreateMaybeMessage< ::generated::Voxel_TF_Meta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::Voxel_TF_Meta >(arena);
}
template<> PROTOBUF_NOINLINE ::generated::Tcps_TF_Meta*
Arena::CreateMaybeMessage< ::generated::Tcps_TF_Meta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::Tcps_TF_Meta >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
