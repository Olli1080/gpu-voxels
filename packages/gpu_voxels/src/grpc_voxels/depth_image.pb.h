// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: depth_image.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_depth_5fimage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_depth_5fimage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/empty.pb.h>
#include "vertex.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_depth_5fimage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_depth_5fimage_2eproto {
  static const uint32_t offsets[];
};
namespace generated {
class draco_data;
struct draco_dataDefaultTypeInternal;
extern draco_dataDefaultTypeInternal _draco_data_default_instance_;
class maybe_matrix;
struct maybe_matrixDefaultTypeInternal;
extern maybe_matrixDefaultTypeInternal _maybe_matrix_default_instance_;
class pcl_data;
struct pcl_dataDefaultTypeInternal;
extern pcl_dataDefaultTypeInternal _pcl_data_default_instance_;
}  // namespace generated
PROTOBUF_NAMESPACE_OPEN
template<> ::generated::draco_data* Arena::CreateMaybeMessage<::generated::draco_data>(Arena*);
template<> ::generated::maybe_matrix* Arena::CreateMaybeMessage<::generated::maybe_matrix>(Arena*);
template<> ::generated::pcl_data* Arena::CreateMaybeMessage<::generated::pcl_data>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace generated {

// ===================================================================

class pcl_data final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:generated.pcl_data) */ {
 public:
  inline pcl_data() : pcl_data(nullptr) {}
  ~pcl_data() override;
  explicit PROTOBUF_CONSTEXPR pcl_data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pcl_data(const pcl_data& from);
  pcl_data(pcl_data&& from) noexcept
    : pcl_data() {
    *this = ::std::move(from);
  }

  inline pcl_data& operator=(const pcl_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline pcl_data& operator=(pcl_data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const pcl_data& default_instance() {
    return *internal_default_instance();
  }
  static inline const pcl_data* internal_default_instance() {
    return reinterpret_cast<const pcl_data*>(
               &_pcl_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(pcl_data& a, pcl_data& b) {
    a.Swap(&b);
  }
  inline void Swap(pcl_data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pcl_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  pcl_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<pcl_data>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const pcl_data& from);
  void MergeFrom(const pcl_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(pcl_data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "generated.pcl_data";
  }
  protected:
  explicit pcl_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // repeated .generated.vertex_3d vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::generated::vertex_3d* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::generated::vertex_3d >*
      mutable_vertices();
  private:
  const ::generated::vertex_3d& _internal_vertices(int index) const;
  ::generated::vertex_3d* _internal_add_vertices();
  public:
  const ::generated::vertex_3d& vertices(int index) const;
  ::generated::vertex_3d* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::generated::vertex_3d >&
      vertices() const;

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:generated.pcl_data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::generated::vertex_3d > vertices_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_depth_5fimage_2eproto;
};
// -------------------------------------------------------------------

class draco_data final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:generated.draco_data) */ {
 public:
  inline draco_data() : draco_data(nullptr) {}
  ~draco_data() override;
  explicit PROTOBUF_CONSTEXPR draco_data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  draco_data(const draco_data& from);
  draco_data(draco_data&& from) noexcept
    : draco_data() {
    *this = ::std::move(from);
  }

  inline draco_data& operator=(const draco_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline draco_data& operator=(draco_data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const draco_data& default_instance() {
    return *internal_default_instance();
  }
  static inline const draco_data* internal_default_instance() {
    return reinterpret_cast<const draco_data*>(
               &_draco_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(draco_data& a, draco_data& b) {
    a.Swap(&b);
  }
  inline void Swap(draco_data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(draco_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  draco_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<draco_data>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const draco_data& from);
  void MergeFrom(const draco_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(draco_data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "generated.draco_data";
  }
  protected:
  explicit draco_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:generated.draco_data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_depth_5fimage_2eproto;
};
// -------------------------------------------------------------------

class maybe_matrix final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:generated.maybe_matrix) */ {
 public:
  inline maybe_matrix() : maybe_matrix(nullptr) {}
  ~maybe_matrix() override;
  explicit PROTOBUF_CONSTEXPR maybe_matrix(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  maybe_matrix(const maybe_matrix& from);
  maybe_matrix(maybe_matrix&& from) noexcept
    : maybe_matrix() {
    *this = ::std::move(from);
  }

  inline maybe_matrix& operator=(const maybe_matrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline maybe_matrix& operator=(maybe_matrix&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const maybe_matrix& default_instance() {
    return *internal_default_instance();
  }
  static inline const maybe_matrix* internal_default_instance() {
    return reinterpret_cast<const maybe_matrix*>(
               &_maybe_matrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(maybe_matrix& a, maybe_matrix& b) {
    a.Swap(&b);
  }
  inline void Swap(maybe_matrix* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(maybe_matrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  maybe_matrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<maybe_matrix>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const maybe_matrix& from);
  void MergeFrom(const maybe_matrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(maybe_matrix* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "generated.maybe_matrix";
  }
  protected:
  explicit maybe_matrix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // optional .generated.matrix data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::generated::matrix& data() const;
  PROTOBUF_NODISCARD ::generated::matrix* release_data();
  ::generated::matrix* mutable_data();
  void set_allocated_data(::generated::matrix* data);
  private:
  const ::generated::matrix& _internal_data() const;
  ::generated::matrix* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::generated::matrix* data);
  ::generated::matrix* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:generated.maybe_matrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::generated::matrix* data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_depth_5fimage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// pcl_data

// repeated .generated.vertex_3d vertices = 1;
inline int pcl_data::_internal_vertices_size() const {
  return _impl_.vertices_.size();
}
inline int pcl_data::vertices_size() const {
  return _internal_vertices_size();
}
inline ::generated::vertex_3d* pcl_data::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:generated.pcl_data.vertices)
  return _impl_.vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::generated::vertex_3d >*
pcl_data::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:generated.pcl_data.vertices)
  return &_impl_.vertices_;
}
inline const ::generated::vertex_3d& pcl_data::_internal_vertices(int index) const {
  return _impl_.vertices_.Get(index);
}
inline const ::generated::vertex_3d& pcl_data::vertices(int index) const {
  // @@protoc_insertion_point(field_get:generated.pcl_data.vertices)
  return _internal_vertices(index);
}
inline ::generated::vertex_3d* pcl_data::_internal_add_vertices() {
  return _impl_.vertices_.Add();
}
inline ::generated::vertex_3d* pcl_data::add_vertices() {
  ::generated::vertex_3d* _add = _internal_add_vertices();
  // @@protoc_insertion_point(field_add:generated.pcl_data.vertices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::generated::vertex_3d >&
pcl_data::vertices() const {
  // @@protoc_insertion_point(field_list:generated.pcl_data.vertices)
  return _impl_.vertices_;
}

// int64 timestamp = 2;
inline void pcl_data::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t pcl_data::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t pcl_data::timestamp() const {
  // @@protoc_insertion_point(field_get:generated.pcl_data.timestamp)
  return _internal_timestamp();
}
inline void pcl_data::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void pcl_data::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:generated.pcl_data.timestamp)
}

// -------------------------------------------------------------------

// draco_data

// bytes data = 1;
inline void draco_data::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& draco_data::data() const {
  // @@protoc_insertion_point(field_get:generated.draco_data.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draco_data::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:generated.draco_data.data)
}
inline std::string* draco_data::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:generated.draco_data.data)
  return _s;
}
inline const std::string& draco_data::_internal_data() const {
  return _impl_.data_.Get();
}
inline void draco_data::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* draco_data::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* draco_data::release_data() {
  // @@protoc_insertion_point(field_release:generated.draco_data.data)
  return _impl_.data_.Release();
}
inline void draco_data::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:generated.draco_data.data)
}

// int64 timestamp = 2;
inline void draco_data::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t draco_data::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t draco_data::timestamp() const {
  // @@protoc_insertion_point(field_get:generated.draco_data.timestamp)
  return _internal_timestamp();
}
inline void draco_data::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void draco_data::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:generated.draco_data.timestamp)
}

// -------------------------------------------------------------------

// maybe_matrix

// optional .generated.matrix data = 1;
inline bool maybe_matrix::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool maybe_matrix::has_data() const {
  return _internal_has_data();
}
inline const ::generated::matrix& maybe_matrix::_internal_data() const {
  const ::generated::matrix* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::generated::matrix&>(
      ::generated::_matrix_default_instance_);
}
inline const ::generated::matrix& maybe_matrix::data() const {
  // @@protoc_insertion_point(field_get:generated.maybe_matrix.data)
  return _internal_data();
}
inline void maybe_matrix::unsafe_arena_set_allocated_data(
    ::generated::matrix* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:generated.maybe_matrix.data)
}
inline ::generated::matrix* maybe_matrix::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::generated::matrix* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::generated::matrix* maybe_matrix::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:generated.maybe_matrix.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::generated::matrix* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::generated::matrix* maybe_matrix::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::generated::matrix>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::generated::matrix* maybe_matrix::mutable_data() {
  ::generated::matrix* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:generated.maybe_matrix.data)
  return _msg;
}
inline void maybe_matrix::set_allocated_data(::generated::matrix* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:generated.maybe_matrix.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace generated

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_depth_5fimage_2eproto
