// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hand_tracking.proto

#include "hand_tracking.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace generated {
PROTOBUF_CONSTEXPR hand_data::hand_data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hand_key_positions_)*/{}
  , /*decltype(_impl_.hand_key_rotations_)*/{}
  , /*decltype(_impl_.hand_key_radii_)*/{}
  , /*decltype(_impl_.grip_position_)*/nullptr
  , /*decltype(_impl_.grip_rotation_)*/nullptr
  , /*decltype(_impl_.aim_position_)*/nullptr
  , /*decltype(_impl_.aim_rotation_)*/nullptr
  , /*decltype(_impl_.hand_)*/0
  , /*decltype(_impl_.tracking_stat_)*/0
  , /*decltype(_impl_.utc_timestamp_)*/int64_t{0}
  , /*decltype(_impl_.valid_)*/false
  , /*decltype(_impl_.is_grasped_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct hand_dataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR hand_dataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~hand_dataDefaultTypeInternal() {}
  union {
    hand_data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 hand_dataDefaultTypeInternal _hand_data_default_instance_;
}  // namespace generated
namespace generated {
bool hand_index_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> hand_index_strings[2] = {};

static const char hand_index_names[] =
  "LEFT"
  "RIGHT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry hand_index_entries[] = {
  { {hand_index_names + 0, 4}, 0 },
  { {hand_index_names + 4, 5}, 1 },
};

static const int hand_index_entries_by_number[] = {
  0, // 0 -> LEFT
  1, // 1 -> RIGHT
};

const std::string& hand_index_Name(
    hand_index value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          hand_index_entries,
          hand_index_entries_by_number,
          2, hand_index_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      hand_index_entries,
      hand_index_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     hand_index_strings[idx].get();
}
bool hand_index_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, hand_index* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      hand_index_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<hand_index>(int_value);
  }
  return success;
}
bool tracking_status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> tracking_status_strings[3] = {};

static const char tracking_status_names[] =
  "INERTIAL_ONLY"
  "NOT_TRACKED"
  "TRACKED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry tracking_status_entries[] = {
  { {tracking_status_names + 0, 13}, 1 },
  { {tracking_status_names + 13, 11}, 0 },
  { {tracking_status_names + 24, 7}, 2 },
};

static const int tracking_status_entries_by_number[] = {
  1, // 0 -> NOT_TRACKED
  0, // 1 -> INERTIAL_ONLY
  2, // 2 -> TRACKED
};

const std::string& tracking_status_Name(
    tracking_status value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          tracking_status_entries,
          tracking_status_entries_by_number,
          3, tracking_status_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      tracking_status_entries,
      tracking_status_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     tracking_status_strings[idx].get();
}
bool tracking_status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, tracking_status* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      tracking_status_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<tracking_status>(int_value);
  }
  return success;
}
bool hand_key_point_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> hand_key_point_strings[26] = {};

static const char hand_key_point_names[] =
  "INDEX_DISTAL"
  "INDEX_INTERMEDIATE"
  "INDEX_METACARPAL"
  "INDEX_PROXIMAL"
  "INDEX_TIP"
  "LITTLE_DISTAL"
  "LITTLE_INTERMEDIATE"
  "LITTLE_METACARPAL"
  "LITTLE_PROXIMAL"
  "LITTLE_TIP"
  "MIDDLE_DISTAL"
  "MIDDLE_INTERMEDIATE"
  "MIDDLE_METACARPAL"
  "MIDDLE_PROXIMAL"
  "MIDDLE_TIP"
  "PALM"
  "RING_DISTAL"
  "RING_INTERMEDIATE"
  "RING_METACARPAL"
  "RING_PROXIMAL"
  "RING_TIP"
  "THUMB_DISTAL"
  "THUMB_METACARPAL"
  "THUMB_PROXIMAL"
  "THUMB_TIP"
  "WRIST";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry hand_key_point_entries[] = {
  { {hand_key_point_names + 0, 12}, 9 },
  { {hand_key_point_names + 12, 18}, 8 },
  { {hand_key_point_names + 30, 16}, 6 },
  { {hand_key_point_names + 46, 14}, 7 },
  { {hand_key_point_names + 60, 9}, 10 },
  { {hand_key_point_names + 69, 13}, 24 },
  { {hand_key_point_names + 82, 19}, 23 },
  { {hand_key_point_names + 101, 17}, 21 },
  { {hand_key_point_names + 118, 15}, 22 },
  { {hand_key_point_names + 133, 10}, 25 },
  { {hand_key_point_names + 143, 13}, 14 },
  { {hand_key_point_names + 156, 19}, 13 },
  { {hand_key_point_names + 175, 17}, 11 },
  { {hand_key_point_names + 192, 15}, 12 },
  { {hand_key_point_names + 207, 10}, 15 },
  { {hand_key_point_names + 217, 4}, 0 },
  { {hand_key_point_names + 221, 11}, 19 },
  { {hand_key_point_names + 232, 17}, 18 },
  { {hand_key_point_names + 249, 15}, 16 },
  { {hand_key_point_names + 264, 13}, 17 },
  { {hand_key_point_names + 277, 8}, 20 },
  { {hand_key_point_names + 285, 12}, 4 },
  { {hand_key_point_names + 297, 16}, 2 },
  { {hand_key_point_names + 313, 14}, 3 },
  { {hand_key_point_names + 327, 9}, 5 },
  { {hand_key_point_names + 336, 5}, 1 },
};

static const int hand_key_point_entries_by_number[] = {
  15, // 0 -> PALM
  25, // 1 -> WRIST
  22, // 2 -> THUMB_METACARPAL
  23, // 3 -> THUMB_PROXIMAL
  21, // 4 -> THUMB_DISTAL
  24, // 5 -> THUMB_TIP
  2, // 6 -> INDEX_METACARPAL
  3, // 7 -> INDEX_PROXIMAL
  1, // 8 -> INDEX_INTERMEDIATE
  0, // 9 -> INDEX_DISTAL
  4, // 10 -> INDEX_TIP
  12, // 11 -> MIDDLE_METACARPAL
  13, // 12 -> MIDDLE_PROXIMAL
  11, // 13 -> MIDDLE_INTERMEDIATE
  10, // 14 -> MIDDLE_DISTAL
  14, // 15 -> MIDDLE_TIP
  18, // 16 -> RING_METACARPAL
  19, // 17 -> RING_PROXIMAL
  17, // 18 -> RING_INTERMEDIATE
  16, // 19 -> RING_DISTAL
  20, // 20 -> RING_TIP
  7, // 21 -> LITTLE_METACARPAL
  8, // 22 -> LITTLE_PROXIMAL
  6, // 23 -> LITTLE_INTERMEDIATE
  5, // 24 -> LITTLE_DISTAL
  9, // 25 -> LITTLE_TIP
};

const std::string& hand_key_point_Name(
    hand_key_point value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          hand_key_point_entries,
          hand_key_point_entries_by_number,
          26, hand_key_point_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      hand_key_point_entries,
      hand_key_point_entries_by_number,
      26, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     hand_key_point_strings[idx].get();
}
bool hand_key_point_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, hand_key_point* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      hand_key_point_entries, 26, name, &int_value);
  if (success) {
    *value = static_cast<hand_key_point>(int_value);
  }
  return success;
}

// ===================================================================

class hand_data::_Internal {
 public:
  static const ::generated::vertex_3d& grip_position(const hand_data* msg);
  static const ::generated::quaternion& grip_rotation(const hand_data* msg);
  static const ::generated::vertex_3d& aim_position(const hand_data* msg);
  static const ::generated::quaternion& aim_rotation(const hand_data* msg);
};

const ::generated::vertex_3d&
hand_data::_Internal::grip_position(const hand_data* msg) {
  return *msg->_impl_.grip_position_;
}
const ::generated::quaternion&
hand_data::_Internal::grip_rotation(const hand_data* msg) {
  return *msg->_impl_.grip_rotation_;
}
const ::generated::vertex_3d&
hand_data::_Internal::aim_position(const hand_data* msg) {
  return *msg->_impl_.aim_position_;
}
const ::generated::quaternion&
hand_data::_Internal::aim_rotation(const hand_data* msg) {
  return *msg->_impl_.aim_rotation_;
}
void hand_data::clear_grip_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.grip_position_ != nullptr) {
    delete _impl_.grip_position_;
  }
  _impl_.grip_position_ = nullptr;
}
void hand_data::clear_grip_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.grip_rotation_ != nullptr) {
    delete _impl_.grip_rotation_;
  }
  _impl_.grip_rotation_ = nullptr;
}
void hand_data::clear_aim_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.aim_position_ != nullptr) {
    delete _impl_.aim_position_;
  }
  _impl_.aim_position_ = nullptr;
}
void hand_data::clear_aim_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.aim_rotation_ != nullptr) {
    delete _impl_.aim_rotation_;
  }
  _impl_.aim_rotation_ = nullptr;
}
void hand_data::clear_hand_key_positions() {
  _impl_.hand_key_positions_.Clear();
}
void hand_data::clear_hand_key_rotations() {
  _impl_.hand_key_rotations_.Clear();
}
hand_data::hand_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:generated.hand_data)
}
hand_data::hand_data(const hand_data& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  hand_data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hand_key_positions_){from._impl_.hand_key_positions_}
    , decltype(_impl_.hand_key_rotations_){from._impl_.hand_key_rotations_}
    , decltype(_impl_.hand_key_radii_){from._impl_.hand_key_radii_}
    , decltype(_impl_.grip_position_){nullptr}
    , decltype(_impl_.grip_rotation_){nullptr}
    , decltype(_impl_.aim_position_){nullptr}
    , decltype(_impl_.aim_rotation_){nullptr}
    , decltype(_impl_.hand_){}
    , decltype(_impl_.tracking_stat_){}
    , decltype(_impl_.utc_timestamp_){}
    , decltype(_impl_.valid_){}
    , decltype(_impl_.is_grasped_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_grip_position()) {
    _this->_impl_.grip_position_ = new ::generated::vertex_3d(*from._impl_.grip_position_);
  }
  if (from._internal_has_grip_rotation()) {
    _this->_impl_.grip_rotation_ = new ::generated::quaternion(*from._impl_.grip_rotation_);
  }
  if (from._internal_has_aim_position()) {
    _this->_impl_.aim_position_ = new ::generated::vertex_3d(*from._impl_.aim_position_);
  }
  if (from._internal_has_aim_rotation()) {
    _this->_impl_.aim_rotation_ = new ::generated::quaternion(*from._impl_.aim_rotation_);
  }
  ::memcpy(&_impl_.hand_, &from._impl_.hand_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_grasped_) -
    reinterpret_cast<char*>(&_impl_.hand_)) + sizeof(_impl_.is_grasped_));
  // @@protoc_insertion_point(copy_constructor:generated.hand_data)
}

inline void hand_data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hand_key_positions_){arena}
    , decltype(_impl_.hand_key_rotations_){arena}
    , decltype(_impl_.hand_key_radii_){arena}
    , decltype(_impl_.grip_position_){nullptr}
    , decltype(_impl_.grip_rotation_){nullptr}
    , decltype(_impl_.aim_position_){nullptr}
    , decltype(_impl_.aim_rotation_){nullptr}
    , decltype(_impl_.hand_){0}
    , decltype(_impl_.tracking_stat_){0}
    , decltype(_impl_.utc_timestamp_){int64_t{0}}
    , decltype(_impl_.valid_){false}
    , decltype(_impl_.is_grasped_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

hand_data::~hand_data() {
  // @@protoc_insertion_point(destructor:generated.hand_data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void hand_data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hand_key_positions_.~RepeatedPtrField();
  _impl_.hand_key_rotations_.~RepeatedPtrField();
  _impl_.hand_key_radii_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.grip_position_;
  if (this != internal_default_instance()) delete _impl_.grip_rotation_;
  if (this != internal_default_instance()) delete _impl_.aim_position_;
  if (this != internal_default_instance()) delete _impl_.aim_rotation_;
}

void hand_data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void hand_data::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.hand_data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hand_key_positions_.Clear();
  _impl_.hand_key_rotations_.Clear();
  _impl_.hand_key_radii_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.grip_position_ != nullptr) {
    delete _impl_.grip_position_;
  }
  _impl_.grip_position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.grip_rotation_ != nullptr) {
    delete _impl_.grip_rotation_;
  }
  _impl_.grip_rotation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.aim_position_ != nullptr) {
    delete _impl_.aim_position_;
  }
  _impl_.aim_position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.aim_rotation_ != nullptr) {
    delete _impl_.aim_rotation_;
  }
  _impl_.aim_rotation_ = nullptr;
  ::memset(&_impl_.hand_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_grasped_) -
      reinterpret_cast<char*>(&_impl_.hand_)) + sizeof(_impl_.is_grasped_));
  _internal_metadata_.Clear<std::string>();
}

const char* hand_data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .generated.hand_index hand = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_hand(static_cast<::generated::hand_index>(val));
        } else
          goto handle_unusual;
        continue;
      // .generated.tracking_status tracking_stat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tracking_stat(static_cast<::generated::tracking_status>(val));
        } else
          goto handle_unusual;
        continue;
      // .generated.vertex_3d grip_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_grip_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .generated.quaternion grip_rotation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_grip_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .generated.vertex_3d aim_position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_aim_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .generated.quaternion aim_rotation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_aim_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .generated.vertex_3d hand_key_positions = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hand_key_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .generated.quaternion hand_key_rotations = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hand_key_rotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated float hand_key_radii = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_hand_key_radii(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 85) {
          _internal_add_hand_key_radii(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool is_grasped = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.is_grasped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 utc_timestamp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.utc_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* hand_data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.hand_data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool valid = 1;
  if (this->_internal_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_valid(), target);
  }

  // .generated.hand_index hand = 2;
  if (this->_internal_hand() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_hand(), target);
  }

  // .generated.tracking_status tracking_stat = 3;
  if (this->_internal_tracking_stat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_tracking_stat(), target);
  }

  // .generated.vertex_3d grip_position = 4;
  if (this->_internal_has_grip_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::grip_position(this),
        _Internal::grip_position(this).GetCachedSize(), target, stream);
  }

  // .generated.quaternion grip_rotation = 5;
  if (this->_internal_has_grip_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::grip_rotation(this),
        _Internal::grip_rotation(this).GetCachedSize(), target, stream);
  }

  // .generated.vertex_3d aim_position = 6;
  if (this->_internal_has_aim_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::aim_position(this),
        _Internal::aim_position(this).GetCachedSize(), target, stream);
  }

  // .generated.quaternion aim_rotation = 7;
  if (this->_internal_has_aim_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::aim_rotation(this),
        _Internal::aim_rotation(this).GetCachedSize(), target, stream);
  }

  // repeated .generated.vertex_3d hand_key_positions = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hand_key_positions_size()); i < n; i++) {
    const auto& repfield = this->_internal_hand_key_positions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .generated.quaternion hand_key_rotations = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hand_key_rotations_size()); i < n; i++) {
    const auto& repfield = this->_internal_hand_key_rotations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated float hand_key_radii = 10;
  if (this->_internal_hand_key_radii_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_hand_key_radii(), target);
  }

  // bool is_grasped = 11;
  if (this->_internal_is_grasped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_is_grasped(), target);
  }

  // int64 utc_timestamp = 12;
  if (this->_internal_utc_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_utc_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.hand_data)
  return target;
}

size_t hand_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.hand_data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .generated.vertex_3d hand_key_positions = 8;
  total_size += 1UL * this->_internal_hand_key_positions_size();
  for (const auto& msg : this->_impl_.hand_key_positions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .generated.quaternion hand_key_rotations = 9;
  total_size += 1UL * this->_internal_hand_key_rotations_size();
  for (const auto& msg : this->_impl_.hand_key_rotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float hand_key_radii = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_hand_key_radii_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .generated.vertex_3d grip_position = 4;
  if (this->_internal_has_grip_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.grip_position_);
  }

  // .generated.quaternion grip_rotation = 5;
  if (this->_internal_has_grip_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.grip_rotation_);
  }

  // .generated.vertex_3d aim_position = 6;
  if (this->_internal_has_aim_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.aim_position_);
  }

  // .generated.quaternion aim_rotation = 7;
  if (this->_internal_has_aim_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.aim_rotation_);
  }

  // .generated.hand_index hand = 2;
  if (this->_internal_hand() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_hand());
  }

  // .generated.tracking_status tracking_stat = 3;
  if (this->_internal_tracking_stat() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tracking_stat());
  }

  // int64 utc_timestamp = 12;
  if (this->_internal_utc_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_utc_timestamp());
  }

  // bool valid = 1;
  if (this->_internal_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool is_grasped = 11;
  if (this->_internal_is_grasped() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void hand_data::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const hand_data*>(
      &from));
}

void hand_data::MergeFrom(const hand_data& from) {
  hand_data* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.hand_data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hand_key_positions_.MergeFrom(from._impl_.hand_key_positions_);
  _this->_impl_.hand_key_rotations_.MergeFrom(from._impl_.hand_key_rotations_);
  _this->_impl_.hand_key_radii_.MergeFrom(from._impl_.hand_key_radii_);
  if (from._internal_has_grip_position()) {
    _this->_internal_mutable_grip_position()->::generated::vertex_3d::MergeFrom(
        from._internal_grip_position());
  }
  if (from._internal_has_grip_rotation()) {
    _this->_internal_mutable_grip_rotation()->::generated::quaternion::MergeFrom(
        from._internal_grip_rotation());
  }
  if (from._internal_has_aim_position()) {
    _this->_internal_mutable_aim_position()->::generated::vertex_3d::MergeFrom(
        from._internal_aim_position());
  }
  if (from._internal_has_aim_rotation()) {
    _this->_internal_mutable_aim_rotation()->::generated::quaternion::MergeFrom(
        from._internal_aim_rotation());
  }
  if (from._internal_hand() != 0) {
    _this->_internal_set_hand(from._internal_hand());
  }
  if (from._internal_tracking_stat() != 0) {
    _this->_internal_set_tracking_stat(from._internal_tracking_stat());
  }
  if (from._internal_utc_timestamp() != 0) {
    _this->_internal_set_utc_timestamp(from._internal_utc_timestamp());
  }
  if (from._internal_valid() != 0) {
    _this->_internal_set_valid(from._internal_valid());
  }
  if (from._internal_is_grasped() != 0) {
    _this->_internal_set_is_grasped(from._internal_is_grasped());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void hand_data::CopyFrom(const hand_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.hand_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hand_data::IsInitialized() const {
  return true;
}

void hand_data::InternalSwap(hand_data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hand_key_positions_.InternalSwap(&other->_impl_.hand_key_positions_);
  _impl_.hand_key_rotations_.InternalSwap(&other->_impl_.hand_key_rotations_);
  _impl_.hand_key_radii_.InternalSwap(&other->_impl_.hand_key_radii_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(hand_data, _impl_.is_grasped_)
      + sizeof(hand_data::_impl_.is_grasped_)
      - PROTOBUF_FIELD_OFFSET(hand_data, _impl_.grip_position_)>(
          reinterpret_cast<char*>(&_impl_.grip_position_),
          reinterpret_cast<char*>(&other->_impl_.grip_position_));
}

std::string hand_data::GetTypeName() const {
  return "generated.hand_data";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace generated
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::generated::hand_data*
Arena::CreateMaybeMessage< ::generated::hand_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::hand_data >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
