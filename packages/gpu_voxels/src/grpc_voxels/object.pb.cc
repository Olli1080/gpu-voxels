// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object.proto

#include "object.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace generated {
PROTOBUF_CONSTEXPR colored_box::colored_box(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.obbox_)*/nullptr
  , /*decltype(_impl_.box_color_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct colored_boxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR colored_boxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~colored_boxDefaultTypeInternal() {}
  union {
    colored_box _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 colored_boxDefaultTypeInternal _colored_box_default_instance_;
PROTOBUF_CONSTEXPR object_data::object_data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prototype_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.transform_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct object_dataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR object_dataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~object_dataDefaultTypeInternal() {}
  union {
    object_data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 object_dataDefaultTypeInternal _object_data_default_instance_;
PROTOBUF_CONSTEXPR object_instance::object_instance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct object_instanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR object_instanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~object_instanceDefaultTypeInternal() {}
  union {
    object_instance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 object_instanceDefaultTypeInternal _object_instance_default_instance_;
PROTOBUF_CONSTEXPR delete_request::delete_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct delete_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR delete_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~delete_requestDefaultTypeInternal() {}
  union {
    delete_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 delete_requestDefaultTypeInternal _delete_request_default_instance_;
}  // namespace generated
namespace generated {

// ===================================================================

class colored_box::_Internal {
 public:
  static const ::generated::obb& obbox(const colored_box* msg);
  static const ::generated::color& box_color(const colored_box* msg);
};

const ::generated::obb&
colored_box::_Internal::obbox(const colored_box* msg) {
  return *msg->_impl_.obbox_;
}
const ::generated::color&
colored_box::_Internal::box_color(const colored_box* msg) {
  return *msg->_impl_.box_color_;
}
void colored_box::clear_obbox() {
  if (GetArenaForAllocation() == nullptr && _impl_.obbox_ != nullptr) {
    delete _impl_.obbox_;
  }
  _impl_.obbox_ = nullptr;
}
void colored_box::clear_box_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.box_color_ != nullptr) {
    delete _impl_.box_color_;
  }
  _impl_.box_color_ = nullptr;
}
colored_box::colored_box(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:generated.colored_box)
}
colored_box::colored_box(const colored_box& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  colored_box* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.obbox_){nullptr}
    , decltype(_impl_.box_color_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_obbox()) {
    _this->_impl_.obbox_ = new ::generated::obb(*from._impl_.obbox_);
  }
  if (from._internal_has_box_color()) {
    _this->_impl_.box_color_ = new ::generated::color(*from._impl_.box_color_);
  }
  // @@protoc_insertion_point(copy_constructor:generated.colored_box)
}

inline void colored_box::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.obbox_){nullptr}
    , decltype(_impl_.box_color_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

colored_box::~colored_box() {
  // @@protoc_insertion_point(destructor:generated.colored_box)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void colored_box::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.obbox_;
  if (this != internal_default_instance()) delete _impl_.box_color_;
}

void colored_box::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void colored_box::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.colored_box)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.obbox_ != nullptr) {
    delete _impl_.obbox_;
  }
  _impl_.obbox_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.box_color_ != nullptr) {
    delete _impl_.box_color_;
  }
  _impl_.box_color_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* colored_box::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .generated.obb obbox = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_obbox(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .generated.color box_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_box_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* colored_box::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.colored_box)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .generated.obb obbox = 1;
  if (this->_internal_has_obbox()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::obbox(this),
        _Internal::obbox(this).GetCachedSize(), target, stream);
  }

  // .generated.color box_color = 2;
  if (this->_internal_has_box_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::box_color(this),
        _Internal::box_color(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.colored_box)
  return target;
}

size_t colored_box::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.colored_box)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .generated.obb obbox = 1;
  if (this->_internal_has_obbox()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.obbox_);
  }

  // .generated.color box_color = 2;
  if (this->_internal_has_box_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.box_color_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void colored_box::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const colored_box*>(
      &from));
}

void colored_box::MergeFrom(const colored_box& from) {
  colored_box* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.colored_box)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_obbox()) {
    _this->_internal_mutable_obbox()->::generated::obb::MergeFrom(
        from._internal_obbox());
  }
  if (from._internal_has_box_color()) {
    _this->_internal_mutable_box_color()->::generated::color::MergeFrom(
        from._internal_box_color());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void colored_box::CopyFrom(const colored_box& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.colored_box)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool colored_box::IsInitialized() const {
  return true;
}

void colored_box::InternalSwap(colored_box* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(colored_box, _impl_.box_color_)
      + sizeof(colored_box::_impl_.box_color_)
      - PROTOBUF_FIELD_OFFSET(colored_box, _impl_.obbox_)>(
          reinterpret_cast<char*>(&_impl_.obbox_),
          reinterpret_cast<char*>(&other->_impl_.obbox_));
}

std::string colored_box::GetTypeName() const {
  return "generated.colored_box";
}


// ===================================================================

class object_data::_Internal {
 public:
  static const ::generated::matrix& transform(const object_data* msg);
};

const ::generated::matrix&
object_data::_Internal::transform(const object_data* msg) {
  return *msg->_impl_.transform_;
}
void object_data::clear_transform() {
  if (GetArenaForAllocation() == nullptr && _impl_.transform_ != nullptr) {
    delete _impl_.transform_;
  }
  _impl_.transform_ = nullptr;
}
object_data::object_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:generated.object_data)
}
object_data::object_data(const object_data& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  object_data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prototype_name_){}
    , decltype(_impl_.transform_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.prototype_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prototype_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prototype_name().empty()) {
    _this->_impl_.prototype_name_.Set(from._internal_prototype_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_transform()) {
    _this->_impl_.transform_ = new ::generated::matrix(*from._impl_.transform_);
  }
  // @@protoc_insertion_point(copy_constructor:generated.object_data)
}

inline void object_data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prototype_name_){}
    , decltype(_impl_.transform_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.prototype_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prototype_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

object_data::~object_data() {
  // @@protoc_insertion_point(destructor:generated.object_data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void object_data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prototype_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.transform_;
}

void object_data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void object_data::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.object_data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prototype_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.transform_ != nullptr) {
    delete _impl_.transform_;
  }
  _impl_.transform_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* object_data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string prototype_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_prototype_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .generated.matrix transform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* object_data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.object_data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string prototype_name = 1;
  if (!this->_internal_prototype_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prototype_name().data(), static_cast<int>(this->_internal_prototype_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "generated.object_data.prototype_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_prototype_name(), target);
  }

  // .generated.matrix transform = 2;
  if (this->_internal_has_transform()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.object_data)
  return target;
}

size_t object_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.object_data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prototype_name = 1;
  if (!this->_internal_prototype_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prototype_name());
  }

  // .generated.matrix transform = 2;
  if (this->_internal_has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transform_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void object_data::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const object_data*>(
      &from));
}

void object_data::MergeFrom(const object_data& from) {
  object_data* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.object_data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_prototype_name().empty()) {
    _this->_internal_set_prototype_name(from._internal_prototype_name());
  }
  if (from._internal_has_transform()) {
    _this->_internal_mutable_transform()->::generated::matrix::MergeFrom(
        from._internal_transform());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void object_data::CopyFrom(const object_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.object_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool object_data::IsInitialized() const {
  return true;
}

void object_data::InternalSwap(object_data* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prototype_name_, lhs_arena,
      &other->_impl_.prototype_name_, rhs_arena
  );
  swap(_impl_.transform_, other->_impl_.transform_);
}

std::string object_data::GetTypeName() const {
  return "generated.object_data";
}


// ===================================================================

class object_instance::_Internal {
 public:
  static const ::generated::object_data& obj(const object_instance* msg);
  static const ::generated::colored_box& box(const object_instance* msg);
};

const ::generated::object_data&
object_instance::_Internal::obj(const object_instance* msg) {
  return *msg->_impl_.data_.obj_;
}
const ::generated::colored_box&
object_instance::_Internal::box(const object_instance* msg) {
  return *msg->_impl_.data_.box_;
}
void object_instance::set_allocated_obj(::generated::object_data* obj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (obj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(obj);
    if (message_arena != submessage_arena) {
      obj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obj, submessage_arena);
    }
    set_has_obj();
    _impl_.data_.obj_ = obj;
  }
  // @@protoc_insertion_point(field_set_allocated:generated.object_instance.obj)
}
void object_instance::set_allocated_box(::generated::colored_box* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(box);
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    set_has_box();
    _impl_.data_.box_ = box;
  }
  // @@protoc_insertion_point(field_set_allocated:generated.object_instance.box)
}
object_instance::object_instance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:generated.object_instance)
}
object_instance::object_instance(const object_instance& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  object_instance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  clear_has_data();
  switch (from.data_case()) {
    case kObj: {
      _this->_internal_mutable_obj()->::generated::object_data::MergeFrom(
          from._internal_obj());
      break;
    }
    case kBox: {
      _this->_internal_mutable_box()->::generated::colored_box::MergeFrom(
          from._internal_box());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:generated.object_instance)
}

inline void object_instance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_data();
}

object_instance::~object_instance() {
  // @@protoc_insertion_point(destructor:generated.object_instance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void object_instance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (has_data()) {
    clear_data();
  }
}

void object_instance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void object_instance::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:generated.object_instance)
  switch (data_case()) {
    case kObj: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.obj_;
      }
      break;
    }
    case kBox: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.box_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void object_instance::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.object_instance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  clear_data();
  _internal_metadata_.Clear<std::string>();
}

const char* object_instance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .generated.object_data obj = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_obj(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .generated.colored_box box = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_box(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* object_instance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.object_instance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "generated.object_instance.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .generated.object_data obj = 2;
  if (_internal_has_obj()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::obj(this),
        _Internal::obj(this).GetCachedSize(), target, stream);
  }

  // .generated.colored_box box = 3;
  if (_internal_has_box()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::box(this),
        _Internal::box(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.object_instance)
  return target;
}

size_t object_instance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.object_instance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  switch (data_case()) {
    // .generated.object_data obj = 2;
    case kObj: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.obj_);
      break;
    }
    // .generated.colored_box box = 3;
    case kBox: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.box_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void object_instance::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const object_instance*>(
      &from));
}

void object_instance::MergeFrom(const object_instance& from) {
  object_instance* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.object_instance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  switch (from.data_case()) {
    case kObj: {
      _this->_internal_mutable_obj()->::generated::object_data::MergeFrom(
          from._internal_obj());
      break;
    }
    case kBox: {
      _this->_internal_mutable_box()->::generated::colored_box::MergeFrom(
          from._internal_box());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void object_instance::CopyFrom(const object_instance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.object_instance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool object_instance::IsInitialized() const {
  return true;
}

void object_instance::InternalSwap(object_instance* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

std::string object_instance::GetTypeName() const {
  return "generated.object_instance";
}


// ===================================================================

class delete_request::_Internal {
 public:
};

delete_request::delete_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:generated.delete_request)
}
delete_request::delete_request(const delete_request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  delete_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:generated.delete_request)
}

inline void delete_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

delete_request::~delete_request() {
  // @@protoc_insertion_point(destructor:generated.delete_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void delete_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void delete_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void delete_request::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.delete_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* delete_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* delete_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.delete_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "generated.delete_request.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.delete_request)
  return target;
}

size_t delete_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.delete_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void delete_request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const delete_request*>(
      &from));
}

void delete_request::MergeFrom(const delete_request& from) {
  delete_request* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.delete_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void delete_request::CopyFrom(const delete_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.delete_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delete_request::IsInitialized() const {
  return true;
}

void delete_request::InternalSwap(delete_request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

std::string delete_request::GetTypeName() const {
  return "generated.delete_request";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace generated
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::generated::colored_box*
Arena::CreateMaybeMessage< ::generated::colored_box >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::colored_box >(arena);
}
template<> PROTOBUF_NOINLINE ::generated::object_data*
Arena::CreateMaybeMessage< ::generated::object_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::object_data >(arena);
}
template<> PROTOBUF_NOINLINE ::generated::object_instance*
Arena::CreateMaybeMessage< ::generated::object_instance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::object_instance >(arena);
}
template<> PROTOBUF_NOINLINE ::generated::delete_request*
Arena::CreateMaybeMessage< ::generated::delete_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::delete_request >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
