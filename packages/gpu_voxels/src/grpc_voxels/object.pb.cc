// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object.proto

#include "object.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace generated {
PROTOBUF_CONSTEXPR Colored_Box::Colored_Box(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.obbox_)*/nullptr
  , /*decltype(_impl_.box_color_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Colored_BoxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Colored_BoxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Colored_BoxDefaultTypeInternal() {}
  union {
    Colored_Box _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Colored_BoxDefaultTypeInternal _Colored_Box_default_instance_;
PROTOBUF_CONSTEXPR Object_Data::Object_Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prototype_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.transform_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Object_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Object_DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Object_DataDefaultTypeInternal() {}
  union {
    Object_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Object_DataDefaultTypeInternal _Object_Data_default_instance_;
PROTOBUF_CONSTEXPR Object_Instance::Object_Instance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Object_InstanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Object_InstanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Object_InstanceDefaultTypeInternal() {}
  union {
    Object_Instance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Object_InstanceDefaultTypeInternal _Object_Instance_default_instance_;
PROTOBUF_CONSTEXPR Delete_Request::Delete_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Delete_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Delete_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Delete_RequestDefaultTypeInternal() {}
  union {
    Delete_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Delete_RequestDefaultTypeInternal _Delete_Request_default_instance_;
PROTOBUF_CONSTEXPR Object_Instance_TF_Meta::Object_Instance_TF_Meta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.object_instance_)*/nullptr
  , /*decltype(_impl_.transformation_meta_)*/nullptr} {}
struct Object_Instance_TF_MetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Object_Instance_TF_MetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Object_Instance_TF_MetaDefaultTypeInternal() {}
  union {
    Object_Instance_TF_Meta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Object_Instance_TF_MetaDefaultTypeInternal _Object_Instance_TF_Meta_default_instance_;
}  // namespace generated
namespace generated {

// ===================================================================

class Colored_Box::_Internal {
 public:
  static const ::generated::obb& obbox(const Colored_Box* msg);
  static const ::generated::color& box_color(const Colored_Box* msg);
};

const ::generated::obb&
Colored_Box::_Internal::obbox(const Colored_Box* msg) {
  return *msg->_impl_.obbox_;
}
const ::generated::color&
Colored_Box::_Internal::box_color(const Colored_Box* msg) {
  return *msg->_impl_.box_color_;
}
void Colored_Box::clear_obbox() {
  if (GetArenaForAllocation() == nullptr && _impl_.obbox_ != nullptr) {
    delete _impl_.obbox_;
  }
  _impl_.obbox_ = nullptr;
}
void Colored_Box::clear_box_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.box_color_ != nullptr) {
    delete _impl_.box_color_;
  }
  _impl_.box_color_ = nullptr;
}
Colored_Box::Colored_Box(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:generated.Colored_Box)
}
Colored_Box::Colored_Box(const Colored_Box& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Colored_Box* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.obbox_){nullptr}
    , decltype(_impl_.box_color_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_obbox()) {
    _this->_impl_.obbox_ = new ::generated::obb(*from._impl_.obbox_);
  }
  if (from._internal_has_box_color()) {
    _this->_impl_.box_color_ = new ::generated::color(*from._impl_.box_color_);
  }
  // @@protoc_insertion_point(copy_constructor:generated.Colored_Box)
}

inline void Colored_Box::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.obbox_){nullptr}
    , decltype(_impl_.box_color_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Colored_Box::~Colored_Box() {
  // @@protoc_insertion_point(destructor:generated.Colored_Box)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Colored_Box::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.obbox_;
  if (this != internal_default_instance()) delete _impl_.box_color_;
}

void Colored_Box::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Colored_Box::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.Colored_Box)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.obbox_ != nullptr) {
    delete _impl_.obbox_;
  }
  _impl_.obbox_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.box_color_ != nullptr) {
    delete _impl_.box_color_;
  }
  _impl_.box_color_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* Colored_Box::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .generated.obb obbox = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_obbox(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .generated.color box_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_box_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Colored_Box::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.Colored_Box)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .generated.obb obbox = 1;
  if (this->_internal_has_obbox()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::obbox(this),
        _Internal::obbox(this).GetCachedSize(), target, stream);
  }

  // .generated.color box_color = 2;
  if (this->_internal_has_box_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::box_color(this),
        _Internal::box_color(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.Colored_Box)
  return target;
}

size_t Colored_Box::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.Colored_Box)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .generated.obb obbox = 1;
  if (this->_internal_has_obbox()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.obbox_);
  }

  // .generated.color box_color = 2;
  if (this->_internal_has_box_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.box_color_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Colored_Box::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Colored_Box*>(
      &from));
}

void Colored_Box::MergeFrom(const Colored_Box& from) {
  Colored_Box* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.Colored_Box)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_obbox()) {
    _this->_internal_mutable_obbox()->::generated::obb::MergeFrom(
        from._internal_obbox());
  }
  if (from._internal_has_box_color()) {
    _this->_internal_mutable_box_color()->::generated::color::MergeFrom(
        from._internal_box_color());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Colored_Box::CopyFrom(const Colored_Box& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.Colored_Box)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Colored_Box::IsInitialized() const {
  return true;
}

void Colored_Box::InternalSwap(Colored_Box* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Colored_Box, _impl_.box_color_)
      + sizeof(Colored_Box::_impl_.box_color_)
      - PROTOBUF_FIELD_OFFSET(Colored_Box, _impl_.obbox_)>(
          reinterpret_cast<char*>(&_impl_.obbox_),
          reinterpret_cast<char*>(&other->_impl_.obbox_));
}

std::string Colored_Box::GetTypeName() const {
  return "generated.Colored_Box";
}


// ===================================================================

class Object_Data::_Internal {
 public:
  static const ::generated::Matrix& transform(const Object_Data* msg);
};

const ::generated::Matrix&
Object_Data::_Internal::transform(const Object_Data* msg) {
  return *msg->_impl_.transform_;
}
void Object_Data::clear_transform() {
  if (GetArenaForAllocation() == nullptr && _impl_.transform_ != nullptr) {
    delete _impl_.transform_;
  }
  _impl_.transform_ = nullptr;
}
Object_Data::Object_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:generated.Object_Data)
}
Object_Data::Object_Data(const Object_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Object_Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prototype_name_){}
    , decltype(_impl_.transform_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.prototype_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prototype_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prototype_name().empty()) {
    _this->_impl_.prototype_name_.Set(from._internal_prototype_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_transform()) {
    _this->_impl_.transform_ = new ::generated::Matrix(*from._impl_.transform_);
  }
  // @@protoc_insertion_point(copy_constructor:generated.Object_Data)
}

inline void Object_Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prototype_name_){}
    , decltype(_impl_.transform_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.prototype_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prototype_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Object_Data::~Object_Data() {
  // @@protoc_insertion_point(destructor:generated.Object_Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Object_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prototype_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.transform_;
}

void Object_Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Object_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.Object_Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prototype_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.transform_ != nullptr) {
    delete _impl_.transform_;
  }
  _impl_.transform_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* Object_Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string prototype_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_prototype_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .generated.Matrix transform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Object_Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.Object_Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string prototype_name = 1;
  if (!this->_internal_prototype_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prototype_name().data(), static_cast<int>(this->_internal_prototype_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "generated.Object_Data.prototype_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_prototype_name(), target);
  }

  // .generated.Matrix transform = 2;
  if (this->_internal_has_transform()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.Object_Data)
  return target;
}

size_t Object_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.Object_Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prototype_name = 1;
  if (!this->_internal_prototype_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prototype_name());
  }

  // .generated.Matrix transform = 2;
  if (this->_internal_has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transform_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object_Data::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Object_Data*>(
      &from));
}

void Object_Data::MergeFrom(const Object_Data& from) {
  Object_Data* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.Object_Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_prototype_name().empty()) {
    _this->_internal_set_prototype_name(from._internal_prototype_name());
  }
  if (from._internal_has_transform()) {
    _this->_internal_mutable_transform()->::generated::Matrix::MergeFrom(
        from._internal_transform());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Object_Data::CopyFrom(const Object_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.Object_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object_Data::IsInitialized() const {
  return true;
}

void Object_Data::InternalSwap(Object_Data* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prototype_name_, lhs_arena,
      &other->_impl_.prototype_name_, rhs_arena
  );
  swap(_impl_.transform_, other->_impl_.transform_);
}

std::string Object_Data::GetTypeName() const {
  return "generated.Object_Data";
}


// ===================================================================

class Object_Instance::_Internal {
 public:
  static const ::generated::Object_Data& obj(const Object_Instance* msg);
  static const ::generated::Colored_Box& box(const Object_Instance* msg);
};

const ::generated::Object_Data&
Object_Instance::_Internal::obj(const Object_Instance* msg) {
  return *msg->_impl_.data_.obj_;
}
const ::generated::Colored_Box&
Object_Instance::_Internal::box(const Object_Instance* msg) {
  return *msg->_impl_.data_.box_;
}
void Object_Instance::set_allocated_obj(::generated::Object_Data* obj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (obj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(obj);
    if (message_arena != submessage_arena) {
      obj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obj, submessage_arena);
    }
    set_has_obj();
    _impl_.data_.obj_ = obj;
  }
  // @@protoc_insertion_point(field_set_allocated:generated.Object_Instance.obj)
}
void Object_Instance::set_allocated_box(::generated::Colored_Box* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(box);
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    set_has_box();
    _impl_.data_.box_ = box;
  }
  // @@protoc_insertion_point(field_set_allocated:generated.Object_Instance.box)
}
Object_Instance::Object_Instance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:generated.Object_Instance)
}
Object_Instance::Object_Instance(const Object_Instance& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Object_Instance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  clear_has_data();
  switch (from.data_case()) {
    case kObj: {
      _this->_internal_mutable_obj()->::generated::Object_Data::MergeFrom(
          from._internal_obj());
      break;
    }
    case kBox: {
      _this->_internal_mutable_box()->::generated::Colored_Box::MergeFrom(
          from._internal_box());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:generated.Object_Instance)
}

inline void Object_Instance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_data();
}

Object_Instance::~Object_Instance() {
  // @@protoc_insertion_point(destructor:generated.Object_Instance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Object_Instance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (has_data()) {
    clear_data();
  }
}

void Object_Instance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Object_Instance::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:generated.Object_Instance)
  switch (data_case()) {
    case kObj: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.obj_;
      }
      break;
    }
    case kBox: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.box_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void Object_Instance::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.Object_Instance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  clear_data();
  _internal_metadata_.Clear<std::string>();
}

const char* Object_Instance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .generated.Object_Data obj = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_obj(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .generated.Colored_Box box = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_box(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Object_Instance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.Object_Instance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "generated.Object_Instance.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .generated.Object_Data obj = 2;
  if (_internal_has_obj()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::obj(this),
        _Internal::obj(this).GetCachedSize(), target, stream);
  }

  // .generated.Colored_Box box = 3;
  if (_internal_has_box()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::box(this),
        _Internal::box(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.Object_Instance)
  return target;
}

size_t Object_Instance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.Object_Instance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  switch (data_case()) {
    // .generated.Object_Data obj = 2;
    case kObj: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.obj_);
      break;
    }
    // .generated.Colored_Box box = 3;
    case kBox: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.box_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object_Instance::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Object_Instance*>(
      &from));
}

void Object_Instance::MergeFrom(const Object_Instance& from) {
  Object_Instance* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.Object_Instance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  switch (from.data_case()) {
    case kObj: {
      _this->_internal_mutable_obj()->::generated::Object_Data::MergeFrom(
          from._internal_obj());
      break;
    }
    case kBox: {
      _this->_internal_mutable_box()->::generated::Colored_Box::MergeFrom(
          from._internal_box());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Object_Instance::CopyFrom(const Object_Instance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.Object_Instance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object_Instance::IsInitialized() const {
  return true;
}

void Object_Instance::InternalSwap(Object_Instance* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

std::string Object_Instance::GetTypeName() const {
  return "generated.Object_Instance";
}


// ===================================================================

class Delete_Request::_Internal {
 public:
};

Delete_Request::Delete_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:generated.Delete_Request)
}
Delete_Request::Delete_Request(const Delete_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Delete_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:generated.Delete_Request)
}

inline void Delete_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Delete_Request::~Delete_Request() {
  // @@protoc_insertion_point(destructor:generated.Delete_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Delete_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void Delete_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Delete_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.Delete_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* Delete_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Delete_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.Delete_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "generated.Delete_Request.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.Delete_Request)
  return target;
}

size_t Delete_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.Delete_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Delete_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Delete_Request*>(
      &from));
}

void Delete_Request::MergeFrom(const Delete_Request& from) {
  Delete_Request* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.Delete_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Delete_Request::CopyFrom(const Delete_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.Delete_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Delete_Request::IsInitialized() const {
  return true;
}

void Delete_Request::InternalSwap(Delete_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

std::string Delete_Request::GetTypeName() const {
  return "generated.Delete_Request";
}


// ===================================================================

class Object_Instance_TF_Meta::_Internal {
 public:
  using HasBits = decltype(std::declval<Object_Instance_TF_Meta>()._impl_._has_bits_);
  static const ::generated::Object_Instance& object_instance(const Object_Instance_TF_Meta* msg);
  static const ::generated::Transformation_Meta& transformation_meta(const Object_Instance_TF_Meta* msg);
  static void set_has_transformation_meta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::generated::Object_Instance&
Object_Instance_TF_Meta::_Internal::object_instance(const Object_Instance_TF_Meta* msg) {
  return *msg->_impl_.object_instance_;
}
const ::generated::Transformation_Meta&
Object_Instance_TF_Meta::_Internal::transformation_meta(const Object_Instance_TF_Meta* msg) {
  return *msg->_impl_.transformation_meta_;
}
void Object_Instance_TF_Meta::clear_transformation_meta() {
  if (_impl_.transformation_meta_ != nullptr) _impl_.transformation_meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Object_Instance_TF_Meta::Object_Instance_TF_Meta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:generated.Object_Instance_TF_Meta)
}
Object_Instance_TF_Meta::Object_Instance_TF_Meta(const Object_Instance_TF_Meta& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Object_Instance_TF_Meta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_instance_){nullptr}
    , decltype(_impl_.transformation_meta_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_object_instance()) {
    _this->_impl_.object_instance_ = new ::generated::Object_Instance(*from._impl_.object_instance_);
  }
  if (from._internal_has_transformation_meta()) {
    _this->_impl_.transformation_meta_ = new ::generated::Transformation_Meta(*from._impl_.transformation_meta_);
  }
  // @@protoc_insertion_point(copy_constructor:generated.Object_Instance_TF_Meta)
}

inline void Object_Instance_TF_Meta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_instance_){nullptr}
    , decltype(_impl_.transformation_meta_){nullptr}
  };
}

Object_Instance_TF_Meta::~Object_Instance_TF_Meta() {
  // @@protoc_insertion_point(destructor:generated.Object_Instance_TF_Meta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Object_Instance_TF_Meta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.object_instance_;
  if (this != internal_default_instance()) delete _impl_.transformation_meta_;
}

void Object_Instance_TF_Meta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Object_Instance_TF_Meta::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.Object_Instance_TF_Meta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.object_instance_ != nullptr) {
    delete _impl_.object_instance_;
  }
  _impl_.object_instance_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.transformation_meta_ != nullptr);
    _impl_.transformation_meta_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Object_Instance_TF_Meta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .generated.Object_Instance object_instance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_instance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .generated.Transformation_Meta transformation_meta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transformation_meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Object_Instance_TF_Meta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.Object_Instance_TF_Meta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .generated.Object_Instance object_instance = 1;
  if (this->_internal_has_object_instance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::object_instance(this),
        _Internal::object_instance(this).GetCachedSize(), target, stream);
  }

  // optional .generated.Transformation_Meta transformation_meta = 2;
  if (_internal_has_transformation_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::transformation_meta(this),
        _Internal::transformation_meta(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.Object_Instance_TF_Meta)
  return target;
}

size_t Object_Instance_TF_Meta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.Object_Instance_TF_Meta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .generated.Object_Instance object_instance = 1;
  if (this->_internal_has_object_instance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.object_instance_);
  }

  // optional .generated.Transformation_Meta transformation_meta = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transformation_meta_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object_Instance_TF_Meta::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Object_Instance_TF_Meta*>(
      &from));
}

void Object_Instance_TF_Meta::MergeFrom(const Object_Instance_TF_Meta& from) {
  Object_Instance_TF_Meta* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:generated.Object_Instance_TF_Meta)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_object_instance()) {
    _this->_internal_mutable_object_instance()->::generated::Object_Instance::MergeFrom(
        from._internal_object_instance());
  }
  if (from._internal_has_transformation_meta()) {
    _this->_internal_mutable_transformation_meta()->::generated::Transformation_Meta::MergeFrom(
        from._internal_transformation_meta());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Object_Instance_TF_Meta::CopyFrom(const Object_Instance_TF_Meta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.Object_Instance_TF_Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object_Instance_TF_Meta::IsInitialized() const {
  return true;
}

void Object_Instance_TF_Meta::InternalSwap(Object_Instance_TF_Meta* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Object_Instance_TF_Meta, _impl_.transformation_meta_)
      + sizeof(Object_Instance_TF_Meta::_impl_.transformation_meta_)
      - PROTOBUF_FIELD_OFFSET(Object_Instance_TF_Meta, _impl_.object_instance_)>(
          reinterpret_cast<char*>(&_impl_.object_instance_),
          reinterpret_cast<char*>(&other->_impl_.object_instance_));
}

std::string Object_Instance_TF_Meta::GetTypeName() const {
  return "generated.Object_Instance_TF_Meta";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace generated
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::generated::Colored_Box*
Arena::CreateMaybeMessage< ::generated::Colored_Box >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::Colored_Box >(arena);
}
template<> PROTOBUF_NOINLINE ::generated::Object_Data*
Arena::CreateMaybeMessage< ::generated::Object_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::Object_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::generated::Object_Instance*
Arena::CreateMaybeMessage< ::generated::Object_Instance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::Object_Instance >(arena);
}
template<> PROTOBUF_NOINLINE ::generated::Delete_Request*
Arena::CreateMaybeMessage< ::generated::Delete_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::Delete_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::generated::Object_Instance_TF_Meta*
Arena::CreateMaybeMessage< ::generated::Object_Instance_TF_Meta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::Object_Instance_TF_Meta >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
