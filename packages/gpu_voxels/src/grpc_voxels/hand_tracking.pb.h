// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hand_tracking.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hand_5ftracking_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hand_5ftracking_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include <google/protobuf/empty.pb.h>
#include "vertex.pb.h"
#include "meta_data.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hand_5ftracking_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hand_5ftracking_2eproto {
  static const uint32_t offsets[];
};
namespace generated {
class hand_data;
struct hand_dataDefaultTypeInternal;
extern hand_dataDefaultTypeInternal _hand_data_default_instance_;
}  // namespace generated
PROTOBUF_NAMESPACE_OPEN
template<> ::generated::hand_data* Arena::CreateMaybeMessage<::generated::hand_data>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace generated {

enum hand_index : int {
  LEFT = 0,
  RIGHT = 1,
  hand_index_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  hand_index_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool hand_index_IsValid(int value);
constexpr hand_index hand_index_MIN = LEFT;
constexpr hand_index hand_index_MAX = RIGHT;
constexpr int hand_index_ARRAYSIZE = hand_index_MAX + 1;

const std::string& hand_index_Name(hand_index value);
template<typename T>
inline const std::string& hand_index_Name(T enum_t_value) {
  static_assert(::std::is_same<T, hand_index>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function hand_index_Name.");
  return hand_index_Name(static_cast<hand_index>(enum_t_value));
}
bool hand_index_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, hand_index* value);
enum tracking_status : int {
  NOT_TRACKED = 0,
  INERTIAL_ONLY = 1,
  TRACKED = 2,
  tracking_status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  tracking_status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool tracking_status_IsValid(int value);
constexpr tracking_status tracking_status_MIN = NOT_TRACKED;
constexpr tracking_status tracking_status_MAX = TRACKED;
constexpr int tracking_status_ARRAYSIZE = tracking_status_MAX + 1;

const std::string& tracking_status_Name(tracking_status value);
template<typename T>
inline const std::string& tracking_status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, tracking_status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function tracking_status_Name.");
  return tracking_status_Name(static_cast<tracking_status>(enum_t_value));
}
bool tracking_status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, tracking_status* value);
enum hand_key_point : int {
  PALM = 0,
  WRIST = 1,
  THUMB_METACARPAL = 2,
  THUMB_PROXIMAL = 3,
  THUMB_DISTAL = 4,
  THUMB_TIP = 5,
  INDEX_METACARPAL = 6,
  INDEX_PROXIMAL = 7,
  INDEX_INTERMEDIATE = 8,
  INDEX_DISTAL = 9,
  INDEX_TIP = 10,
  MIDDLE_METACARPAL = 11,
  MIDDLE_PROXIMAL = 12,
  MIDDLE_INTERMEDIATE = 13,
  MIDDLE_DISTAL = 14,
  MIDDLE_TIP = 15,
  RING_METACARPAL = 16,
  RING_PROXIMAL = 17,
  RING_INTERMEDIATE = 18,
  RING_DISTAL = 19,
  RING_TIP = 20,
  LITTLE_METACARPAL = 21,
  LITTLE_PROXIMAL = 22,
  LITTLE_INTERMEDIATE = 23,
  LITTLE_DISTAL = 24,
  LITTLE_TIP = 25,
  hand_key_point_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  hand_key_point_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool hand_key_point_IsValid(int value);
constexpr hand_key_point hand_key_point_MIN = PALM;
constexpr hand_key_point hand_key_point_MAX = LITTLE_TIP;
constexpr int hand_key_point_ARRAYSIZE = hand_key_point_MAX + 1;

const std::string& hand_key_point_Name(hand_key_point value);
template<typename T>
inline const std::string& hand_key_point_Name(T enum_t_value) {
  static_assert(::std::is_same<T, hand_key_point>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function hand_key_point_Name.");
  return hand_key_point_Name(static_cast<hand_key_point>(enum_t_value));
}
bool hand_key_point_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, hand_key_point* value);
// ===================================================================

class hand_data final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:generated.hand_data) */ {
 public:
  inline hand_data() : hand_data(nullptr) {}
  ~hand_data() override;
  explicit PROTOBUF_CONSTEXPR hand_data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  hand_data(const hand_data& from);
  hand_data(hand_data&& from) noexcept
    : hand_data() {
    *this = ::std::move(from);
  }

  inline hand_data& operator=(const hand_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline hand_data& operator=(hand_data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const hand_data& default_instance() {
    return *internal_default_instance();
  }
  static inline const hand_data* internal_default_instance() {
    return reinterpret_cast<const hand_data*>(
               &_hand_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(hand_data& a, hand_data& b) {
    a.Swap(&b);
  }
  inline void Swap(hand_data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(hand_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  hand_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<hand_data>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const hand_data& from);
  void MergeFrom(const hand_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(hand_data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "generated.hand_data";
  }
  protected:
  explicit hand_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandKeyPositionsFieldNumber = 8,
    kHandKeyRotationsFieldNumber = 9,
    kHandKeyRadiiFieldNumber = 10,
    kGripPositionFieldNumber = 4,
    kGripRotationFieldNumber = 5,
    kAimPositionFieldNumber = 6,
    kAimRotationFieldNumber = 7,
    kHandFieldNumber = 2,
    kTrackingStatFieldNumber = 3,
    kUtcTimestampFieldNumber = 12,
    kValidFieldNumber = 1,
    kIsGraspedFieldNumber = 11,
  };
  // repeated .generated.vertex_3d hand_key_positions = 8;
  int hand_key_positions_size() const;
  private:
  int _internal_hand_key_positions_size() const;
  public:
  void clear_hand_key_positions();
  ::generated::vertex_3d* mutable_hand_key_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::generated::vertex_3d >*
      mutable_hand_key_positions();
  private:
  const ::generated::vertex_3d& _internal_hand_key_positions(int index) const;
  ::generated::vertex_3d* _internal_add_hand_key_positions();
  public:
  const ::generated::vertex_3d& hand_key_positions(int index) const;
  ::generated::vertex_3d* add_hand_key_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::generated::vertex_3d >&
      hand_key_positions() const;

  // repeated .generated.quaternion hand_key_rotations = 9;
  int hand_key_rotations_size() const;
  private:
  int _internal_hand_key_rotations_size() const;
  public:
  void clear_hand_key_rotations();
  ::generated::quaternion* mutable_hand_key_rotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::generated::quaternion >*
      mutable_hand_key_rotations();
  private:
  const ::generated::quaternion& _internal_hand_key_rotations(int index) const;
  ::generated::quaternion* _internal_add_hand_key_rotations();
  public:
  const ::generated::quaternion& hand_key_rotations(int index) const;
  ::generated::quaternion* add_hand_key_rotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::generated::quaternion >&
      hand_key_rotations() const;

  // repeated float hand_key_radii = 10;
  int hand_key_radii_size() const;
  private:
  int _internal_hand_key_radii_size() const;
  public:
  void clear_hand_key_radii();
  private:
  float _internal_hand_key_radii(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_hand_key_radii() const;
  void _internal_add_hand_key_radii(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_hand_key_radii();
  public:
  float hand_key_radii(int index) const;
  void set_hand_key_radii(int index, float value);
  void add_hand_key_radii(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      hand_key_radii() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_hand_key_radii();

  // .generated.vertex_3d grip_position = 4;
  bool has_grip_position() const;
  private:
  bool _internal_has_grip_position() const;
  public:
  void clear_grip_position();
  const ::generated::vertex_3d& grip_position() const;
  PROTOBUF_NODISCARD ::generated::vertex_3d* release_grip_position();
  ::generated::vertex_3d* mutable_grip_position();
  void set_allocated_grip_position(::generated::vertex_3d* grip_position);
  private:
  const ::generated::vertex_3d& _internal_grip_position() const;
  ::generated::vertex_3d* _internal_mutable_grip_position();
  public:
  void unsafe_arena_set_allocated_grip_position(
      ::generated::vertex_3d* grip_position);
  ::generated::vertex_3d* unsafe_arena_release_grip_position();

  // .generated.quaternion grip_rotation = 5;
  bool has_grip_rotation() const;
  private:
  bool _internal_has_grip_rotation() const;
  public:
  void clear_grip_rotation();
  const ::generated::quaternion& grip_rotation() const;
  PROTOBUF_NODISCARD ::generated::quaternion* release_grip_rotation();
  ::generated::quaternion* mutable_grip_rotation();
  void set_allocated_grip_rotation(::generated::quaternion* grip_rotation);
  private:
  const ::generated::quaternion& _internal_grip_rotation() const;
  ::generated::quaternion* _internal_mutable_grip_rotation();
  public:
  void unsafe_arena_set_allocated_grip_rotation(
      ::generated::quaternion* grip_rotation);
  ::generated::quaternion* unsafe_arena_release_grip_rotation();

  // .generated.vertex_3d aim_position = 6;
  bool has_aim_position() const;
  private:
  bool _internal_has_aim_position() const;
  public:
  void clear_aim_position();
  const ::generated::vertex_3d& aim_position() const;
  PROTOBUF_NODISCARD ::generated::vertex_3d* release_aim_position();
  ::generated::vertex_3d* mutable_aim_position();
  void set_allocated_aim_position(::generated::vertex_3d* aim_position);
  private:
  const ::generated::vertex_3d& _internal_aim_position() const;
  ::generated::vertex_3d* _internal_mutable_aim_position();
  public:
  void unsafe_arena_set_allocated_aim_position(
      ::generated::vertex_3d* aim_position);
  ::generated::vertex_3d* unsafe_arena_release_aim_position();

  // .generated.quaternion aim_rotation = 7;
  bool has_aim_rotation() const;
  private:
  bool _internal_has_aim_rotation() const;
  public:
  void clear_aim_rotation();
  const ::generated::quaternion& aim_rotation() const;
  PROTOBUF_NODISCARD ::generated::quaternion* release_aim_rotation();
  ::generated::quaternion* mutable_aim_rotation();
  void set_allocated_aim_rotation(::generated::quaternion* aim_rotation);
  private:
  const ::generated::quaternion& _internal_aim_rotation() const;
  ::generated::quaternion* _internal_mutable_aim_rotation();
  public:
  void unsafe_arena_set_allocated_aim_rotation(
      ::generated::quaternion* aim_rotation);
  ::generated::quaternion* unsafe_arena_release_aim_rotation();

  // .generated.hand_index hand = 2;
  void clear_hand();
  ::generated::hand_index hand() const;
  void set_hand(::generated::hand_index value);
  private:
  ::generated::hand_index _internal_hand() const;
  void _internal_set_hand(::generated::hand_index value);
  public:

  // .generated.tracking_status tracking_stat = 3;
  void clear_tracking_stat();
  ::generated::tracking_status tracking_stat() const;
  void set_tracking_stat(::generated::tracking_status value);
  private:
  ::generated::tracking_status _internal_tracking_stat() const;
  void _internal_set_tracking_stat(::generated::tracking_status value);
  public:

  // int64 utc_timestamp = 12;
  void clear_utc_timestamp();
  int64_t utc_timestamp() const;
  void set_utc_timestamp(int64_t value);
  private:
  int64_t _internal_utc_timestamp() const;
  void _internal_set_utc_timestamp(int64_t value);
  public:

  // bool valid = 1;
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);
  private:
  bool _internal_valid() const;
  void _internal_set_valid(bool value);
  public:

  // bool is_grasped = 11;
  void clear_is_grasped();
  bool is_grasped() const;
  void set_is_grasped(bool value);
  private:
  bool _internal_is_grasped() const;
  void _internal_set_is_grasped(bool value);
  public:

  // @@protoc_insertion_point(class_scope:generated.hand_data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::generated::vertex_3d > hand_key_positions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::generated::quaternion > hand_key_rotations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > hand_key_radii_;
    ::generated::vertex_3d* grip_position_;
    ::generated::quaternion* grip_rotation_;
    ::generated::vertex_3d* aim_position_;
    ::generated::quaternion* aim_rotation_;
    int hand_;
    int tracking_stat_;
    int64_t utc_timestamp_;
    bool valid_;
    bool is_grasped_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hand_5ftracking_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// hand_data

// bool valid = 1;
inline void hand_data::clear_valid() {
  _impl_.valid_ = false;
}
inline bool hand_data::_internal_valid() const {
  return _impl_.valid_;
}
inline bool hand_data::valid() const {
  // @@protoc_insertion_point(field_get:generated.hand_data.valid)
  return _internal_valid();
}
inline void hand_data::_internal_set_valid(bool value) {
  
  _impl_.valid_ = value;
}
inline void hand_data::set_valid(bool value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:generated.hand_data.valid)
}

// .generated.hand_index hand = 2;
inline void hand_data::clear_hand() {
  _impl_.hand_ = 0;
}
inline ::generated::hand_index hand_data::_internal_hand() const {
  return static_cast< ::generated::hand_index >(_impl_.hand_);
}
inline ::generated::hand_index hand_data::hand() const {
  // @@protoc_insertion_point(field_get:generated.hand_data.hand)
  return _internal_hand();
}
inline void hand_data::_internal_set_hand(::generated::hand_index value) {
  
  _impl_.hand_ = value;
}
inline void hand_data::set_hand(::generated::hand_index value) {
  _internal_set_hand(value);
  // @@protoc_insertion_point(field_set:generated.hand_data.hand)
}

// .generated.tracking_status tracking_stat = 3;
inline void hand_data::clear_tracking_stat() {
  _impl_.tracking_stat_ = 0;
}
inline ::generated::tracking_status hand_data::_internal_tracking_stat() const {
  return static_cast< ::generated::tracking_status >(_impl_.tracking_stat_);
}
inline ::generated::tracking_status hand_data::tracking_stat() const {
  // @@protoc_insertion_point(field_get:generated.hand_data.tracking_stat)
  return _internal_tracking_stat();
}
inline void hand_data::_internal_set_tracking_stat(::generated::tracking_status value) {
  
  _impl_.tracking_stat_ = value;
}
inline void hand_data::set_tracking_stat(::generated::tracking_status value) {
  _internal_set_tracking_stat(value);
  // @@protoc_insertion_point(field_set:generated.hand_data.tracking_stat)
}

// .generated.vertex_3d grip_position = 4;
inline bool hand_data::_internal_has_grip_position() const {
  return this != internal_default_instance() && _impl_.grip_position_ != nullptr;
}
inline bool hand_data::has_grip_position() const {
  return _internal_has_grip_position();
}
inline const ::generated::vertex_3d& hand_data::_internal_grip_position() const {
  const ::generated::vertex_3d* p = _impl_.grip_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::generated::vertex_3d&>(
      ::generated::_vertex_3d_default_instance_);
}
inline const ::generated::vertex_3d& hand_data::grip_position() const {
  // @@protoc_insertion_point(field_get:generated.hand_data.grip_position)
  return _internal_grip_position();
}
inline void hand_data::unsafe_arena_set_allocated_grip_position(
    ::generated::vertex_3d* grip_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.grip_position_);
  }
  _impl_.grip_position_ = grip_position;
  if (grip_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:generated.hand_data.grip_position)
}
inline ::generated::vertex_3d* hand_data::release_grip_position() {
  
  ::generated::vertex_3d* temp = _impl_.grip_position_;
  _impl_.grip_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::generated::vertex_3d* hand_data::unsafe_arena_release_grip_position() {
  // @@protoc_insertion_point(field_release:generated.hand_data.grip_position)
  
  ::generated::vertex_3d* temp = _impl_.grip_position_;
  _impl_.grip_position_ = nullptr;
  return temp;
}
inline ::generated::vertex_3d* hand_data::_internal_mutable_grip_position() {
  
  if (_impl_.grip_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::generated::vertex_3d>(GetArenaForAllocation());
    _impl_.grip_position_ = p;
  }
  return _impl_.grip_position_;
}
inline ::generated::vertex_3d* hand_data::mutable_grip_position() {
  ::generated::vertex_3d* _msg = _internal_mutable_grip_position();
  // @@protoc_insertion_point(field_mutable:generated.hand_data.grip_position)
  return _msg;
}
inline void hand_data::set_allocated_grip_position(::generated::vertex_3d* grip_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.grip_position_);
  }
  if (grip_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grip_position));
    if (message_arena != submessage_arena) {
      grip_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grip_position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.grip_position_ = grip_position;
  // @@protoc_insertion_point(field_set_allocated:generated.hand_data.grip_position)
}

// .generated.quaternion grip_rotation = 5;
inline bool hand_data::_internal_has_grip_rotation() const {
  return this != internal_default_instance() && _impl_.grip_rotation_ != nullptr;
}
inline bool hand_data::has_grip_rotation() const {
  return _internal_has_grip_rotation();
}
inline const ::generated::quaternion& hand_data::_internal_grip_rotation() const {
  const ::generated::quaternion* p = _impl_.grip_rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::generated::quaternion&>(
      ::generated::_quaternion_default_instance_);
}
inline const ::generated::quaternion& hand_data::grip_rotation() const {
  // @@protoc_insertion_point(field_get:generated.hand_data.grip_rotation)
  return _internal_grip_rotation();
}
inline void hand_data::unsafe_arena_set_allocated_grip_rotation(
    ::generated::quaternion* grip_rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.grip_rotation_);
  }
  _impl_.grip_rotation_ = grip_rotation;
  if (grip_rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:generated.hand_data.grip_rotation)
}
inline ::generated::quaternion* hand_data::release_grip_rotation() {
  
  ::generated::quaternion* temp = _impl_.grip_rotation_;
  _impl_.grip_rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::generated::quaternion* hand_data::unsafe_arena_release_grip_rotation() {
  // @@protoc_insertion_point(field_release:generated.hand_data.grip_rotation)
  
  ::generated::quaternion* temp = _impl_.grip_rotation_;
  _impl_.grip_rotation_ = nullptr;
  return temp;
}
inline ::generated::quaternion* hand_data::_internal_mutable_grip_rotation() {
  
  if (_impl_.grip_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::generated::quaternion>(GetArenaForAllocation());
    _impl_.grip_rotation_ = p;
  }
  return _impl_.grip_rotation_;
}
inline ::generated::quaternion* hand_data::mutable_grip_rotation() {
  ::generated::quaternion* _msg = _internal_mutable_grip_rotation();
  // @@protoc_insertion_point(field_mutable:generated.hand_data.grip_rotation)
  return _msg;
}
inline void hand_data::set_allocated_grip_rotation(::generated::quaternion* grip_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.grip_rotation_);
  }
  if (grip_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grip_rotation));
    if (message_arena != submessage_arena) {
      grip_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grip_rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.grip_rotation_ = grip_rotation;
  // @@protoc_insertion_point(field_set_allocated:generated.hand_data.grip_rotation)
}

// .generated.vertex_3d aim_position = 6;
inline bool hand_data::_internal_has_aim_position() const {
  return this != internal_default_instance() && _impl_.aim_position_ != nullptr;
}
inline bool hand_data::has_aim_position() const {
  return _internal_has_aim_position();
}
inline const ::generated::vertex_3d& hand_data::_internal_aim_position() const {
  const ::generated::vertex_3d* p = _impl_.aim_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::generated::vertex_3d&>(
      ::generated::_vertex_3d_default_instance_);
}
inline const ::generated::vertex_3d& hand_data::aim_position() const {
  // @@protoc_insertion_point(field_get:generated.hand_data.aim_position)
  return _internal_aim_position();
}
inline void hand_data::unsafe_arena_set_allocated_aim_position(
    ::generated::vertex_3d* aim_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aim_position_);
  }
  _impl_.aim_position_ = aim_position;
  if (aim_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:generated.hand_data.aim_position)
}
inline ::generated::vertex_3d* hand_data::release_aim_position() {
  
  ::generated::vertex_3d* temp = _impl_.aim_position_;
  _impl_.aim_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::generated::vertex_3d* hand_data::unsafe_arena_release_aim_position() {
  // @@protoc_insertion_point(field_release:generated.hand_data.aim_position)
  
  ::generated::vertex_3d* temp = _impl_.aim_position_;
  _impl_.aim_position_ = nullptr;
  return temp;
}
inline ::generated::vertex_3d* hand_data::_internal_mutable_aim_position() {
  
  if (_impl_.aim_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::generated::vertex_3d>(GetArenaForAllocation());
    _impl_.aim_position_ = p;
  }
  return _impl_.aim_position_;
}
inline ::generated::vertex_3d* hand_data::mutable_aim_position() {
  ::generated::vertex_3d* _msg = _internal_mutable_aim_position();
  // @@protoc_insertion_point(field_mutable:generated.hand_data.aim_position)
  return _msg;
}
inline void hand_data::set_allocated_aim_position(::generated::vertex_3d* aim_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aim_position_);
  }
  if (aim_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aim_position));
    if (message_arena != submessage_arena) {
      aim_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aim_position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.aim_position_ = aim_position;
  // @@protoc_insertion_point(field_set_allocated:generated.hand_data.aim_position)
}

// .generated.quaternion aim_rotation = 7;
inline bool hand_data::_internal_has_aim_rotation() const {
  return this != internal_default_instance() && _impl_.aim_rotation_ != nullptr;
}
inline bool hand_data::has_aim_rotation() const {
  return _internal_has_aim_rotation();
}
inline const ::generated::quaternion& hand_data::_internal_aim_rotation() const {
  const ::generated::quaternion* p = _impl_.aim_rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::generated::quaternion&>(
      ::generated::_quaternion_default_instance_);
}
inline const ::generated::quaternion& hand_data::aim_rotation() const {
  // @@protoc_insertion_point(field_get:generated.hand_data.aim_rotation)
  return _internal_aim_rotation();
}
inline void hand_data::unsafe_arena_set_allocated_aim_rotation(
    ::generated::quaternion* aim_rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aim_rotation_);
  }
  _impl_.aim_rotation_ = aim_rotation;
  if (aim_rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:generated.hand_data.aim_rotation)
}
inline ::generated::quaternion* hand_data::release_aim_rotation() {
  
  ::generated::quaternion* temp = _impl_.aim_rotation_;
  _impl_.aim_rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::generated::quaternion* hand_data::unsafe_arena_release_aim_rotation() {
  // @@protoc_insertion_point(field_release:generated.hand_data.aim_rotation)
  
  ::generated::quaternion* temp = _impl_.aim_rotation_;
  _impl_.aim_rotation_ = nullptr;
  return temp;
}
inline ::generated::quaternion* hand_data::_internal_mutable_aim_rotation() {
  
  if (_impl_.aim_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::generated::quaternion>(GetArenaForAllocation());
    _impl_.aim_rotation_ = p;
  }
  return _impl_.aim_rotation_;
}
inline ::generated::quaternion* hand_data::mutable_aim_rotation() {
  ::generated::quaternion* _msg = _internal_mutable_aim_rotation();
  // @@protoc_insertion_point(field_mutable:generated.hand_data.aim_rotation)
  return _msg;
}
inline void hand_data::set_allocated_aim_rotation(::generated::quaternion* aim_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aim_rotation_);
  }
  if (aim_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aim_rotation));
    if (message_arena != submessage_arena) {
      aim_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aim_rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.aim_rotation_ = aim_rotation;
  // @@protoc_insertion_point(field_set_allocated:generated.hand_data.aim_rotation)
}

// repeated .generated.vertex_3d hand_key_positions = 8;
inline int hand_data::_internal_hand_key_positions_size() const {
  return _impl_.hand_key_positions_.size();
}
inline int hand_data::hand_key_positions_size() const {
  return _internal_hand_key_positions_size();
}
inline ::generated::vertex_3d* hand_data::mutable_hand_key_positions(int index) {
  // @@protoc_insertion_point(field_mutable:generated.hand_data.hand_key_positions)
  return _impl_.hand_key_positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::generated::vertex_3d >*
hand_data::mutable_hand_key_positions() {
  // @@protoc_insertion_point(field_mutable_list:generated.hand_data.hand_key_positions)
  return &_impl_.hand_key_positions_;
}
inline const ::generated::vertex_3d& hand_data::_internal_hand_key_positions(int index) const {
  return _impl_.hand_key_positions_.Get(index);
}
inline const ::generated::vertex_3d& hand_data::hand_key_positions(int index) const {
  // @@protoc_insertion_point(field_get:generated.hand_data.hand_key_positions)
  return _internal_hand_key_positions(index);
}
inline ::generated::vertex_3d* hand_data::_internal_add_hand_key_positions() {
  return _impl_.hand_key_positions_.Add();
}
inline ::generated::vertex_3d* hand_data::add_hand_key_positions() {
  ::generated::vertex_3d* _add = _internal_add_hand_key_positions();
  // @@protoc_insertion_point(field_add:generated.hand_data.hand_key_positions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::generated::vertex_3d >&
hand_data::hand_key_positions() const {
  // @@protoc_insertion_point(field_list:generated.hand_data.hand_key_positions)
  return _impl_.hand_key_positions_;
}

// repeated .generated.quaternion hand_key_rotations = 9;
inline int hand_data::_internal_hand_key_rotations_size() const {
  return _impl_.hand_key_rotations_.size();
}
inline int hand_data::hand_key_rotations_size() const {
  return _internal_hand_key_rotations_size();
}
inline ::generated::quaternion* hand_data::mutable_hand_key_rotations(int index) {
  // @@protoc_insertion_point(field_mutable:generated.hand_data.hand_key_rotations)
  return _impl_.hand_key_rotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::generated::quaternion >*
hand_data::mutable_hand_key_rotations() {
  // @@protoc_insertion_point(field_mutable_list:generated.hand_data.hand_key_rotations)
  return &_impl_.hand_key_rotations_;
}
inline const ::generated::quaternion& hand_data::_internal_hand_key_rotations(int index) const {
  return _impl_.hand_key_rotations_.Get(index);
}
inline const ::generated::quaternion& hand_data::hand_key_rotations(int index) const {
  // @@protoc_insertion_point(field_get:generated.hand_data.hand_key_rotations)
  return _internal_hand_key_rotations(index);
}
inline ::generated::quaternion* hand_data::_internal_add_hand_key_rotations() {
  return _impl_.hand_key_rotations_.Add();
}
inline ::generated::quaternion* hand_data::add_hand_key_rotations() {
  ::generated::quaternion* _add = _internal_add_hand_key_rotations();
  // @@protoc_insertion_point(field_add:generated.hand_data.hand_key_rotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::generated::quaternion >&
hand_data::hand_key_rotations() const {
  // @@protoc_insertion_point(field_list:generated.hand_data.hand_key_rotations)
  return _impl_.hand_key_rotations_;
}

// repeated float hand_key_radii = 10;
inline int hand_data::_internal_hand_key_radii_size() const {
  return _impl_.hand_key_radii_.size();
}
inline int hand_data::hand_key_radii_size() const {
  return _internal_hand_key_radii_size();
}
inline void hand_data::clear_hand_key_radii() {
  _impl_.hand_key_radii_.Clear();
}
inline float hand_data::_internal_hand_key_radii(int index) const {
  return _impl_.hand_key_radii_.Get(index);
}
inline float hand_data::hand_key_radii(int index) const {
  // @@protoc_insertion_point(field_get:generated.hand_data.hand_key_radii)
  return _internal_hand_key_radii(index);
}
inline void hand_data::set_hand_key_radii(int index, float value) {
  _impl_.hand_key_radii_.Set(index, value);
  // @@protoc_insertion_point(field_set:generated.hand_data.hand_key_radii)
}
inline void hand_data::_internal_add_hand_key_radii(float value) {
  _impl_.hand_key_radii_.Add(value);
}
inline void hand_data::add_hand_key_radii(float value) {
  _internal_add_hand_key_radii(value);
  // @@protoc_insertion_point(field_add:generated.hand_data.hand_key_radii)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
hand_data::_internal_hand_key_radii() const {
  return _impl_.hand_key_radii_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
hand_data::hand_key_radii() const {
  // @@protoc_insertion_point(field_list:generated.hand_data.hand_key_radii)
  return _internal_hand_key_radii();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
hand_data::_internal_mutable_hand_key_radii() {
  return &_impl_.hand_key_radii_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
hand_data::mutable_hand_key_radii() {
  // @@protoc_insertion_point(field_mutable_list:generated.hand_data.hand_key_radii)
  return _internal_mutable_hand_key_radii();
}

// bool is_grasped = 11;
inline void hand_data::clear_is_grasped() {
  _impl_.is_grasped_ = false;
}
inline bool hand_data::_internal_is_grasped() const {
  return _impl_.is_grasped_;
}
inline bool hand_data::is_grasped() const {
  // @@protoc_insertion_point(field_get:generated.hand_data.is_grasped)
  return _internal_is_grasped();
}
inline void hand_data::_internal_set_is_grasped(bool value) {
  
  _impl_.is_grasped_ = value;
}
inline void hand_data::set_is_grasped(bool value) {
  _internal_set_is_grasped(value);
  // @@protoc_insertion_point(field_set:generated.hand_data.is_grasped)
}

// int64 utc_timestamp = 12;
inline void hand_data::clear_utc_timestamp() {
  _impl_.utc_timestamp_ = int64_t{0};
}
inline int64_t hand_data::_internal_utc_timestamp() const {
  return _impl_.utc_timestamp_;
}
inline int64_t hand_data::utc_timestamp() const {
  // @@protoc_insertion_point(field_get:generated.hand_data.utc_timestamp)
  return _internal_utc_timestamp();
}
inline void hand_data::_internal_set_utc_timestamp(int64_t value) {
  
  _impl_.utc_timestamp_ = value;
}
inline void hand_data::set_utc_timestamp(int64_t value) {
  _internal_set_utc_timestamp(value);
  // @@protoc_insertion_point(field_set:generated.hand_data.utc_timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace generated

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::generated::hand_index> : ::std::true_type {};
template <> struct is_proto_enum< ::generated::tracking_status> : ::std::true_type {};
template <> struct is_proto_enum< ::generated::hand_key_point> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hand_5ftracking_2eproto
