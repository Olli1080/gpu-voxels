// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_meta_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_meta_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_meta_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_meta_5fdata_2eproto {
  static const uint32_t offsets[];
};
namespace generated {
class Axis_Alignment;
struct Axis_AlignmentDefaultTypeInternal;
extern Axis_AlignmentDefaultTypeInternal _Axis_Alignment_default_instance_;
class Transformation_Meta;
struct Transformation_MetaDefaultTypeInternal;
extern Transformation_MetaDefaultTypeInternal _Transformation_Meta_default_instance_;
}  // namespace generated
PROTOBUF_NAMESPACE_OPEN
template<> ::generated::Axis_Alignment* Arena::CreateMaybeMessage<::generated::Axis_Alignment>(Arena*);
template<> ::generated::Transformation_Meta* Arena::CreateMaybeMessage<::generated::Transformation_Meta>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace generated {

enum Axis : int {
  X = 0,
  Y = 1,
  Z = 2,
  Axis_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Axis_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Axis_IsValid(int value);
constexpr Axis Axis_MIN = X;
constexpr Axis Axis_MAX = Z;
constexpr int Axis_ARRAYSIZE = Axis_MAX + 1;

const std::string& Axis_Name(Axis value);
template<typename T>
inline const std::string& Axis_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Axis>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Axis_Name.");
  return Axis_Name(static_cast<Axis>(enum_t_value));
}
bool Axis_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Axis* value);
enum Axis_Direction : int {
  INVALID = 0,
  POSITIVE = 1,
  NEGATIVE = -1,
  Axis_Direction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Axis_Direction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Axis_Direction_IsValid(int value);
constexpr Axis_Direction Axis_Direction_MIN = NEGATIVE;
constexpr Axis_Direction Axis_Direction_MAX = POSITIVE;
constexpr int Axis_Direction_ARRAYSIZE = Axis_Direction_MAX + 1;

const std::string& Axis_Direction_Name(Axis_Direction value);
template<typename T>
inline const std::string& Axis_Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Axis_Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Axis_Direction_Name.");
  return Axis_Direction_Name(static_cast<Axis_Direction>(enum_t_value));
}
bool Axis_Direction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Axis_Direction* value);
// ===================================================================

class Axis_Alignment final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:generated.Axis_Alignment) */ {
 public:
  inline Axis_Alignment() : Axis_Alignment(nullptr) {}
  ~Axis_Alignment() override;
  explicit PROTOBUF_CONSTEXPR Axis_Alignment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Axis_Alignment(const Axis_Alignment& from);
  Axis_Alignment(Axis_Alignment&& from) noexcept
    : Axis_Alignment() {
    *this = ::std::move(from);
  }

  inline Axis_Alignment& operator=(const Axis_Alignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Axis_Alignment& operator=(Axis_Alignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Axis_Alignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const Axis_Alignment* internal_default_instance() {
    return reinterpret_cast<const Axis_Alignment*>(
               &_Axis_Alignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Axis_Alignment& a, Axis_Alignment& b) {
    a.Swap(&b);
  }
  inline void Swap(Axis_Alignment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Axis_Alignment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Axis_Alignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Axis_Alignment>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Axis_Alignment& from);
  void MergeFrom(const Axis_Alignment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Axis_Alignment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "generated.Axis_Alignment";
  }
  protected:
  explicit Axis_Alignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxisFieldNumber = 1,
    kDirectionFieldNumber = 2,
  };
  // .generated.Axis axis = 1;
  void clear_axis();
  ::generated::Axis axis() const;
  void set_axis(::generated::Axis value);
  private:
  ::generated::Axis _internal_axis() const;
  void _internal_set_axis(::generated::Axis value);
  public:

  // .generated.Axis_Direction direction = 2;
  void clear_direction();
  ::generated::Axis_Direction direction() const;
  void set_direction(::generated::Axis_Direction value);
  private:
  ::generated::Axis_Direction _internal_direction() const;
  void _internal_set_direction(::generated::Axis_Direction value);
  public:

  // @@protoc_insertion_point(class_scope:generated.Axis_Alignment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int axis_;
    int direction_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meta_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Transformation_Meta final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:generated.Transformation_Meta) */ {
 public:
  inline Transformation_Meta() : Transformation_Meta(nullptr) {}
  ~Transformation_Meta() override;
  explicit PROTOBUF_CONSTEXPR Transformation_Meta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transformation_Meta(const Transformation_Meta& from);
  Transformation_Meta(Transformation_Meta&& from) noexcept
    : Transformation_Meta() {
    *this = ::std::move(from);
  }

  inline Transformation_Meta& operator=(const Transformation_Meta& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transformation_Meta& operator=(Transformation_Meta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Transformation_Meta& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transformation_Meta* internal_default_instance() {
    return reinterpret_cast<const Transformation_Meta*>(
               &_Transformation_Meta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Transformation_Meta& a, Transformation_Meta& b) {
    a.Swap(&b);
  }
  inline void Swap(Transformation_Meta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transformation_Meta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transformation_Meta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transformation_Meta>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Transformation_Meta& from);
  void MergeFrom(const Transformation_Meta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transformation_Meta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "generated.Transformation_Meta";
  }
  protected:
  explicit Transformation_Meta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRightFieldNumber = 1,
    kForwardFieldNumber = 2,
    kUpFieldNumber = 3,
  };
  // .generated.Axis_Alignment right = 1;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  const ::generated::Axis_Alignment& right() const;
  PROTOBUF_NODISCARD ::generated::Axis_Alignment* release_right();
  ::generated::Axis_Alignment* mutable_right();
  void set_allocated_right(::generated::Axis_Alignment* right);
  private:
  const ::generated::Axis_Alignment& _internal_right() const;
  ::generated::Axis_Alignment* _internal_mutable_right();
  public:
  void unsafe_arena_set_allocated_right(
      ::generated::Axis_Alignment* right);
  ::generated::Axis_Alignment* unsafe_arena_release_right();

  // .generated.Axis_Alignment forward = 2;
  bool has_forward() const;
  private:
  bool _internal_has_forward() const;
  public:
  void clear_forward();
  const ::generated::Axis_Alignment& forward() const;
  PROTOBUF_NODISCARD ::generated::Axis_Alignment* release_forward();
  ::generated::Axis_Alignment* mutable_forward();
  void set_allocated_forward(::generated::Axis_Alignment* forward);
  private:
  const ::generated::Axis_Alignment& _internal_forward() const;
  ::generated::Axis_Alignment* _internal_mutable_forward();
  public:
  void unsafe_arena_set_allocated_forward(
      ::generated::Axis_Alignment* forward);
  ::generated::Axis_Alignment* unsafe_arena_release_forward();

  // .generated.Axis_Alignment up = 3;
  bool has_up() const;
  private:
  bool _internal_has_up() const;
  public:
  void clear_up();
  const ::generated::Axis_Alignment& up() const;
  PROTOBUF_NODISCARD ::generated::Axis_Alignment* release_up();
  ::generated::Axis_Alignment* mutable_up();
  void set_allocated_up(::generated::Axis_Alignment* up);
  private:
  const ::generated::Axis_Alignment& _internal_up() const;
  ::generated::Axis_Alignment* _internal_mutable_up();
  public:
  void unsafe_arena_set_allocated_up(
      ::generated::Axis_Alignment* up);
  ::generated::Axis_Alignment* unsafe_arena_release_up();

  // @@protoc_insertion_point(class_scope:generated.Transformation_Meta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::generated::Axis_Alignment* right_;
    ::generated::Axis_Alignment* forward_;
    ::generated::Axis_Alignment* up_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meta_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Axis_Alignment

// .generated.Axis axis = 1;
inline void Axis_Alignment::clear_axis() {
  _impl_.axis_ = 0;
}
inline ::generated::Axis Axis_Alignment::_internal_axis() const {
  return static_cast< ::generated::Axis >(_impl_.axis_);
}
inline ::generated::Axis Axis_Alignment::axis() const {
  // @@protoc_insertion_point(field_get:generated.Axis_Alignment.axis)
  return _internal_axis();
}
inline void Axis_Alignment::_internal_set_axis(::generated::Axis value) {
  
  _impl_.axis_ = value;
}
inline void Axis_Alignment::set_axis(::generated::Axis value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:generated.Axis_Alignment.axis)
}

// .generated.Axis_Direction direction = 2;
inline void Axis_Alignment::clear_direction() {
  _impl_.direction_ = 0;
}
inline ::generated::Axis_Direction Axis_Alignment::_internal_direction() const {
  return static_cast< ::generated::Axis_Direction >(_impl_.direction_);
}
inline ::generated::Axis_Direction Axis_Alignment::direction() const {
  // @@protoc_insertion_point(field_get:generated.Axis_Alignment.direction)
  return _internal_direction();
}
inline void Axis_Alignment::_internal_set_direction(::generated::Axis_Direction value) {
  
  _impl_.direction_ = value;
}
inline void Axis_Alignment::set_direction(::generated::Axis_Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:generated.Axis_Alignment.direction)
}

// -------------------------------------------------------------------

// Transformation_Meta

// .generated.Axis_Alignment right = 1;
inline bool Transformation_Meta::_internal_has_right() const {
  return this != internal_default_instance() && _impl_.right_ != nullptr;
}
inline bool Transformation_Meta::has_right() const {
  return _internal_has_right();
}
inline void Transformation_Meta::clear_right() {
  if (GetArenaForAllocation() == nullptr && _impl_.right_ != nullptr) {
    delete _impl_.right_;
  }
  _impl_.right_ = nullptr;
}
inline const ::generated::Axis_Alignment& Transformation_Meta::_internal_right() const {
  const ::generated::Axis_Alignment* p = _impl_.right_;
  return p != nullptr ? *p : reinterpret_cast<const ::generated::Axis_Alignment&>(
      ::generated::_Axis_Alignment_default_instance_);
}
inline const ::generated::Axis_Alignment& Transformation_Meta::right() const {
  // @@protoc_insertion_point(field_get:generated.Transformation_Meta.right)
  return _internal_right();
}
inline void Transformation_Meta::unsafe_arena_set_allocated_right(
    ::generated::Axis_Alignment* right) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.right_);
  }
  _impl_.right_ = right;
  if (right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:generated.Transformation_Meta.right)
}
inline ::generated::Axis_Alignment* Transformation_Meta::release_right() {
  
  ::generated::Axis_Alignment* temp = _impl_.right_;
  _impl_.right_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::generated::Axis_Alignment* Transformation_Meta::unsafe_arena_release_right() {
  // @@protoc_insertion_point(field_release:generated.Transformation_Meta.right)
  
  ::generated::Axis_Alignment* temp = _impl_.right_;
  _impl_.right_ = nullptr;
  return temp;
}
inline ::generated::Axis_Alignment* Transformation_Meta::_internal_mutable_right() {
  
  if (_impl_.right_ == nullptr) {
    auto* p = CreateMaybeMessage<::generated::Axis_Alignment>(GetArenaForAllocation());
    _impl_.right_ = p;
  }
  return _impl_.right_;
}
inline ::generated::Axis_Alignment* Transformation_Meta::mutable_right() {
  ::generated::Axis_Alignment* _msg = _internal_mutable_right();
  // @@protoc_insertion_point(field_mutable:generated.Transformation_Meta.right)
  return _msg;
}
inline void Transformation_Meta::set_allocated_right(::generated::Axis_Alignment* right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.right_;
  }
  if (right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(right);
    if (message_arena != submessage_arena) {
      right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.right_ = right;
  // @@protoc_insertion_point(field_set_allocated:generated.Transformation_Meta.right)
}

// .generated.Axis_Alignment forward = 2;
inline bool Transformation_Meta::_internal_has_forward() const {
  return this != internal_default_instance() && _impl_.forward_ != nullptr;
}
inline bool Transformation_Meta::has_forward() const {
  return _internal_has_forward();
}
inline void Transformation_Meta::clear_forward() {
  if (GetArenaForAllocation() == nullptr && _impl_.forward_ != nullptr) {
    delete _impl_.forward_;
  }
  _impl_.forward_ = nullptr;
}
inline const ::generated::Axis_Alignment& Transformation_Meta::_internal_forward() const {
  const ::generated::Axis_Alignment* p = _impl_.forward_;
  return p != nullptr ? *p : reinterpret_cast<const ::generated::Axis_Alignment&>(
      ::generated::_Axis_Alignment_default_instance_);
}
inline const ::generated::Axis_Alignment& Transformation_Meta::forward() const {
  // @@protoc_insertion_point(field_get:generated.Transformation_Meta.forward)
  return _internal_forward();
}
inline void Transformation_Meta::unsafe_arena_set_allocated_forward(
    ::generated::Axis_Alignment* forward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.forward_);
  }
  _impl_.forward_ = forward;
  if (forward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:generated.Transformation_Meta.forward)
}
inline ::generated::Axis_Alignment* Transformation_Meta::release_forward() {
  
  ::generated::Axis_Alignment* temp = _impl_.forward_;
  _impl_.forward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::generated::Axis_Alignment* Transformation_Meta::unsafe_arena_release_forward() {
  // @@protoc_insertion_point(field_release:generated.Transformation_Meta.forward)
  
  ::generated::Axis_Alignment* temp = _impl_.forward_;
  _impl_.forward_ = nullptr;
  return temp;
}
inline ::generated::Axis_Alignment* Transformation_Meta::_internal_mutable_forward() {
  
  if (_impl_.forward_ == nullptr) {
    auto* p = CreateMaybeMessage<::generated::Axis_Alignment>(GetArenaForAllocation());
    _impl_.forward_ = p;
  }
  return _impl_.forward_;
}
inline ::generated::Axis_Alignment* Transformation_Meta::mutable_forward() {
  ::generated::Axis_Alignment* _msg = _internal_mutable_forward();
  // @@protoc_insertion_point(field_mutable:generated.Transformation_Meta.forward)
  return _msg;
}
inline void Transformation_Meta::set_allocated_forward(::generated::Axis_Alignment* forward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.forward_;
  }
  if (forward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(forward);
    if (message_arena != submessage_arena) {
      forward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.forward_ = forward;
  // @@protoc_insertion_point(field_set_allocated:generated.Transformation_Meta.forward)
}

// .generated.Axis_Alignment up = 3;
inline bool Transformation_Meta::_internal_has_up() const {
  return this != internal_default_instance() && _impl_.up_ != nullptr;
}
inline bool Transformation_Meta::has_up() const {
  return _internal_has_up();
}
inline void Transformation_Meta::clear_up() {
  if (GetArenaForAllocation() == nullptr && _impl_.up_ != nullptr) {
    delete _impl_.up_;
  }
  _impl_.up_ = nullptr;
}
inline const ::generated::Axis_Alignment& Transformation_Meta::_internal_up() const {
  const ::generated::Axis_Alignment* p = _impl_.up_;
  return p != nullptr ? *p : reinterpret_cast<const ::generated::Axis_Alignment&>(
      ::generated::_Axis_Alignment_default_instance_);
}
inline const ::generated::Axis_Alignment& Transformation_Meta::up() const {
  // @@protoc_insertion_point(field_get:generated.Transformation_Meta.up)
  return _internal_up();
}
inline void Transformation_Meta::unsafe_arena_set_allocated_up(
    ::generated::Axis_Alignment* up) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.up_);
  }
  _impl_.up_ = up;
  if (up) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:generated.Transformation_Meta.up)
}
inline ::generated::Axis_Alignment* Transformation_Meta::release_up() {
  
  ::generated::Axis_Alignment* temp = _impl_.up_;
  _impl_.up_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::generated::Axis_Alignment* Transformation_Meta::unsafe_arena_release_up() {
  // @@protoc_insertion_point(field_release:generated.Transformation_Meta.up)
  
  ::generated::Axis_Alignment* temp = _impl_.up_;
  _impl_.up_ = nullptr;
  return temp;
}
inline ::generated::Axis_Alignment* Transformation_Meta::_internal_mutable_up() {
  
  if (_impl_.up_ == nullptr) {
    auto* p = CreateMaybeMessage<::generated::Axis_Alignment>(GetArenaForAllocation());
    _impl_.up_ = p;
  }
  return _impl_.up_;
}
inline ::generated::Axis_Alignment* Transformation_Meta::mutable_up() {
  ::generated::Axis_Alignment* _msg = _internal_mutable_up();
  // @@protoc_insertion_point(field_mutable:generated.Transformation_Meta.up)
  return _msg;
}
inline void Transformation_Meta::set_allocated_up(::generated::Axis_Alignment* up) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.up_;
  }
  if (up) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(up);
    if (message_arena != submessage_arena) {
      up = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, up, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.up_ = up;
  // @@protoc_insertion_point(field_set_allocated:generated.Transformation_Meta.up)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace generated

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::generated::Axis> : ::std::true_type {};
template <> struct is_proto_enum< ::generated::Axis_Direction> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_meta_5fdata_2eproto
