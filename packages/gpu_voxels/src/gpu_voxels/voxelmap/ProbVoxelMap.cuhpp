// this is for emacs file handling -*- mode: c++; indent-tabs-mode: nil -*-

// -- BEGIN LICENSE BLOCK ----------------------------------------------
// This file is part of the GPU Voxels Software Library.
//
// This program is free software licensed under the CDDL
// (COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0).
// You can find a copy of this license in LICENSE.txt in the top
// directory of the source code.
//
// Â© Copyright 2014 FZI Forschungszentrum Informatik, Karlsruhe, Germany
//
// -- END LICENSE BLOCK ------------------------------------------------

//----------------------------------------------------------------------
/*!\file
 *
 * \author  Florian Drews
 * \date    2014-07-09
 *
 */
//----------------------------------------------------------------------
#ifndef GPU_VOXELS_VOXELMAP_PROB_VOXELMAP_HPP_INCLUDED
#define GPU_VOXELS_VOXELMAP_PROB_VOXELMAP_HPP_INCLUDED

#include "ProbVoxelMap.h"
#include <gpu_voxels/helpers/PointCloud.h>
#include <gpu_voxels/helpers/MathHelpers.h>

namespace gpu_voxels
{
    namespace voxelmap
	{

        template<std::size_t length>
        void ProbVoxelMap::insertSensorData(const PointCloud& global_points, const Vector3f& sensor_pose, bool enable_raycasting,
            bool cut_real_robot, BitVoxelMeaning robot_voxel_meaning,
            BitVoxel<length>* robot_map)
        {
            std::lock_guard guard(this->m_mutex);

            computeLinearLoad(global_points.getPointCloudSize(), m_blocks, m_threads);

            if (enable_raycasting)
            {
                kernelInsertSensorData<<<m_blocks, m_threads>>>(
                    m_dev_data.data().get(), m_dev_data.size(), m_dim, m_voxel_side_length, sensor_pose,
                    global_points.getPointsDevice().data().get(), global_points.getPointCloudSize(), cut_real_robot, robot_map, robot_voxel_meaning, RayCaster());
                CHECK_CUDA_ERROR();
            }
            else
            {
                kernelInsertSensorData<<<m_blocks, m_threads>>>(
                    m_dev_data.data().get(), m_dev_data.size(), m_dim, m_voxel_side_length, sensor_pose,
                    global_points.getPointsDevice().data().get(), global_points.getPointCloudSize(), cut_real_robot, robot_map, robot_voxel_meaning, DummyRayCaster());
                CHECK_CUDA_ERROR();
            }
            HANDLE_CUDA_ERROR(cudaDeviceSynchronize());
        }

    } // end of namespace
} // end of namespace

#endif